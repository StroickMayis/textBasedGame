/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/index.css":
/*!*************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/index.css ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ \"./node_modules/css-loader/dist/runtime/sourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\r\n    color: white;\r\n    box-sizing: border-box;\r\n}\r\nbody {\r\n    background-color: black;\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    min-height: 100vh;\r\n}\r\n.gameDivision,\r\n.chatDivision,\r\n.utilDivision {\r\n    border: 1px solid white;\r\n    text-align: center;\r\n    height: 100vh;\r\n}\r\n.chatDivision,\r\n.utilDivision {\r\n    flex: 1 1 10dvw;\r\n}\r\n.gameDivision {\r\n    flex: 0 2.5 55dvw;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.gameDivision .topBar,\r\n.gameDivision .midBar,\r\n.gameDivision .botBar {\r\n    border: 1px solid white;\r\n}\r\n.gameDivision .topBar{\r\n    flex: 2 1 auto;\r\n}\r\n.gameDivision .midBar{\r\n    flex: 90 1 10dvh;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n/* .gameDivision .botBar{\r\n    flex: 10 1 auto;\r\n} */\r\n.NPCBar {\r\n    border: 1px solid white;\r\n    flex: 1 1 auto;\r\n    flex-direction: column;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n.PCBar {\r\n    border: 1px solid white;\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n.NPC {\r\n    border: 1px solid white;\r\n    width: 125px;\r\n    height: 125px;\r\n}\r\n.PC {\r\n    border: 1px solid white;\r\n    width: 125px;\r\n    height: 125px;\r\n}\r\n.ability {\r\n    border: 1px solid white;\r\n    /* flex: 1 1 auto; */\r\n    height: 3dvw;\r\n    width: 3dvw;\r\n}\r\n.abilityListContainer {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n}\r\n.slideLeft,\r\n.slideRight {\r\n    border: 1px solid white;\r\n    flex: .025 1 auto;\r\n}\r\n.botBar {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n}\r\n.utilDivision {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n.endTurnButton {\r\n    border: 1px solid white;\r\n    flex: .09 1 auto;\r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.topBar {\r\n    display: flex;\r\n    justify-content: space-betweens;\r\n}\r\n.topBar div {\r\n    flex: 1 1 auto;\r\n}\r\n.PCBarRow1, \r\n.PCBarRow2, \r\n.PCBarRow3,\r\n.NPCBarRow1,\r\n.NPCBarRow2,\r\n.NPCBarRow3\r\n {\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    display: flex;\r\n    width: 100%;\r\n    flex: 1 1 auto;\r\n    border: 1px solid white;\r\n}\r\n.divider {\r\n    padding: 15px;\r\n}\r\n.chatDivision {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n.moveRowButtons {\r\n    border: 1px solid white;\r\n    flex: .09 1 auto;\r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.moveRowButtons div{\r\n    border: 1px solid white;\r\n    flex: 1 1 auto;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.utilDivisionTabs {\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n.utilDivisionTabs * {\r\n    flex: 1 1 auto;\r\n    border: 2px solid white;\r\n}\r\n.utilDivisionDisplay {\r\n    height: 100%;\r\n    padding: 10px 0px;\r\n}\r\n.inventoryContainer {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.inventoryContainer div { \r\n    border: 1px solid white;\r\n    flex: 0 1 auto;\r\n    height: 2.7dvw;\r\n    width: 2.7dvw;\r\n}\r\ndiv.tooltip {\r\n    flex-direction: column;\r\n    background-color: black;\r\n    width: 20dvw;\r\n    height: max-content;\r\n    padding: 10px;\r\n    border: 1px solid white;\r\n    position: relative;\r\n    right: 20dvw;\r\n    bottom: fit-content;\r\n    display: flex;\r\n}\r\ndiv.tooltipContent {\r\n    width: auto;\r\n    height: auto;\r\n    border: none;\r\n    color: white;\r\n    text-align: center;\r\n    z-index: 1;\r\n}\r\n.equipmentItem {\r\n    border: 1px solid white;\r\n    flex: 0 1 auto;\r\n    height: 2.7dvw;\r\n    width: 2.7dvw;\r\n    margin: 4px;\r\n}\r\n.equipmentItem.mainHand {\r\n    margin-left: 0px;\r\n}\r\n.equipmentItem.offHand {\r\n    margin-right: 0px;\r\n}\r\n.inventoryItem {\r\n    margin: 2px;\r\n}\r\n.equipmentContainer {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.equipDisplay {\r\n    padding: 10px;\r\n    display: flex;\r\n}\r\n/* .equipLeft,\r\n.equipRight {\r\n    margin: 10px;\r\n} */\r\n.equipCenter {\r\n    flex: auto;\r\n}\r\n.weaponsDisplay {\r\n    /* Need to fix this, need mainHand and offHand to line up with bottom armors consistently as the screen changes */\r\n    margin-top: 1.35dvh;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n.statsDisplay {\r\n    display: flex;\r\n    justify-content: space-around;\r\n    font-size: .8dvw;\r\n}\r\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/index.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,YAAY;IACZ,sBAAsB;AAC1B;AACA;IACI,uBAAuB;IACvB,SAAS;IACT,UAAU;IACV,aAAa;IACb,iBAAiB;AACrB;AACA;;;IAGI,uBAAuB;IACvB,kBAAkB;IAClB,aAAa;AACjB;AACA;;IAEI,eAAe;AACnB;AACA;IACI,iBAAiB;IACjB,aAAa;IACb,sBAAsB;AAC1B;AACA;;;IAGI,uBAAuB;AAC3B;AACA;IACI,cAAc;AAClB;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;AACA;;GAEG;AACH;IACI,uBAAuB;IACvB,cAAc;IACd,sBAAsB;IACtB,aAAa;IACb,6BAA6B;IAC7B,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;AACjB;AACA;IACI,uBAAuB;IACvB,YAAY;IACZ,aAAa;AACjB;AACA;IACI,uBAAuB;IACvB,oBAAoB;IACpB,YAAY;IACZ,WAAW;AACf;AACA;IACI,aAAa;IACb,eAAe;IACf,uBAAuB;AAC3B;AACA;;IAEI,uBAAuB;IACvB,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,6BAA6B;AACjC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;AACA;IACI,uBAAuB;IACvB,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,+BAA+B;AACnC;AACA;IACI,cAAc;AAClB;AACA;;;;;;;IAOI,mBAAmB;IACnB,6BAA6B;IAC7B,aAAa;IACb,WAAW;IACX,cAAc;IACd,uBAAuB;AAC3B;AACA;IACI,aAAa;AACjB;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;AACA;IACI,uBAAuB;IACvB,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,cAAc;IACd,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,6BAA6B;AACjC;AACA;IACI,cAAc;IACd,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,iBAAiB;AACrB;AACA;IACI,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,aAAa;AACjB;AACA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,YAAY;IACZ,mBAAmB;IACnB,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,UAAU;AACd;AACA;IACI,uBAAuB;IACvB,cAAc;IACd,cAAc;IACd,aAAa;IACb,WAAW;AACf;AACA;IACI,gBAAgB;AACpB;AACA;IACI,iBAAiB;AACrB;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,aAAa;AACjB;AACA;;;GAGG;AACH;IACI,UAAU;AACd;AACA;IACI,iHAAiH;IACjH,mBAAmB;IACnB,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;IACb,6BAA6B;IAC7B,gBAAgB;AACpB\",\"sourcesContent\":[\"* {\\r\\n    color: white;\\r\\n    box-sizing: border-box;\\r\\n}\\r\\nbody {\\r\\n    background-color: black;\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    display: flex;\\r\\n    min-height: 100vh;\\r\\n}\\r\\n.gameDivision,\\r\\n.chatDivision,\\r\\n.utilDivision {\\r\\n    border: 1px solid white;\\r\\n    text-align: center;\\r\\n    height: 100vh;\\r\\n}\\r\\n.chatDivision,\\r\\n.utilDivision {\\r\\n    flex: 1 1 10dvw;\\r\\n}\\r\\n.gameDivision {\\r\\n    flex: 0 2.5 55dvw;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n}\\r\\n.gameDivision .topBar,\\r\\n.gameDivision .midBar,\\r\\n.gameDivision .botBar {\\r\\n    border: 1px solid white;\\r\\n}\\r\\n.gameDivision .topBar{\\r\\n    flex: 2 1 auto;\\r\\n}\\r\\n.gameDivision .midBar{\\r\\n    flex: 90 1 10dvh;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n}\\r\\n/* .gameDivision .botBar{\\r\\n    flex: 10 1 auto;\\r\\n} */\\r\\n.NPCBar {\\r\\n    border: 1px solid white;\\r\\n    flex: 1 1 auto;\\r\\n    flex-direction: column;\\r\\n    display: flex;\\r\\n    justify-content: space-around;\\r\\n    align-items: center;\\r\\n}\\r\\n.PCBar {\\r\\n    border: 1px solid white;\\r\\n    flex: 1 1 auto;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-around;\\r\\n    align-items: center;\\r\\n}\\r\\n.NPC {\\r\\n    border: 1px solid white;\\r\\n    width: 125px;\\r\\n    height: 125px;\\r\\n}\\r\\n.PC {\\r\\n    border: 1px solid white;\\r\\n    width: 125px;\\r\\n    height: 125px;\\r\\n}\\r\\n.ability {\\r\\n    border: 1px solid white;\\r\\n    /* flex: 1 1 auto; */\\r\\n    height: 3dvw;\\r\\n    width: 3dvw;\\r\\n}\\r\\n.abilityListContainer {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n    justify-content: center;\\r\\n}\\r\\n.slideLeft,\\r\\n.slideRight {\\r\\n    border: 1px solid white;\\r\\n    flex: .025 1 auto;\\r\\n}\\r\\n.botBar {\\r\\n    display: flex;\\r\\n    justify-content: space-evenly;\\r\\n}\\r\\n.utilDivision {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n.endTurnButton {\\r\\n    border: 1px solid white;\\r\\n    flex: .09 1 auto;\\r\\n    text-align: center;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n.topBar {\\r\\n    display: flex;\\r\\n    justify-content: space-betweens;\\r\\n}\\r\\n.topBar div {\\r\\n    flex: 1 1 auto;\\r\\n}\\r\\n.PCBarRow1, \\r\\n.PCBarRow2, \\r\\n.PCBarRow3,\\r\\n.NPCBarRow1,\\r\\n.NPCBarRow2,\\r\\n.NPCBarRow3\\r\\n {\\r\\n    align-items: center;\\r\\n    justify-content: space-around;\\r\\n    display: flex;\\r\\n    width: 100%;\\r\\n    flex: 1 1 auto;\\r\\n    border: 1px solid white;\\r\\n}\\r\\n.divider {\\r\\n    padding: 15px;\\r\\n}\\r\\n.chatDivision {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n.moveRowButtons {\\r\\n    border: 1px solid white;\\r\\n    flex: .09 1 auto;\\r\\n    text-align: center;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n.moveRowButtons div{\\r\\n    border: 1px solid white;\\r\\n    flex: 1 1 auto;\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n.utilDivisionTabs {\\r\\n    display: flex;\\r\\n    justify-content: space-around;\\r\\n}\\r\\n.utilDivisionTabs * {\\r\\n    flex: 1 1 auto;\\r\\n    border: 2px solid white;\\r\\n}\\r\\n.utilDivisionDisplay {\\r\\n    height: 100%;\\r\\n    padding: 10px 0px;\\r\\n}\\r\\n.inventoryContainer {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n.inventoryContainer div { \\r\\n    border: 1px solid white;\\r\\n    flex: 0 1 auto;\\r\\n    height: 2.7dvw;\\r\\n    width: 2.7dvw;\\r\\n}\\r\\ndiv.tooltip {\\r\\n    flex-direction: column;\\r\\n    background-color: black;\\r\\n    width: 20dvw;\\r\\n    height: max-content;\\r\\n    padding: 10px;\\r\\n    border: 1px solid white;\\r\\n    position: relative;\\r\\n    right: 20dvw;\\r\\n    bottom: fit-content;\\r\\n    display: flex;\\r\\n}\\r\\ndiv.tooltipContent {\\r\\n    width: auto;\\r\\n    height: auto;\\r\\n    border: none;\\r\\n    color: white;\\r\\n    text-align: center;\\r\\n    z-index: 1;\\r\\n}\\r\\n.equipmentItem {\\r\\n    border: 1px solid white;\\r\\n    flex: 0 1 auto;\\r\\n    height: 2.7dvw;\\r\\n    width: 2.7dvw;\\r\\n    margin: 4px;\\r\\n}\\r\\n.equipmentItem.mainHand {\\r\\n    margin-left: 0px;\\r\\n}\\r\\n.equipmentItem.offHand {\\r\\n    margin-right: 0px;\\r\\n}\\r\\n.inventoryItem {\\r\\n    margin: 2px;\\r\\n}\\r\\n.equipmentContainer {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n.equipDisplay {\\r\\n    padding: 10px;\\r\\n    display: flex;\\r\\n}\\r\\n/* .equipLeft,\\r\\n.equipRight {\\r\\n    margin: 10px;\\r\\n} */\\r\\n.equipCenter {\\r\\n    flex: auto;\\r\\n}\\r\\n.weaponsDisplay {\\r\\n    /* Need to fix this, need mainHand and offHand to line up with bottom armors consistently as the screen changes */\\r\\n    margin-top: 1.35dvh;\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n}\\r\\n.statsDisplay {\\r\\n    display: flex;\\r\\n    justify-content: space-around;\\r\\n    font-size: .8dvw;\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/index.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n/*\r\n  MIT License http://www.opensource.org/licenses/mit-license.php\r\n  Author Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function (cssWithMappingToString) {\r\n  var list = [];\r\n\r\n  // return the list of modules as css string\r\n  list.toString = function toString() {\r\n    return this.map(function (item) {\r\n      var content = \"\";\r\n      var needLayer = typeof item[5] !== \"undefined\";\r\n      if (item[4]) {\r\n        content += \"@supports (\".concat(item[4], \") {\");\r\n      }\r\n      if (item[2]) {\r\n        content += \"@media \".concat(item[2], \" {\");\r\n      }\r\n      if (needLayer) {\r\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\r\n      }\r\n      content += cssWithMappingToString(item);\r\n      if (needLayer) {\r\n        content += \"}\";\r\n      }\r\n      if (item[2]) {\r\n        content += \"}\";\r\n      }\r\n      if (item[4]) {\r\n        content += \"}\";\r\n      }\r\n      return content;\r\n    }).join(\"\");\r\n  };\r\n\r\n  // import a list of modules into the list\r\n  list.i = function i(modules, media, dedupe, supports, layer) {\r\n    if (typeof modules === \"string\") {\r\n      modules = [[null, modules, undefined]];\r\n    }\r\n    var alreadyImportedModules = {};\r\n    if (dedupe) {\r\n      for (var k = 0; k < this.length; k++) {\r\n        var id = this[k][0];\r\n        if (id != null) {\r\n          alreadyImportedModules[id] = true;\r\n        }\r\n      }\r\n    }\r\n    for (var _k = 0; _k < modules.length; _k++) {\r\n      var item = [].concat(modules[_k]);\r\n      if (dedupe && alreadyImportedModules[item[0]]) {\r\n        continue;\r\n      }\r\n      if (typeof layer !== \"undefined\") {\r\n        if (typeof item[5] === \"undefined\") {\r\n          item[5] = layer;\r\n        } else {\r\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\r\n          item[5] = layer;\r\n        }\r\n      }\r\n      if (media) {\r\n        if (!item[2]) {\r\n          item[2] = media;\r\n        } else {\r\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\r\n          item[2] = media;\r\n        }\r\n      }\r\n      if (supports) {\r\n        if (!item[4]) {\r\n          item[4] = \"\".concat(supports);\r\n        } else {\r\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\r\n          item[4] = supports;\r\n        }\r\n      }\r\n      list.push(item);\r\n    }\r\n  };\r\n  return list;\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKlxyXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxyXG4qL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XHJcbiAgdmFyIGxpc3QgPSBbXTtcclxuXHJcbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XHJcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcclxuICAgICAgaWYgKGl0ZW1bNF0pIHtcclxuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW1bMl0pIHtcclxuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcclxuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XHJcbiAgICAgIH1cclxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xyXG4gICAgICBpZiAobmVlZExheWVyKSB7XHJcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaXRlbVsyXSkge1xyXG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGl0ZW1bNF0pIHtcclxuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfSkuam9pbihcIlwiKTtcclxuICB9O1xyXG5cclxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxyXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XHJcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XHJcbiAgICB9XHJcbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xyXG4gICAgaWYgKGRlZHVwZSkge1xyXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xyXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcclxuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xyXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XHJcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtZWRpYSkge1xyXG4gICAgICAgIGlmICghaXRlbVsyXSkge1xyXG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcclxuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHN1cHBvcnRzKSB7XHJcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XHJcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xyXG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XHJcbiAgICB9XHJcbiAgfTtcclxuICByZXR1cm4gbGlzdDtcclxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nmodule.exports = function (item) {\r\n  var content = item[1];\r\n  var cssMapping = item[3];\r\n  if (!cssMapping) {\r\n    return content;\r\n  }\r\n  if (typeof btoa === \"function\") {\r\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\r\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\r\n    var sourceMapping = \"/*# \".concat(data, \" */\");\r\n    return [content].concat([sourceMapping]).join(\"\\n\");\r\n  }\r\n  return [content].join(\"\\n\");\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcz9hZjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xyXG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcclxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XHJcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XHJcbiAgICByZXR1cm4gY29udGVudDtcclxuICB9XHJcbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcclxuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcclxuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xyXG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xyXG4gIH1cclxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XHJcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/sourceMaps.js\n");

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * @license\r\n * Lodash <https://lodash.com/>\r\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n;(function() {\r\n\r\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\r\n  var undefined;\r\n\r\n  /** Used as the semantic version number. */\r\n  var VERSION = '4.17.21';\r\n\r\n  /** Used as the size to enable large array optimizations. */\r\n  var LARGE_ARRAY_SIZE = 200;\r\n\r\n  /** Error message constants. */\r\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\r\n      FUNC_ERROR_TEXT = 'Expected a function',\r\n      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';\r\n\r\n  /** Used to stand-in for `undefined` hash values. */\r\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n  /** Used as the maximum memoize cache size. */\r\n  var MAX_MEMOIZE_SIZE = 500;\r\n\r\n  /** Used as the internal argument placeholder. */\r\n  var PLACEHOLDER = '__lodash_placeholder__';\r\n\r\n  /** Used to compose bitmasks for cloning. */\r\n  var CLONE_DEEP_FLAG = 1,\r\n      CLONE_FLAT_FLAG = 2,\r\n      CLONE_SYMBOLS_FLAG = 4;\r\n\r\n  /** Used to compose bitmasks for value comparisons. */\r\n  var COMPARE_PARTIAL_FLAG = 1,\r\n      COMPARE_UNORDERED_FLAG = 2;\r\n\r\n  /** Used to compose bitmasks for function metadata. */\r\n  var WRAP_BIND_FLAG = 1,\r\n      WRAP_BIND_KEY_FLAG = 2,\r\n      WRAP_CURRY_BOUND_FLAG = 4,\r\n      WRAP_CURRY_FLAG = 8,\r\n      WRAP_CURRY_RIGHT_FLAG = 16,\r\n      WRAP_PARTIAL_FLAG = 32,\r\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\r\n      WRAP_ARY_FLAG = 128,\r\n      WRAP_REARG_FLAG = 256,\r\n      WRAP_FLIP_FLAG = 512;\r\n\r\n  /** Used as default options for `_.truncate`. */\r\n  var DEFAULT_TRUNC_LENGTH = 30,\r\n      DEFAULT_TRUNC_OMISSION = '...';\r\n\r\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\r\n  var HOT_COUNT = 800,\r\n      HOT_SPAN = 16;\r\n\r\n  /** Used to indicate the type of lazy iteratees. */\r\n  var LAZY_FILTER_FLAG = 1,\r\n      LAZY_MAP_FLAG = 2,\r\n      LAZY_WHILE_FLAG = 3;\r\n\r\n  /** Used as references for various `Number` constants. */\r\n  var INFINITY = 1 / 0,\r\n      MAX_SAFE_INTEGER = 9007199254740991,\r\n      MAX_INTEGER = 1.7976931348623157e+308,\r\n      NAN = 0 / 0;\r\n\r\n  /** Used as references for the maximum length and index of an array. */\r\n  var MAX_ARRAY_LENGTH = 4294967295,\r\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\r\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\r\n\r\n  /** Used to associate wrap methods with their bit flags. */\r\n  var wrapFlags = [\r\n    ['ary', WRAP_ARY_FLAG],\r\n    ['bind', WRAP_BIND_FLAG],\r\n    ['bindKey', WRAP_BIND_KEY_FLAG],\r\n    ['curry', WRAP_CURRY_FLAG],\r\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\r\n    ['flip', WRAP_FLIP_FLAG],\r\n    ['partial', WRAP_PARTIAL_FLAG],\r\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\r\n    ['rearg', WRAP_REARG_FLAG]\r\n  ];\r\n\r\n  /** `Object#toString` result references. */\r\n  var argsTag = '[object Arguments]',\r\n      arrayTag = '[object Array]',\r\n      asyncTag = '[object AsyncFunction]',\r\n      boolTag = '[object Boolean]',\r\n      dateTag = '[object Date]',\r\n      domExcTag = '[object DOMException]',\r\n      errorTag = '[object Error]',\r\n      funcTag = '[object Function]',\r\n      genTag = '[object GeneratorFunction]',\r\n      mapTag = '[object Map]',\r\n      numberTag = '[object Number]',\r\n      nullTag = '[object Null]',\r\n      objectTag = '[object Object]',\r\n      promiseTag = '[object Promise]',\r\n      proxyTag = '[object Proxy]',\r\n      regexpTag = '[object RegExp]',\r\n      setTag = '[object Set]',\r\n      stringTag = '[object String]',\r\n      symbolTag = '[object Symbol]',\r\n      undefinedTag = '[object Undefined]',\r\n      weakMapTag = '[object WeakMap]',\r\n      weakSetTag = '[object WeakSet]';\r\n\r\n  var arrayBufferTag = '[object ArrayBuffer]',\r\n      dataViewTag = '[object DataView]',\r\n      float32Tag = '[object Float32Array]',\r\n      float64Tag = '[object Float64Array]',\r\n      int8Tag = '[object Int8Array]',\r\n      int16Tag = '[object Int16Array]',\r\n      int32Tag = '[object Int32Array]',\r\n      uint8Tag = '[object Uint8Array]',\r\n      uint8ClampedTag = '[object Uint8ClampedArray]',\r\n      uint16Tag = '[object Uint16Array]',\r\n      uint32Tag = '[object Uint32Array]';\r\n\r\n  /** Used to match empty string literals in compiled template source. */\r\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\r\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\r\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\r\n\r\n  /** Used to match HTML entities and HTML characters. */\r\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\r\n      reUnescapedHtml = /[&<>\"']/g,\r\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\r\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\r\n\r\n  /** Used to match template delimiters. */\r\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\r\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\r\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\r\n\r\n  /** Used to match property names within property paths. */\r\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\r\n      reIsPlainProp = /^\\w*$/,\r\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\n\r\n  /**\r\n   * Used to match `RegExp`\r\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n   */\r\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\r\n      reHasRegExpChar = RegExp(reRegExpChar.source);\r\n\r\n  /** Used to match leading whitespace. */\r\n  var reTrimStart = /^\\s+/;\r\n\r\n  /** Used to match a single whitespace character. */\r\n  var reWhitespace = /\\s/;\r\n\r\n  /** Used to match wrap detail comments. */\r\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\r\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\r\n      reSplitDetails = /,? & /;\r\n\r\n  /** Used to match words composed of alphanumeric characters. */\r\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\r\n\r\n  /**\r\n   * Used to validate the `validate` option in `_.template` variable.\r\n   *\r\n   * Forbids characters which could potentially change the meaning of the function argument definition:\r\n   * - \"(),\" (modification of function parameters)\r\n   * - \"=\" (default value)\r\n   * - \"[]{}\" (destructuring of function parameters)\r\n   * - \"/\" (beginning of a comment)\r\n   * - whitespace\r\n   */\r\n  var reForbiddenIdentifierChars = /[()=,{}\\[\\]\\/\\s]/;\r\n\r\n  /** Used to match backslashes in property paths. */\r\n  var reEscapeChar = /\\\\(\\\\)?/g;\r\n\r\n  /**\r\n   * Used to match\r\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\r\n   */\r\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\r\n\r\n  /** Used to match `RegExp` flags from their coerced string values. */\r\n  var reFlags = /\\w*$/;\r\n\r\n  /** Used to detect bad signed hexadecimal string values. */\r\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n  /** Used to detect binary string values. */\r\n  var reIsBinary = /^0b[01]+$/i;\r\n\r\n  /** Used to detect host constructors (Safari). */\r\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n  /** Used to detect octal string values. */\r\n  var reIsOctal = /^0o[0-7]+$/i;\r\n\r\n  /** Used to detect unsigned integer values. */\r\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\r\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\r\n\r\n  /** Used to ensure capturing order of template delimiters. */\r\n  var reNoMatch = /($^)/;\r\n\r\n  /** Used to match unescaped characters in compiled string literals. */\r\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\r\n\r\n  /** Used to compose unicode character classes. */\r\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\r\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\r\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\r\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\r\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\r\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\r\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\r\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\r\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\r\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\r\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\r\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\r\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\r\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\r\n\r\n  /** Used to compose unicode capture groups. */\r\n  var rsApos = \"['\\u2019]\",\r\n      rsAstral = '[' + rsAstralRange + ']',\r\n      rsBreak = '[' + rsBreakRange + ']',\r\n      rsCombo = '[' + rsComboRange + ']',\r\n      rsDigits = '\\\\d+',\r\n      rsDingbat = '[' + rsDingbatRange + ']',\r\n      rsLower = '[' + rsLowerRange + ']',\r\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\r\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\r\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\r\n      rsNonAstral = '[^' + rsAstralRange + ']',\r\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\r\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\r\n      rsUpper = '[' + rsUpperRange + ']',\r\n      rsZWJ = '\\\\u200d';\r\n\r\n  /** Used to compose unicode regexes. */\r\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\r\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\r\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\r\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\r\n      reOptMod = rsModifier + '?',\r\n      rsOptVar = '[' + rsVarRange + ']?',\r\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\r\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\r\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\r\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\r\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\r\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n\r\n  /** Used to match apostrophes. */\r\n  var reApos = RegExp(rsApos, 'g');\r\n\r\n  /**\r\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\r\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\r\n   */\r\n  var reComboMark = RegExp(rsCombo, 'g');\r\n\r\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n  /** Used to match complex or compound words. */\r\n  var reUnicodeWord = RegExp([\r\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\r\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\r\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\r\n    rsUpper + '+' + rsOptContrUpper,\r\n    rsOrdUpper,\r\n    rsOrdLower,\r\n    rsDigits,\r\n    rsEmoji\r\n  ].join('|'), 'g');\r\n\r\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\r\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\r\n\r\n  /** Used to detect strings that need a more robust regexp to match words. */\r\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\r\n\r\n  /** Used to assign default `context` object properties. */\r\n  var contextProps = [\r\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\r\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\r\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\r\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\r\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\r\n  ];\r\n\r\n  /** Used to make template sourceURLs easier to identify. */\r\n  var templateCounter = -1;\r\n\r\n  /** Used to identify `toStringTag` values of typed arrays. */\r\n  var typedArrayTags = {};\r\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\n  typedArrayTags[uint32Tag] = true;\r\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\r\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\r\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\r\n  typedArrayTags[weakMapTag] = false;\r\n\r\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\r\n  var cloneableTags = {};\r\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\r\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\r\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\r\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\r\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\r\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\r\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\r\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\r\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\r\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\r\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\r\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\r\n  cloneableTags[weakMapTag] = false;\r\n\r\n  /** Used to map Latin Unicode letters to basic Latin letters. */\r\n  var deburredLetters = {\r\n    // Latin-1 Supplement block.\r\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\r\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\r\n    '\\xc7': 'C',  '\\xe7': 'c',\r\n    '\\xd0': 'D',  '\\xf0': 'd',\r\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\r\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\r\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\r\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\r\n    '\\xd1': 'N',  '\\xf1': 'n',\r\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\r\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\r\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\r\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\r\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\r\n    '\\xc6': 'Ae', '\\xe6': 'ae',\r\n    '\\xde': 'Th', '\\xfe': 'th',\r\n    '\\xdf': 'ss',\r\n    // Latin Extended-A block.\r\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\r\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\r\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\r\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\r\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\r\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\r\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\r\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\r\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\r\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\r\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\r\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\r\n    '\\u0134': 'J',  '\\u0135': 'j',\r\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\r\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\r\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\r\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\r\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\r\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\r\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\r\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\r\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\r\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\r\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\r\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\r\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\r\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\r\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\r\n    '\\u0174': 'W',  '\\u0175': 'w',\r\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\r\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\r\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\r\n    '\\u0132': 'IJ', '\\u0133': 'ij',\r\n    '\\u0152': 'Oe', '\\u0153': 'oe',\r\n    '\\u0149': \"'n\", '\\u017f': 's'\r\n  };\r\n\r\n  /** Used to map characters to HTML entities. */\r\n  var htmlEscapes = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#39;'\r\n  };\r\n\r\n  /** Used to map HTML entities to characters. */\r\n  var htmlUnescapes = {\r\n    '&amp;': '&',\r\n    '&lt;': '<',\r\n    '&gt;': '>',\r\n    '&quot;': '\"',\r\n    '&#39;': \"'\"\r\n  };\r\n\r\n  /** Used to escape characters for inclusion in compiled string literals. */\r\n  var stringEscapes = {\r\n    '\\\\': '\\\\',\r\n    \"'\": \"'\",\r\n    '\\n': 'n',\r\n    '\\r': 'r',\r\n    '\\u2028': 'u2028',\r\n    '\\u2029': 'u2029'\r\n  };\r\n\r\n  /** Built-in method references without a dependency on `root`. */\r\n  var freeParseFloat = parseFloat,\r\n      freeParseInt = parseInt;\r\n\r\n  /** Detect free variable `global` from Node.js. */\r\n  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\r\n\r\n  /** Detect free variable `self`. */\r\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n  /** Used as a reference to the global object. */\r\n  var root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n  /** Detect free variable `exports`. */\r\n  var freeExports =  true && exports && !exports.nodeType && exports;\r\n\r\n  /** Detect free variable `module`. */\r\n  var freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\r\n\r\n  /** Detect the popular CommonJS extension `module.exports`. */\r\n  var moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n  /** Detect free variable `process` from Node.js. */\r\n  var freeProcess = moduleExports && freeGlobal.process;\r\n\r\n  /** Used to access faster Node.js helpers. */\r\n  var nodeUtil = (function() {\r\n    try {\r\n      // Use `util.types` for Node.js 10+.\r\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\r\n\r\n      if (types) {\r\n        return types;\r\n      }\r\n\r\n      // Legacy `process.binding('util')` for Node.js < 10.\r\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n    } catch (e) {}\r\n  }());\r\n\r\n  /* Node.js helper references. */\r\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\r\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\r\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\r\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\r\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\r\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * A faster alternative to `Function#apply`, this function invokes `func`\r\n   * with the `this` binding of `thisArg` and the arguments of `args`.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to invoke.\r\n   * @param {*} thisArg The `this` binding of `func`.\r\n   * @param {Array} args The arguments to invoke `func` with.\r\n   * @returns {*} Returns the result of `func`.\r\n   */\r\n  function apply(func, thisArg, args) {\r\n    switch (args.length) {\r\n      case 0: return func.call(thisArg);\r\n      case 1: return func.call(thisArg, args[0]);\r\n      case 2: return func.call(thisArg, args[0], args[1]);\r\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\r\n    }\r\n    return func.apply(thisArg, args);\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `baseAggregator` for arrays.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} setter The function to set `accumulator` values.\r\n   * @param {Function} iteratee The iteratee to transform keys.\r\n   * @param {Object} accumulator The initial aggregated object.\r\n   * @returns {Function} Returns `accumulator`.\r\n   */\r\n  function arrayAggregator(array, setter, iteratee, accumulator) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    while (++index < length) {\r\n      var value = array[index];\r\n      setter(accumulator, value, iteratee(value), array);\r\n    }\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.forEach` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function arrayEach(array, iteratee) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    while (++index < length) {\r\n      if (iteratee(array[index], index, array) === false) {\r\n        break;\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.forEachRight` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function arrayEachRight(array, iteratee) {\r\n    var length = array == null ? 0 : array.length;\r\n\r\n    while (length--) {\r\n      if (iteratee(array[length], length, array) === false) {\r\n        break;\r\n      }\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.every` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n   *  else `false`.\r\n   */\r\n  function arrayEvery(array, predicate) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    while (++index < length) {\r\n      if (!predicate(array[index], index, array)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.filter` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @returns {Array} Returns the new filtered array.\r\n   */\r\n  function arrayFilter(array, predicate) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length,\r\n        resIndex = 0,\r\n        result = [];\r\n\r\n    while (++index < length) {\r\n      var value = array[index];\r\n      if (predicate(value, index, array)) {\r\n        result[resIndex++] = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.includes` for arrays without support for\r\n   * specifying an index to search from.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to inspect.\r\n   * @param {*} target The value to search for.\r\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\r\n   */\r\n  function arrayIncludes(array, value) {\r\n    var length = array == null ? 0 : array.length;\r\n    return !!length && baseIndexOf(array, value, 0) > -1;\r\n  }\r\n\r\n  /**\r\n   * This function is like `arrayIncludes` except that it accepts a comparator.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to inspect.\r\n   * @param {*} target The value to search for.\r\n   * @param {Function} comparator The comparator invoked per element.\r\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\r\n   */\r\n  function arrayIncludesWith(array, value, comparator) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    while (++index < length) {\r\n      if (comparator(value, array[index])) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.map` for arrays without support for iteratee\r\n   * shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the new mapped array.\r\n   */\r\n  function arrayMap(array, iteratee) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length,\r\n        result = Array(length);\r\n\r\n    while (++index < length) {\r\n      result[index] = iteratee(array[index], index, array);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Appends the elements of `values` to `array`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to modify.\r\n   * @param {Array} values The values to append.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function arrayPush(array, values) {\r\n    var index = -1,\r\n        length = values.length,\r\n        offset = array.length;\r\n\r\n    while (++index < length) {\r\n      array[offset + index] = values[index];\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.reduce` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {*} [accumulator] The initial value.\r\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n   *  the initial value.\r\n   * @returns {*} Returns the accumulated value.\r\n   */\r\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    if (initAccum && length) {\r\n      accumulator = array[++index];\r\n    }\r\n    while (++index < length) {\r\n      accumulator = iteratee(accumulator, array[index], index, array);\r\n    }\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.reduceRight` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {*} [accumulator] The initial value.\r\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\r\n   *  the initial value.\r\n   * @returns {*} Returns the accumulated value.\r\n   */\r\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\r\n    var length = array == null ? 0 : array.length;\r\n    if (initAccum && length) {\r\n      accumulator = array[--length];\r\n    }\r\n    while (length--) {\r\n      accumulator = iteratee(accumulator, array[length], length, array);\r\n    }\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.some` for arrays without support for iteratee\r\n   * shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n   *  else `false`.\r\n   */\r\n  function arraySome(array, predicate) {\r\n    var index = -1,\r\n        length = array == null ? 0 : array.length;\r\n\r\n    while (++index < length) {\r\n      if (predicate(array[index], index, array)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets the size of an ASCII `string`.\r\n   *\r\n   * @private\r\n   * @param {string} string The string inspect.\r\n   * @returns {number} Returns the string size.\r\n   */\r\n  var asciiSize = baseProperty('length');\r\n\r\n  /**\r\n   * Converts an ASCII `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\r\n  function asciiToArray(string) {\r\n    return string.split('');\r\n  }\r\n\r\n  /**\r\n   * Splits an ASCII `string` into an array of its words.\r\n   *\r\n   * @private\r\n   * @param {string} The string to inspect.\r\n   * @returns {Array} Returns the words of `string`.\r\n   */\r\n  function asciiWords(string) {\r\n    return string.match(reAsciiWord) || [];\r\n  }\r\n\r\n  /**\r\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\r\n   * without support for iteratee shorthands, which iterates over `collection`\r\n   * using `eachFunc`.\r\n   *\r\n   * @private\r\n   * @param {Array|Object} collection The collection to inspect.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @param {Function} eachFunc The function to iterate over `collection`.\r\n   * @returns {*} Returns the found element or its key, else `undefined`.\r\n   */\r\n  function baseFindKey(collection, predicate, eachFunc) {\r\n    var result;\r\n    eachFunc(collection, function(value, key, collection) {\r\n      if (predicate(value, key, collection)) {\r\n        result = key;\r\n        return false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n   * support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n    var length = array.length,\r\n        index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n    while ((fromRight ? index-- : ++index < length)) {\r\n      if (predicate(array[index], index, array)) {\r\n        return index;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function baseIndexOf(array, value, fromIndex) {\r\n    return value === value\r\n      ? strictIndexOf(array, value, fromIndex)\r\n      : baseFindIndex(array, baseIsNaN, fromIndex);\r\n  }\r\n\r\n  /**\r\n   * This function is like `baseIndexOf` except that it accepts a comparator.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @param {Function} comparator The comparator invoked per element.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\r\n    var index = fromIndex - 1,\r\n        length = array.length;\r\n\r\n    while (++index < length) {\r\n      if (comparator(array[index], value)) {\r\n        return index;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.isNaN` without support for number objects.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n   */\r\n  function baseIsNaN(value) {\r\n    return value !== value;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.mean` and `_.meanBy` without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {number} Returns the mean.\r\n   */\r\n  function baseMean(array, iteratee) {\r\n    var length = array == null ? 0 : array.length;\r\n    return length ? (baseSum(array, iteratee) / length) : NAN;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.property` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {string} key The key of the property to get.\r\n   * @returns {Function} Returns the new accessor function.\r\n   */\r\n  function baseProperty(key) {\r\n    return function(object) {\r\n      return object == null ? undefined : object[key];\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.propertyOf` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {Function} Returns the new accessor function.\r\n   */\r\n  function basePropertyOf(object) {\r\n    return function(key) {\r\n      return object == null ? undefined : object[key];\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\r\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\r\n   *\r\n   * @private\r\n   * @param {Array|Object} collection The collection to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {*} accumulator The initial value.\r\n   * @param {boolean} initAccum Specify using the first or last element of\r\n   *  `collection` as the initial value.\r\n   * @param {Function} eachFunc The function to iterate over `collection`.\r\n   * @returns {*} Returns the accumulated value.\r\n   */\r\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\r\n    eachFunc(collection, function(value, index, collection) {\r\n      accumulator = initAccum\r\n        ? (initAccum = false, value)\r\n        : iteratee(accumulator, value, index, collection);\r\n    });\r\n    return accumulator;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\r\n   * sort order of `array` and replaces criteria objects with their corresponding\r\n   * values.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to sort.\r\n   * @param {Function} comparer The function to define sort order.\r\n   * @returns {Array} Returns `array`.\r\n   */\r\n  function baseSortBy(array, comparer) {\r\n    var length = array.length;\r\n\r\n    array.sort(comparer);\r\n    while (length--) {\r\n      array[length] = array[length].value;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.sum` and `_.sumBy` without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {number} Returns the sum.\r\n   */\r\n  function baseSum(array, iteratee) {\r\n    var result,\r\n        index = -1,\r\n        length = array.length;\r\n\r\n    while (++index < length) {\r\n      var current = iteratee(array[index]);\r\n      if (current !== undefined) {\r\n        result = result === undefined ? current : (result + current);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.times` without support for iteratee shorthands\r\n   * or max array length checks.\r\n   *\r\n   * @private\r\n   * @param {number} n The number of times to invoke `iteratee`.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the array of results.\r\n   */\r\n  function baseTimes(n, iteratee) {\r\n    var index = -1,\r\n        result = Array(n);\r\n\r\n    while (++index < n) {\r\n      result[index] = iteratee(index);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\r\n   * of key-value pairs for `object` corresponding to the property names of `props`.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @param {Array} props The property names to get values for.\r\n   * @returns {Object} Returns the key-value pairs.\r\n   */\r\n  function baseToPairs(object, props) {\r\n    return arrayMap(props, function(key) {\r\n      return [key, object[key]];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.trim`.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to trim.\r\n   * @returns {string} Returns the trimmed string.\r\n   */\r\n  function baseTrim(string) {\r\n    return string\r\n      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\r\n      : string;\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.unary` without support for storing metadata.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to cap arguments for.\r\n   * @returns {Function} Returns the new capped function.\r\n   */\r\n  function baseUnary(func) {\r\n    return function(value) {\r\n      return func(value);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\r\n   * array of `object` property values corresponding to the property names\r\n   * of `props`.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @param {Array} props The property names to get values for.\r\n   * @returns {Object} Returns the array of property values.\r\n   */\r\n  function baseValues(object, props) {\r\n    return arrayMap(props, function(key) {\r\n      return object[key];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks if a `cache` value for `key` exists.\r\n   *\r\n   * @private\r\n   * @param {Object} cache The cache to query.\r\n   * @param {string} key The key of the entry to check.\r\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n   */\r\n  function cacheHas(cache, key) {\r\n    return cache.has(key);\r\n  }\r\n\r\n  /**\r\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the first unmatched string symbol.\r\n   */\r\n  function charsStartIndex(strSymbols, chrSymbols) {\r\n    var index = -1,\r\n        length = strSymbols.length;\r\n\r\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the last unmatched string symbol.\r\n   */\r\n  function charsEndIndex(strSymbols, chrSymbols) {\r\n    var index = strSymbols.length;\r\n\r\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of `placeholder` occurrences in `array`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} placeholder The placeholder to search for.\r\n   * @returns {number} Returns the placeholder count.\r\n   */\r\n  function countHolders(array, placeholder) {\r\n    var length = array.length,\r\n        result = 0;\r\n\r\n    while (length--) {\r\n      if (array[length] === placeholder) {\r\n        ++result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\r\n   * letters to basic Latin letters.\r\n   *\r\n   * @private\r\n   * @param {string} letter The matched letter to deburr.\r\n   * @returns {string} Returns the deburred letter.\r\n   */\r\n  var deburrLetter = basePropertyOf(deburredLetters);\r\n\r\n  /**\r\n   * Used by `_.escape` to convert characters to HTML entities.\r\n   *\r\n   * @private\r\n   * @param {string} chr The matched character to escape.\r\n   * @returns {string} Returns the escaped character.\r\n   */\r\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\r\n\r\n  /**\r\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\r\n   *\r\n   * @private\r\n   * @param {string} chr The matched character to escape.\r\n   * @returns {string} Returns the escaped character.\r\n   */\r\n  function escapeStringChar(chr) {\r\n    return '\\\\' + stringEscapes[chr];\r\n  }\r\n\r\n  /**\r\n   * Gets the value at `key` of `object`.\r\n   *\r\n   * @private\r\n   * @param {Object} [object] The object to query.\r\n   * @param {string} key The key of the property to get.\r\n   * @returns {*} Returns the property value.\r\n   */\r\n  function getValue(object, key) {\r\n    return object == null ? undefined : object[key];\r\n  }\r\n\r\n  /**\r\n   * Checks if `string` contains Unicode symbols.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n   */\r\n  function hasUnicode(string) {\r\n    return reHasUnicode.test(string);\r\n  }\r\n\r\n  /**\r\n   * Checks if `string` contains a word composed of Unicode symbols.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\r\n   */\r\n  function hasUnicodeWord(string) {\r\n    return reHasUnicodeWord.test(string);\r\n  }\r\n\r\n  /**\r\n   * Converts `iterator` to an array.\r\n   *\r\n   * @private\r\n   * @param {Object} iterator The iterator to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\r\n  function iteratorToArray(iterator) {\r\n    var data,\r\n        result = [];\r\n\r\n    while (!(data = iterator.next()).done) {\r\n      result.push(data.value);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts `map` to its key-value pairs.\r\n   *\r\n   * @private\r\n   * @param {Object} map The map to convert.\r\n   * @returns {Array} Returns the key-value pairs.\r\n   */\r\n  function mapToArray(map) {\r\n    var index = -1,\r\n        result = Array(map.size);\r\n\r\n    map.forEach(function(value, key) {\r\n      result[++index] = [key, value];\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a unary function that invokes `func` with its argument transformed.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to wrap.\r\n   * @param {Function} transform The argument transform.\r\n   * @returns {Function} Returns the new function.\r\n   */\r\n  function overArg(func, transform) {\r\n    return function(arg) {\r\n      return func(transform(arg));\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\r\n   * and returns an array of their indexes.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to modify.\r\n   * @param {*} placeholder The placeholder to replace.\r\n   * @returns {Array} Returns the new array of placeholder indexes.\r\n   */\r\n  function replaceHolders(array, placeholder) {\r\n    var index = -1,\r\n        length = array.length,\r\n        resIndex = 0,\r\n        result = [];\r\n\r\n    while (++index < length) {\r\n      var value = array[index];\r\n      if (value === placeholder || value === PLACEHOLDER) {\r\n        array[index] = PLACEHOLDER;\r\n        result[resIndex++] = index;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts `set` to an array of its values.\r\n   *\r\n   * @private\r\n   * @param {Object} set The set to convert.\r\n   * @returns {Array} Returns the values.\r\n   */\r\n  function setToArray(set) {\r\n    var index = -1,\r\n        result = Array(set.size);\r\n\r\n    set.forEach(function(value) {\r\n      result[++index] = value;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts `set` to its value-value pairs.\r\n   *\r\n   * @private\r\n   * @param {Object} set The set to convert.\r\n   * @returns {Array} Returns the value-value pairs.\r\n   */\r\n  function setToPairs(set) {\r\n    var index = -1,\r\n        result = Array(set.size);\r\n\r\n    set.forEach(function(value) {\r\n      result[++index] = [value, value];\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.indexOf` which performs strict equality\r\n   * comparisons of values, i.e. `===`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function strictIndexOf(array, value, fromIndex) {\r\n    var index = fromIndex - 1,\r\n        length = array.length;\r\n\r\n    while (++index < length) {\r\n      if (array[index] === value) {\r\n        return index;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * A specialized version of `_.lastIndexOf` which performs strict equality\r\n   * comparisons of values, i.e. `===`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\r\n  function strictLastIndexOf(array, value, fromIndex) {\r\n    var index = fromIndex + 1;\r\n    while (index--) {\r\n      if (array[index] === value) {\r\n        return index;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Gets the number of symbols in `string`.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {number} Returns the string size.\r\n   */\r\n  function stringSize(string) {\r\n    return hasUnicode(string)\r\n      ? unicodeSize(string)\r\n      : asciiSize(string);\r\n  }\r\n\r\n  /**\r\n   * Converts `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\r\n  function stringToArray(string) {\r\n    return hasUnicode(string)\r\n      ? unicodeToArray(string)\r\n      : asciiToArray(string);\r\n  }\r\n\r\n  /**\r\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\r\n   * character of `string`.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {number} Returns the index of the last non-whitespace character.\r\n   */\r\n  function trimmedEndIndex(string) {\r\n    var index = string.length;\r\n\r\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Used by `_.unescape` to convert HTML entities to characters.\r\n   *\r\n   * @private\r\n   * @param {string} chr The matched character to unescape.\r\n   * @returns {string} Returns the unescaped character.\r\n   */\r\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\r\n\r\n  /**\r\n   * Gets the size of a Unicode `string`.\r\n   *\r\n   * @private\r\n   * @param {string} string The string inspect.\r\n   * @returns {number} Returns the string size.\r\n   */\r\n  function unicodeSize(string) {\r\n    var result = reUnicode.lastIndex = 0;\r\n    while (reUnicode.test(string)) {\r\n      ++result;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Converts a Unicode `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\r\n  function unicodeToArray(string) {\r\n    return string.match(reUnicode) || [];\r\n  }\r\n\r\n  /**\r\n   * Splits a Unicode `string` into an array of its words.\r\n   *\r\n   * @private\r\n   * @param {string} The string to inspect.\r\n   * @returns {Array} Returns the words of `string`.\r\n   */\r\n  function unicodeWords(string) {\r\n    return string.match(reUnicodeWord) || [];\r\n  }\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  /**\r\n   * Create a new pristine `lodash` function using the `context` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 1.1.0\r\n   * @category Util\r\n   * @param {Object} [context=root] The context object.\r\n   * @returns {Function} Returns a new `lodash` function.\r\n   * @example\r\n   *\r\n   * _.mixin({ 'foo': _.constant('foo') });\r\n   *\r\n   * var lodash = _.runInContext();\r\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\r\n   *\r\n   * _.isFunction(_.foo);\r\n   * // => true\r\n   * _.isFunction(_.bar);\r\n   * // => false\r\n   *\r\n   * lodash.isFunction(lodash.foo);\r\n   * // => false\r\n   * lodash.isFunction(lodash.bar);\r\n   * // => true\r\n   *\r\n   * // Create a suped-up `defer` in Node.js.\r\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\r\n   */\r\n  var runInContext = (function runInContext(context) {\r\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\r\n\r\n    /** Built-in constructor references. */\r\n    var Array = context.Array,\r\n        Date = context.Date,\r\n        Error = context.Error,\r\n        Function = context.Function,\r\n        Math = context.Math,\r\n        Object = context.Object,\r\n        RegExp = context.RegExp,\r\n        String = context.String,\r\n        TypeError = context.TypeError;\r\n\r\n    /** Used for built-in method references. */\r\n    var arrayProto = Array.prototype,\r\n        funcProto = Function.prototype,\r\n        objectProto = Object.prototype;\r\n\r\n    /** Used to detect overreaching core-js shims. */\r\n    var coreJsData = context['__core-js_shared__'];\r\n\r\n    /** Used to resolve the decompiled source of functions. */\r\n    var funcToString = funcProto.toString;\r\n\r\n    /** Used to check objects for own properties. */\r\n    var hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n    /** Used to generate unique IDs. */\r\n    var idCounter = 0;\r\n\r\n    /** Used to detect methods masquerading as native. */\r\n    var maskSrcKey = (function() {\r\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n      return uid ? ('Symbol(src)_1.' + uid) : '';\r\n    }());\r\n\r\n    /**\r\n     * Used to resolve the\r\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n     * of values.\r\n     */\r\n    var nativeObjectToString = objectProto.toString;\r\n\r\n    /** Used to infer the `Object` constructor. */\r\n    var objectCtorString = funcToString.call(Object);\r\n\r\n    /** Used to restore the original `_` reference in `_.noConflict`. */\r\n    var oldDash = root._;\r\n\r\n    /** Used to detect if a method is native. */\r\n    var reIsNative = RegExp('^' +\r\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n    );\r\n\r\n    /** Built-in value references. */\r\n    var Buffer = moduleExports ? context.Buffer : undefined,\r\n        Symbol = context.Symbol,\r\n        Uint8Array = context.Uint8Array,\r\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\r\n        getPrototype = overArg(Object.getPrototypeOf, Object),\r\n        objectCreate = Object.create,\r\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n        splice = arrayProto.splice,\r\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\r\n        symIterator = Symbol ? Symbol.iterator : undefined,\r\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n    var defineProperty = (function() {\r\n      try {\r\n        var func = getNative(Object, 'defineProperty');\r\n        func({}, '', {});\r\n        return func;\r\n      } catch (e) {}\r\n    }());\r\n\r\n    /** Mocked built-ins. */\r\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\r\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\r\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\r\n\r\n    /* Built-in method references for those with the same name as other `lodash` methods. */\r\n    var nativeCeil = Math.ceil,\r\n        nativeFloor = Math.floor,\r\n        nativeGetSymbols = Object.getOwnPropertySymbols,\r\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n        nativeIsFinite = context.isFinite,\r\n        nativeJoin = arrayProto.join,\r\n        nativeKeys = overArg(Object.keys, Object),\r\n        nativeMax = Math.max,\r\n        nativeMin = Math.min,\r\n        nativeNow = Date.now,\r\n        nativeParseInt = context.parseInt,\r\n        nativeRandom = Math.random,\r\n        nativeReverse = arrayProto.reverse;\r\n\r\n    /* Built-in method references that are verified to be native. */\r\n    var DataView = getNative(context, 'DataView'),\r\n        Map = getNative(context, 'Map'),\r\n        Promise = getNative(context, 'Promise'),\r\n        Set = getNative(context, 'Set'),\r\n        WeakMap = getNative(context, 'WeakMap'),\r\n        nativeCreate = getNative(Object, 'create');\r\n\r\n    /** Used to store function metadata. */\r\n    var metaMap = WeakMap && new WeakMap;\r\n\r\n    /** Used to lookup unminified function names. */\r\n    var realNames = {};\r\n\r\n    /** Used to detect maps, sets, and weakmaps. */\r\n    var dataViewCtorString = toSource(DataView),\r\n        mapCtorString = toSource(Map),\r\n        promiseCtorString = toSource(Promise),\r\n        setCtorString = toSource(Set),\r\n        weakMapCtorString = toSource(WeakMap);\r\n\r\n    /** Used to convert symbols to primitives and strings. */\r\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\r\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\r\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a `lodash` object which wraps `value` to enable implicit method\r\n     * chain sequences. Methods that operate on and return arrays, collections,\r\n     * and functions can be chained together. Methods that retrieve a single value\r\n     * or may return a primitive value will automatically end the chain sequence\r\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\r\n     * with `_#value`.\r\n     *\r\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\r\n     * enabled using `_.chain`.\r\n     *\r\n     * The execution of chained methods is lazy, that is, it's deferred until\r\n     * `_#value` is implicitly or explicitly called.\r\n     *\r\n     * Lazy evaluation allows several methods to support shortcut fusion.\r\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\r\n     * the creation of intermediate arrays and can greatly reduce the number of\r\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\r\n     * fusion if the section is applied to an array and iteratees accept only\r\n     * one argument. The heuristic for whether a section qualifies for shortcut\r\n     * fusion is subject to change.\r\n     *\r\n     * Chaining is supported in custom builds as long as the `_#value` method is\r\n     * directly or indirectly included in the build.\r\n     *\r\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\r\n     *\r\n     * The wrapper `Array` methods are:\r\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\r\n     *\r\n     * The wrapper `String` methods are:\r\n     * `replace` and `split`\r\n     *\r\n     * The wrapper methods that support shortcut fusion are:\r\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\r\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\r\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\r\n     *\r\n     * The chainable wrapper methods are:\r\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\r\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\r\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\r\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\r\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\r\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\r\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\r\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\r\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\r\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\r\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\r\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\r\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\r\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\r\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\r\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\r\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\r\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\r\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\r\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\r\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\r\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\r\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\r\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\r\n     *\r\n     * The wrapper methods that are **not** chainable by default are:\r\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\r\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\r\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\r\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\r\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\r\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\r\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\r\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\r\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\r\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\r\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\r\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\r\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\r\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\r\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\r\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\r\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\r\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\r\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\r\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\r\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\r\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\r\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\r\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\r\n     * `upperFirst`, `value`, and `words`\r\n     *\r\n     * @name _\r\n     * @constructor\r\n     * @category Seq\r\n     * @param {*} value The value to wrap in a `lodash` instance.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var wrapped = _([1, 2, 3]);\r\n     *\r\n     * // Returns an unwrapped value.\r\n     * wrapped.reduce(_.add);\r\n     * // => 6\r\n     *\r\n     * // Returns a wrapped value.\r\n     * var squares = wrapped.map(square);\r\n     *\r\n     * _.isArray(squares);\r\n     * // => false\r\n     *\r\n     * _.isArray(squares.value());\r\n     * // => true\r\n     */\r\n    function lodash(value) {\r\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\r\n        if (value instanceof LodashWrapper) {\r\n          return value;\r\n        }\r\n        if (hasOwnProperty.call(value, '__wrapped__')) {\r\n          return wrapperClone(value);\r\n        }\r\n      }\r\n      return new LodashWrapper(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.create` without support for assigning\r\n     * properties to the created object.\r\n     *\r\n     * @private\r\n     * @param {Object} proto The object to inherit from.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    var baseCreate = (function() {\r\n      function object() {}\r\n      return function(proto) {\r\n        if (!isObject(proto)) {\r\n          return {};\r\n        }\r\n        if (objectCreate) {\r\n          return objectCreate(proto);\r\n        }\r\n        object.prototype = proto;\r\n        var result = new object;\r\n        object.prototype = undefined;\r\n        return result;\r\n      };\r\n    }());\r\n\r\n    /**\r\n     * The function whose prototype chain sequence wrappers inherit from.\r\n     *\r\n     * @private\r\n     */\r\n    function baseLodash() {\r\n      // No operation performed.\r\n    }\r\n\r\n    /**\r\n     * The base constructor for creating `lodash` wrapper objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to wrap.\r\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\r\n     */\r\n    function LodashWrapper(value, chainAll) {\r\n      this.__wrapped__ = value;\r\n      this.__actions__ = [];\r\n      this.__chain__ = !!chainAll;\r\n      this.__index__ = 0;\r\n      this.__values__ = undefined;\r\n    }\r\n\r\n    /**\r\n     * By default, the template delimiters used by lodash are like those in\r\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\r\n     * following template settings to use alternative delimiters.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type {Object}\r\n     */\r\n    lodash.templateSettings = {\r\n\r\n      /**\r\n       * Used to detect `data` property values to be HTML-escaped.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type {RegExp}\r\n       */\r\n      'escape': reEscape,\r\n\r\n      /**\r\n       * Used to detect code to be evaluated.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type {RegExp}\r\n       */\r\n      'evaluate': reEvaluate,\r\n\r\n      /**\r\n       * Used to detect `data` property values to inject.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type {RegExp}\r\n       */\r\n      'interpolate': reInterpolate,\r\n\r\n      /**\r\n       * Used to reference the data object in the template text.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type {string}\r\n       */\r\n      'variable': '',\r\n\r\n      /**\r\n       * Used to import variables into the compiled template.\r\n       *\r\n       * @memberOf _.templateSettings\r\n       * @type {Object}\r\n       */\r\n      'imports': {\r\n\r\n        /**\r\n         * A reference to the `lodash` function.\r\n         *\r\n         * @memberOf _.templateSettings.imports\r\n         * @type {Function}\r\n         */\r\n        '_': lodash\r\n      }\r\n    };\r\n\r\n    // Ensure wrappers are instances of `baseLodash`.\r\n    lodash.prototype = baseLodash.prototype;\r\n    lodash.prototype.constructor = lodash;\r\n\r\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\r\n    LodashWrapper.prototype.constructor = LodashWrapper;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {*} value The value to wrap.\r\n     */\r\n    function LazyWrapper(value) {\r\n      this.__wrapped__ = value;\r\n      this.__actions__ = [];\r\n      this.__dir__ = 1;\r\n      this.__filtered__ = false;\r\n      this.__iteratees__ = [];\r\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\r\n      this.__views__ = [];\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the lazy wrapper object.\r\n     *\r\n     * @private\r\n     * @name clone\r\n     * @memberOf LazyWrapper\r\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\r\n     */\r\n    function lazyClone() {\r\n      var result = new LazyWrapper(this.__wrapped__);\r\n      result.__actions__ = copyArray(this.__actions__);\r\n      result.__dir__ = this.__dir__;\r\n      result.__filtered__ = this.__filtered__;\r\n      result.__iteratees__ = copyArray(this.__iteratees__);\r\n      result.__takeCount__ = this.__takeCount__;\r\n      result.__views__ = copyArray(this.__views__);\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Reverses the direction of lazy iteration.\r\n     *\r\n     * @private\r\n     * @name reverse\r\n     * @memberOf LazyWrapper\r\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\r\n     */\r\n    function lazyReverse() {\r\n      if (this.__filtered__) {\r\n        var result = new LazyWrapper(this);\r\n        result.__dir__ = -1;\r\n        result.__filtered__ = true;\r\n      } else {\r\n        result = this.clone();\r\n        result.__dir__ *= -1;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Extracts the unwrapped value from its lazy wrapper.\r\n     *\r\n     * @private\r\n     * @name value\r\n     * @memberOf LazyWrapper\r\n     * @returns {*} Returns the unwrapped value.\r\n     */\r\n    function lazyValue() {\r\n      var array = this.__wrapped__.value(),\r\n          dir = this.__dir__,\r\n          isArr = isArray(array),\r\n          isRight = dir < 0,\r\n          arrLength = isArr ? array.length : 0,\r\n          view = getView(0, arrLength, this.__views__),\r\n          start = view.start,\r\n          end = view.end,\r\n          length = end - start,\r\n          index = isRight ? end : (start - 1),\r\n          iteratees = this.__iteratees__,\r\n          iterLength = iteratees.length,\r\n          resIndex = 0,\r\n          takeCount = nativeMin(length, this.__takeCount__);\r\n\r\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\r\n        return baseWrapperValue(array, this.__actions__);\r\n      }\r\n      var result = [];\r\n\r\n      outer:\r\n      while (length-- && resIndex < takeCount) {\r\n        index += dir;\r\n\r\n        var iterIndex = -1,\r\n            value = array[index];\r\n\r\n        while (++iterIndex < iterLength) {\r\n          var data = iteratees[iterIndex],\r\n              iteratee = data.iteratee,\r\n              type = data.type,\r\n              computed = iteratee(value);\r\n\r\n          if (type == LAZY_MAP_FLAG) {\r\n            value = computed;\r\n          } else if (!computed) {\r\n            if (type == LAZY_FILTER_FLAG) {\r\n              continue outer;\r\n            } else {\r\n              break outer;\r\n            }\r\n          }\r\n        }\r\n        result[resIndex++] = value;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\r\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\r\n    LazyWrapper.prototype.constructor = LazyWrapper;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a hash object.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function Hash(entries) {\r\n      var index = -1,\r\n          length = entries == null ? 0 : entries.length;\r\n\r\n      this.clear();\r\n      while (++index < length) {\r\n        var entry = entries[index];\r\n        this.set(entry[0], entry[1]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the hash.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf Hash\r\n     */\r\n    function hashClear() {\r\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n      this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the hash.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf Hash\r\n     * @param {Object} hash The hash to modify.\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function hashDelete(key) {\r\n      var result = this.has(key) && delete this.__data__[key];\r\n      this.size -= result ? 1 : 0;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the hash value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function hashGet(key) {\r\n      var data = this.__data__;\r\n      if (nativeCreate) {\r\n        var result = data[key];\r\n        return result === HASH_UNDEFINED ? undefined : result;\r\n      }\r\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if a hash value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function hashHas(key) {\r\n      var data = this.__data__;\r\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\r\n    }\r\n\r\n    /**\r\n     * Sets the hash `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf Hash\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the hash instance.\r\n     */\r\n    function hashSet(key, value) {\r\n      var data = this.__data__;\r\n      this.size += this.has(key) ? 0 : 1;\r\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n      return this;\r\n    }\r\n\r\n    // Add methods to `Hash`.\r\n    Hash.prototype.clear = hashClear;\r\n    Hash.prototype['delete'] = hashDelete;\r\n    Hash.prototype.get = hashGet;\r\n    Hash.prototype.has = hashHas;\r\n    Hash.prototype.set = hashSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an list cache object.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function ListCache(entries) {\r\n      var index = -1,\r\n          length = entries == null ? 0 : entries.length;\r\n\r\n      this.clear();\r\n      while (++index < length) {\r\n        var entry = entries[index];\r\n        this.set(entry[0], entry[1]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the list cache.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf ListCache\r\n     */\r\n    function listCacheClear() {\r\n      this.__data__ = [];\r\n      this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the list cache.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function listCacheDelete(key) {\r\n      var data = this.__data__,\r\n          index = assocIndexOf(data, key);\r\n\r\n      if (index < 0) {\r\n        return false;\r\n      }\r\n      var lastIndex = data.length - 1;\r\n      if (index == lastIndex) {\r\n        data.pop();\r\n      } else {\r\n        splice.call(data, index, 1);\r\n      }\r\n      --this.size;\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the list cache value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function listCacheGet(key) {\r\n      var data = this.__data__,\r\n          index = assocIndexOf(data, key);\r\n\r\n      return index < 0 ? undefined : data[index][1];\r\n    }\r\n\r\n    /**\r\n     * Checks if a list cache value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function listCacheHas(key) {\r\n      return assocIndexOf(this.__data__, key) > -1;\r\n    }\r\n\r\n    /**\r\n     * Sets the list cache `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf ListCache\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the list cache instance.\r\n     */\r\n    function listCacheSet(key, value) {\r\n      var data = this.__data__,\r\n          index = assocIndexOf(data, key);\r\n\r\n      if (index < 0) {\r\n        ++this.size;\r\n        data.push([key, value]);\r\n      } else {\r\n        data[index][1] = value;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    // Add methods to `ListCache`.\r\n    ListCache.prototype.clear = listCacheClear;\r\n    ListCache.prototype['delete'] = listCacheDelete;\r\n    ListCache.prototype.get = listCacheGet;\r\n    ListCache.prototype.has = listCacheHas;\r\n    ListCache.prototype.set = listCacheSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a map cache object to store key-value pairs.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function MapCache(entries) {\r\n      var index = -1,\r\n          length = entries == null ? 0 : entries.length;\r\n\r\n      this.clear();\r\n      while (++index < length) {\r\n        var entry = entries[index];\r\n        this.set(entry[0], entry[1]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the map.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf MapCache\r\n     */\r\n    function mapCacheClear() {\r\n      this.size = 0;\r\n      this.__data__ = {\r\n        'hash': new Hash,\r\n        'map': new (Map || ListCache),\r\n        'string': new Hash\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the map.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function mapCacheDelete(key) {\r\n      var result = getMapData(this, key)['delete'](key);\r\n      this.size -= result ? 1 : 0;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the map value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function mapCacheGet(key) {\r\n      return getMapData(this, key).get(key);\r\n    }\r\n\r\n    /**\r\n     * Checks if a map value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function mapCacheHas(key) {\r\n      return getMapData(this, key).has(key);\r\n    }\r\n\r\n    /**\r\n     * Sets the map `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf MapCache\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the map cache instance.\r\n     */\r\n    function mapCacheSet(key, value) {\r\n      var data = getMapData(this, key),\r\n          size = data.size;\r\n\r\n      data.set(key, value);\r\n      this.size += data.size == size ? 0 : 1;\r\n      return this;\r\n    }\r\n\r\n    // Add methods to `MapCache`.\r\n    MapCache.prototype.clear = mapCacheClear;\r\n    MapCache.prototype['delete'] = mapCacheDelete;\r\n    MapCache.prototype.get = mapCacheGet;\r\n    MapCache.prototype.has = mapCacheHas;\r\n    MapCache.prototype.set = mapCacheSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     *\r\n     * Creates an array cache object to store unique values.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [values] The values to cache.\r\n     */\r\n    function SetCache(values) {\r\n      var index = -1,\r\n          length = values == null ? 0 : values.length;\r\n\r\n      this.__data__ = new MapCache;\r\n      while (++index < length) {\r\n        this.add(values[index]);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Adds `value` to the array cache.\r\n     *\r\n     * @private\r\n     * @name add\r\n     * @memberOf SetCache\r\n     * @alias push\r\n     * @param {*} value The value to cache.\r\n     * @returns {Object} Returns the cache instance.\r\n     */\r\n    function setCacheAdd(value) {\r\n      this.__data__.set(value, HASH_UNDEFINED);\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in the array cache.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf SetCache\r\n     * @param {*} value The value to search for.\r\n     * @returns {number} Returns `true` if `value` is found, else `false`.\r\n     */\r\n    function setCacheHas(value) {\r\n      return this.__data__.has(value);\r\n    }\r\n\r\n    // Add methods to `SetCache`.\r\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\r\n    SetCache.prototype.has = setCacheHas;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a stack cache object to store key-value pairs.\r\n     *\r\n     * @private\r\n     * @constructor\r\n     * @param {Array} [entries] The key-value pairs to cache.\r\n     */\r\n    function Stack(entries) {\r\n      var data = this.__data__ = new ListCache(entries);\r\n      this.size = data.size;\r\n    }\r\n\r\n    /**\r\n     * Removes all key-value entries from the stack.\r\n     *\r\n     * @private\r\n     * @name clear\r\n     * @memberOf Stack\r\n     */\r\n    function stackClear() {\r\n      this.__data__ = new ListCache;\r\n      this.size = 0;\r\n    }\r\n\r\n    /**\r\n     * Removes `key` and its value from the stack.\r\n     *\r\n     * @private\r\n     * @name delete\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to remove.\r\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n     */\r\n    function stackDelete(key) {\r\n      var data = this.__data__,\r\n          result = data['delete'](key);\r\n\r\n      this.size = data.size;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the stack value for `key`.\r\n     *\r\n     * @private\r\n     * @name get\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to get.\r\n     * @returns {*} Returns the entry value.\r\n     */\r\n    function stackGet(key) {\r\n      return this.__data__.get(key);\r\n    }\r\n\r\n    /**\r\n     * Checks if a stack value for `key` exists.\r\n     *\r\n     * @private\r\n     * @name has\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the entry to check.\r\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n     */\r\n    function stackHas(key) {\r\n      return this.__data__.has(key);\r\n    }\r\n\r\n    /**\r\n     * Sets the stack `key` to `value`.\r\n     *\r\n     * @private\r\n     * @name set\r\n     * @memberOf Stack\r\n     * @param {string} key The key of the value to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns the stack cache instance.\r\n     */\r\n    function stackSet(key, value) {\r\n      var data = this.__data__;\r\n      if (data instanceof ListCache) {\r\n        var pairs = data.__data__;\r\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n          pairs.push([key, value]);\r\n          this.size = ++data.size;\r\n          return this;\r\n        }\r\n        data = this.__data__ = new MapCache(pairs);\r\n      }\r\n      data.set(key, value);\r\n      this.size = data.size;\r\n      return this;\r\n    }\r\n\r\n    // Add methods to `Stack`.\r\n    Stack.prototype.clear = stackClear;\r\n    Stack.prototype['delete'] = stackDelete;\r\n    Stack.prototype.get = stackGet;\r\n    Stack.prototype.has = stackHas;\r\n    Stack.prototype.set = stackSet;\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an array of the enumerable property names of the array-like `value`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @param {boolean} inherited Specify returning inherited property names.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function arrayLikeKeys(value, inherited) {\r\n      var isArr = isArray(value),\r\n          isArg = !isArr && isArguments(value),\r\n          isBuff = !isArr && !isArg && isBuffer(value),\r\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n          skipIndexes = isArr || isArg || isBuff || isType,\r\n          result = skipIndexes ? baseTimes(value.length, String) : [],\r\n          length = result.length;\r\n\r\n      for (var key in value) {\r\n        if ((inherited || hasOwnProperty.call(value, key)) &&\r\n            !(skipIndexes && (\r\n               // Safari 9 has enumerable `arguments.length` in strict mode.\r\n               key == 'length' ||\r\n               // Node.js 0.10 has enumerable non-index properties on buffers.\r\n               (isBuff && (key == 'offset' || key == 'parent')) ||\r\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n               // Skip index properties.\r\n               isIndex(key, length)\r\n            ))) {\r\n          result.push(key);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.sample` for arrays.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to sample.\r\n     * @returns {*} Returns the random element.\r\n     */\r\n    function arraySample(array) {\r\n      var length = array.length;\r\n      return length ? array[baseRandom(0, length - 1)] : undefined;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.sampleSize` for arrays.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to sample.\r\n     * @param {number} n The number of elements to sample.\r\n     * @returns {Array} Returns the random elements.\r\n     */\r\n    function arraySampleSize(array, n) {\r\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.shuffle` for arrays.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to shuffle.\r\n     * @returns {Array} Returns the new shuffled array.\r\n     */\r\n    function arrayShuffle(array) {\r\n      return shuffleSelf(copyArray(array));\r\n    }\r\n\r\n    /**\r\n     * This function is like `assignValue` except that it doesn't assign\r\n     * `undefined` values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function assignMergeValue(object, key, value) {\r\n      if ((value !== undefined && !eq(object[key], value)) ||\r\n          (value === undefined && !(key in object))) {\r\n        baseAssignValue(object, key, value);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function assignValue(object, key, value) {\r\n      var objValue = object[key];\r\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\r\n          (value === undefined && !(key in object))) {\r\n        baseAssignValue(object, key, value);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} key The key to search for.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function assocIndexOf(array, key) {\r\n      var length = array.length;\r\n      while (length--) {\r\n        if (eq(array[length][0], key)) {\r\n          return length;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\r\n     * by `iteratee` and values set by `setter`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} setter The function to set `accumulator` values.\r\n     * @param {Function} iteratee The iteratee to transform keys.\r\n     * @param {Object} accumulator The initial aggregated object.\r\n     * @returns {Function} Returns `accumulator`.\r\n     */\r\n    function baseAggregator(collection, setter, iteratee, accumulator) {\r\n      baseEach(collection, function(value, key, collection) {\r\n        setter(accumulator, value, iteratee(value), collection);\r\n      });\r\n      return accumulator;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.assign` without support for multiple sources\r\n     * or `customizer` functions.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseAssign(object, source) {\r\n      return object && copyObject(source, keys(source), object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.assignIn` without support for multiple sources\r\n     * or `customizer` functions.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseAssignIn(object, source) {\r\n      return object && copyObject(source, keysIn(source), object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `assignValue` and `assignMergeValue` without\r\n     * value checks.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {*} value The value to assign.\r\n     */\r\n    function baseAssignValue(object, key, value) {\r\n      if (key == '__proto__' && defineProperty) {\r\n        defineProperty(object, key, {\r\n          'configurable': true,\r\n          'enumerable': true,\r\n          'value': value,\r\n          'writable': true\r\n        });\r\n      } else {\r\n        object[key] = value;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.at` without support for individual paths.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @returns {Array} Returns the picked elements.\r\n     */\r\n    function baseAt(object, paths) {\r\n      var index = -1,\r\n          length = paths.length,\r\n          result = Array(length),\r\n          skip = object == null;\r\n\r\n      while (++index < length) {\r\n        result[index] = skip ? undefined : get(object, paths[index]);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {number} number The number to clamp.\r\n     * @param {number} [lower] The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the clamped number.\r\n     */\r\n    function baseClamp(number, lower, upper) {\r\n      if (number === number) {\r\n        if (upper !== undefined) {\r\n          number = number <= upper ? number : upper;\r\n        }\r\n        if (lower !== undefined) {\r\n          number = number >= lower ? number : lower;\r\n        }\r\n      }\r\n      return number;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\r\n     * traversed objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to clone.\r\n     * @param {boolean} bitmask The bitmask flags.\r\n     *  1 - Deep clone\r\n     *  2 - Flatten inherited properties\r\n     *  4 - Clone symbols\r\n     * @param {Function} [customizer] The function to customize cloning.\r\n     * @param {string} [key] The key of `value`.\r\n     * @param {Object} [object] The parent object of `value`.\r\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\r\n     * @returns {*} Returns the cloned value.\r\n     */\r\n    function baseClone(value, bitmask, customizer, key, object, stack) {\r\n      var result,\r\n          isDeep = bitmask & CLONE_DEEP_FLAG,\r\n          isFlat = bitmask & CLONE_FLAT_FLAG,\r\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\r\n\r\n      if (customizer) {\r\n        result = object ? customizer(value, key, object, stack) : customizer(value);\r\n      }\r\n      if (result !== undefined) {\r\n        return result;\r\n      }\r\n      if (!isObject(value)) {\r\n        return value;\r\n      }\r\n      var isArr = isArray(value);\r\n      if (isArr) {\r\n        result = initCloneArray(value);\r\n        if (!isDeep) {\r\n          return copyArray(value, result);\r\n        }\r\n      } else {\r\n        var tag = getTag(value),\r\n            isFunc = tag == funcTag || tag == genTag;\r\n\r\n        if (isBuffer(value)) {\r\n          return cloneBuffer(value, isDeep);\r\n        }\r\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\r\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\r\n          if (!isDeep) {\r\n            return isFlat\r\n              ? copySymbolsIn(value, baseAssignIn(result, value))\r\n              : copySymbols(value, baseAssign(result, value));\r\n          }\r\n        } else {\r\n          if (!cloneableTags[tag]) {\r\n            return object ? value : {};\r\n          }\r\n          result = initCloneByTag(value, tag, isDeep);\r\n        }\r\n      }\r\n      // Check for circular references and return its corresponding clone.\r\n      stack || (stack = new Stack);\r\n      var stacked = stack.get(value);\r\n      if (stacked) {\r\n        return stacked;\r\n      }\r\n      stack.set(value, result);\r\n\r\n      if (isSet(value)) {\r\n        value.forEach(function(subValue) {\r\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\r\n        });\r\n      } else if (isMap(value)) {\r\n        value.forEach(function(subValue, key) {\r\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\r\n        });\r\n      }\r\n\r\n      var keysFunc = isFull\r\n        ? (isFlat ? getAllKeysIn : getAllKeys)\r\n        : (isFlat ? keysIn : keys);\r\n\r\n      var props = isArr ? undefined : keysFunc(value);\r\n      arrayEach(props || value, function(subValue, key) {\r\n        if (props) {\r\n          key = subValue;\r\n          subValue = value[key];\r\n        }\r\n        // Recursively populate clone (susceptible to call stack limits).\r\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.conforms` which doesn't clone `source`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object of property predicates to conform to.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function baseConforms(source) {\r\n      var props = keys(source);\r\n      return function(object) {\r\n        return baseConformsTo(object, source, props);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property predicates to conform to.\r\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\r\n     */\r\n    function baseConformsTo(object, source, props) {\r\n      var length = props.length;\r\n      if (object == null) {\r\n        return !length;\r\n      }\r\n      object = Object(object);\r\n      while (length--) {\r\n        var key = props[length],\r\n            predicate = source[key],\r\n            value = object[key];\r\n\r\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\r\n     * to provide to `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @param {Array} args The arguments to provide to `func`.\r\n     * @returns {number|Object} Returns the timer id or timeout object.\r\n     */\r\n    function baseDelay(func, wait, args) {\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.difference` without support\r\n     * for excluding multiple arrays or iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Array} values The values to exclude.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     */\r\n    function baseDifference(array, values, iteratee, comparator) {\r\n      var index = -1,\r\n          includes = arrayIncludes,\r\n          isCommon = true,\r\n          length = array.length,\r\n          result = [],\r\n          valuesLength = values.length;\r\n\r\n      if (!length) {\r\n        return result;\r\n      }\r\n      if (iteratee) {\r\n        values = arrayMap(values, baseUnary(iteratee));\r\n      }\r\n      if (comparator) {\r\n        includes = arrayIncludesWith;\r\n        isCommon = false;\r\n      }\r\n      else if (values.length >= LARGE_ARRAY_SIZE) {\r\n        includes = cacheHas;\r\n        isCommon = false;\r\n        values = new SetCache(values);\r\n      }\r\n      outer:\r\n      while (++index < length) {\r\n        var value = array[index],\r\n            computed = iteratee == null ? value : iteratee(value);\r\n\r\n        value = (comparator || value !== 0) ? value : 0;\r\n        if (isCommon && computed === computed) {\r\n          var valuesIndex = valuesLength;\r\n          while (valuesIndex--) {\r\n            if (values[valuesIndex] === computed) {\r\n              continue outer;\r\n            }\r\n          }\r\n          result.push(value);\r\n        }\r\n        else if (!includes(values, computed, comparator)) {\r\n          result.push(value);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     */\r\n    var baseEach = createBaseEach(baseForOwn);\r\n\r\n    /**\r\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     */\r\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\r\n\r\n    /**\r\n     * The base implementation of `_.every` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`\r\n     */\r\n    function baseEvery(collection, predicate) {\r\n      var result = true;\r\n      baseEach(collection, function(value, index, collection) {\r\n        result = !!predicate(value, index, collection);\r\n        return result;\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\r\n     * `comparator` to determine the extremum value.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} iteratee The iteratee invoked per iteration.\r\n     * @param {Function} comparator The comparator used to compare values.\r\n     * @returns {*} Returns the extremum value.\r\n     */\r\n    function baseExtremum(array, iteratee, comparator) {\r\n      var index = -1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        var value = array[index],\r\n            current = iteratee(value);\r\n\r\n        if (current != null && (computed === undefined\r\n              ? (current === current && !isSymbol(current))\r\n              : comparator(current, computed)\r\n            )) {\r\n          var computed = current,\r\n              result = value;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.fill` without an iteratee call guard.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to fill.\r\n     * @param {*} value The value to fill `array` with.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function baseFill(array, value, start, end) {\r\n      var length = array.length;\r\n\r\n      start = toInteger(start);\r\n      if (start < 0) {\r\n        start = -start > length ? 0 : (length + start);\r\n      }\r\n      end = (end === undefined || end > length) ? length : toInteger(end);\r\n      if (end < 0) {\r\n        end += length;\r\n      }\r\n      end = start > end ? 0 : toLength(end);\r\n      while (start < end) {\r\n        array[start++] = value;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.filter` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     */\r\n    function baseFilter(collection, predicate) {\r\n      var result = [];\r\n      baseEach(collection, function(value, index, collection) {\r\n        if (predicate(value, index, collection)) {\r\n          result.push(value);\r\n        }\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.flatten` with support for restricting flattening.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to flatten.\r\n     * @param {number} depth The maximum recursion depth.\r\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\r\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\r\n     * @param {Array} [result=[]] The initial result value.\r\n     * @returns {Array} Returns the new flattened array.\r\n     */\r\n    function baseFlatten(array, depth, predicate, isStrict, result) {\r\n      var index = -1,\r\n          length = array.length;\r\n\r\n      predicate || (predicate = isFlattenable);\r\n      result || (result = []);\r\n\r\n      while (++index < length) {\r\n        var value = array[index];\r\n        if (depth > 0 && predicate(value)) {\r\n          if (depth > 1) {\r\n            // Recursively flatten arrays (susceptible to call stack limits).\r\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\r\n          } else {\r\n            arrayPush(result, value);\r\n          }\r\n        } else if (!isStrict) {\r\n          result[result.length] = value;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `baseForOwn` which iterates over `object`\r\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    var baseFor = createBaseFor();\r\n\r\n    /**\r\n     * This function is like `baseFor` except that it iterates over properties\r\n     * in the opposite order.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    var baseForRight = createBaseFor(true);\r\n\r\n    /**\r\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseForOwn(object, iteratee) {\r\n      return object && baseFor(object, iteratee, keys);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseForOwnRight(object, iteratee) {\r\n      return object && baseForRight(object, iteratee, keys);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.functions` which creates an array of\r\n     * `object` function property names filtered from `props`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Array} props The property names to filter.\r\n     * @returns {Array} Returns the function names.\r\n     */\r\n    function baseFunctions(object, props) {\r\n      return arrayFilter(props, function(key) {\r\n        return isFunction(object[key]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.get` without support for default values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {*} Returns the resolved value.\r\n     */\r\n    function baseGet(object, path) {\r\n      path = castPath(path, object);\r\n\r\n      var index = 0,\r\n          length = path.length;\r\n\r\n      while (object != null && index < length) {\r\n        object = object[toKey(path[index++])];\r\n      }\r\n      return (index && index == length) ? object : undefined;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n     * symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Function} keysFunc The function to get the keys of `object`.\r\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n      var result = keysFunc(object);\r\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `getTag` without fallbacks for buggy environments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the `toStringTag`.\r\n     */\r\n    function baseGetTag(value) {\r\n      if (value == null) {\r\n        return value === undefined ? undefinedTag : nullTag;\r\n      }\r\n      return (symToStringTag && symToStringTag in Object(value))\r\n        ? getRawTag(value)\r\n        : objectToString(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.gt` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\r\n     *  else `false`.\r\n     */\r\n    function baseGt(value, other) {\r\n      return value > other;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.has` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {Object} [object] The object to query.\r\n     * @param {Array|string} key The key to check.\r\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n     */\r\n    function baseHas(object, key) {\r\n      return object != null && hasOwnProperty.call(object, key);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.hasIn` without support for deep paths.\r\n     *\r\n     * @private\r\n     * @param {Object} [object] The object to query.\r\n     * @param {Array|string} key The key to check.\r\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\r\n     */\r\n    function baseHasIn(object, key) {\r\n      return object != null && key in Object(object);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {number} number The number to check.\r\n     * @param {number} start The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\r\n     */\r\n    function baseInRange(number, start, end) {\r\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.intersection`, without support\r\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\r\n     *\r\n     * @private\r\n     * @param {Array} arrays The arrays to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of shared values.\r\n     */\r\n    function baseIntersection(arrays, iteratee, comparator) {\r\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\r\n          length = arrays[0].length,\r\n          othLength = arrays.length,\r\n          othIndex = othLength,\r\n          caches = Array(othLength),\r\n          maxLength = Infinity,\r\n          result = [];\r\n\r\n      while (othIndex--) {\r\n        var array = arrays[othIndex];\r\n        if (othIndex && iteratee) {\r\n          array = arrayMap(array, baseUnary(iteratee));\r\n        }\r\n        maxLength = nativeMin(array.length, maxLength);\r\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\r\n          ? new SetCache(othIndex && array)\r\n          : undefined;\r\n      }\r\n      array = arrays[0];\r\n\r\n      var index = -1,\r\n          seen = caches[0];\r\n\r\n      outer:\r\n      while (++index < length && result.length < maxLength) {\r\n        var value = array[index],\r\n            computed = iteratee ? iteratee(value) : value;\r\n\r\n        value = (comparator || value !== 0) ? value : 0;\r\n        if (!(seen\r\n              ? cacheHas(seen, computed)\r\n              : includes(result, computed, comparator)\r\n            )) {\r\n          othIndex = othLength;\r\n          while (--othIndex) {\r\n            var cache = caches[othIndex];\r\n            if (!(cache\r\n                  ? cacheHas(cache, computed)\r\n                  : includes(arrays[othIndex], computed, comparator))\r\n                ) {\r\n              continue outer;\r\n            }\r\n          }\r\n          if (seen) {\r\n            seen.push(computed);\r\n          }\r\n          result.push(value);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\r\n     * `object` with values transformed by `iteratee` and set by `setter`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} setter The function to set `accumulator` values.\r\n     * @param {Function} iteratee The iteratee to transform values.\r\n     * @param {Object} accumulator The initial inverted object.\r\n     * @returns {Function} Returns `accumulator`.\r\n     */\r\n    function baseInverter(object, setter, iteratee, accumulator) {\r\n      baseForOwn(object, function(value, key, object) {\r\n        setter(accumulator, iteratee(value), key, object);\r\n      });\r\n      return accumulator;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.invoke` without support for individual\r\n     * method arguments.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the method to invoke.\r\n     * @param {Array} args The arguments to invoke the method with.\r\n     * @returns {*} Returns the result of the invoked method.\r\n     */\r\n    function baseInvoke(object, path, args) {\r\n      path = castPath(path, object);\r\n      object = parent(object, path);\r\n      var func = object == null ? object : object[toKey(last(path))];\r\n      return func == null ? undefined : apply(func, object, args);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isArguments`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n     */\r\n    function baseIsArguments(value) {\r\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\r\n     */\r\n    function baseIsArrayBuffer(value) {\r\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isDate` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\r\n     */\r\n    function baseIsDate(value) {\r\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isEqual` which supports partial comparisons\r\n     * and tracks traversed objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @param {boolean} bitmask The bitmask flags.\r\n     *  1 - Unordered comparison\r\n     *  2 - Partial comparison\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     */\r\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\r\n      if (value === other) {\r\n        return true;\r\n      }\r\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n        return value !== value && other !== other;\r\n      }\r\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\r\n     * deep comparisons and tracks traversed objects enabling objects with circular\r\n     * references to be compared.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\r\n      var objIsArr = isArray(object),\r\n          othIsArr = isArray(other),\r\n          objTag = objIsArr ? arrayTag : getTag(object),\r\n          othTag = othIsArr ? arrayTag : getTag(other);\r\n\r\n      objTag = objTag == argsTag ? objectTag : objTag;\r\n      othTag = othTag == argsTag ? objectTag : othTag;\r\n\r\n      var objIsObj = objTag == objectTag,\r\n          othIsObj = othTag == objectTag,\r\n          isSameTag = objTag == othTag;\r\n\r\n      if (isSameTag && isBuffer(object)) {\r\n        if (!isBuffer(other)) {\r\n          return false;\r\n        }\r\n        objIsArr = true;\r\n        objIsObj = false;\r\n      }\r\n      if (isSameTag && !objIsObj) {\r\n        stack || (stack = new Stack);\r\n        return (objIsArr || isTypedArray(object))\r\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\r\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\r\n      }\r\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\r\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\r\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\r\n\r\n        if (objIsWrapped || othIsWrapped) {\r\n          var objUnwrapped = objIsWrapped ? object.value() : object,\r\n              othUnwrapped = othIsWrapped ? other.value() : other;\r\n\r\n          stack || (stack = new Stack);\r\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\r\n        }\r\n      }\r\n      if (!isSameTag) {\r\n        return false;\r\n      }\r\n      stack || (stack = new Stack);\r\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isMap` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\r\n     */\r\n    function baseIsMap(value) {\r\n      return isObjectLike(value) && getTag(value) == mapTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property values to match.\r\n     * @param {Array} matchData The property names, values, and compare flags to match.\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n     */\r\n    function baseIsMatch(object, source, matchData, customizer) {\r\n      var index = matchData.length,\r\n          length = index,\r\n          noCustomizer = !customizer;\r\n\r\n      if (object == null) {\r\n        return !length;\r\n      }\r\n      object = Object(object);\r\n      while (index--) {\r\n        var data = matchData[index];\r\n        if ((noCustomizer && data[2])\r\n              ? data[1] !== object[data[0]]\r\n              : !(data[0] in object)\r\n            ) {\r\n          return false;\r\n        }\r\n      }\r\n      while (++index < length) {\r\n        data = matchData[index];\r\n        var key = data[0],\r\n            objValue = object[key],\r\n            srcValue = data[1];\r\n\r\n        if (noCustomizer && data[2]) {\r\n          if (objValue === undefined && !(key in object)) {\r\n            return false;\r\n          }\r\n        } else {\r\n          var stack = new Stack;\r\n          if (customizer) {\r\n            var result = customizer(objValue, srcValue, key, object, source, stack);\r\n          }\r\n          if (!(result === undefined\r\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\r\n                : result\r\n              )) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isNative` without bad shim checks.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a native function,\r\n     *  else `false`.\r\n     */\r\n    function baseIsNative(value) {\r\n      if (!isObject(value) || isMasked(value)) {\r\n        return false;\r\n      }\r\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n      return pattern.test(toSource(value));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\r\n     */\r\n    function baseIsRegExp(value) {\r\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isSet` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\r\n     */\r\n    function baseIsSet(value) {\r\n      return isObjectLike(value) && getTag(value) == setTag;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n     */\r\n    function baseIsTypedArray(value) {\r\n      return isObjectLike(value) &&\r\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.iteratee`.\r\n     *\r\n     * @private\r\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\r\n     * @returns {Function} Returns the iteratee.\r\n     */\r\n    function baseIteratee(value) {\r\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\r\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\r\n      if (typeof value == 'function') {\r\n        return value;\r\n      }\r\n      if (value == null) {\r\n        return identity;\r\n      }\r\n      if (typeof value == 'object') {\r\n        return isArray(value)\r\n          ? baseMatchesProperty(value[0], value[1])\r\n          : baseMatches(value);\r\n      }\r\n      return property(value);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function baseKeys(object) {\r\n      if (!isPrototype(object)) {\r\n        return nativeKeys(object);\r\n      }\r\n      var result = [];\r\n      for (var key in Object(object)) {\r\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n          result.push(key);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function baseKeysIn(object) {\r\n      if (!isObject(object)) {\r\n        return nativeKeysIn(object);\r\n      }\r\n      var isProto = isPrototype(object),\r\n          result = [];\r\n\r\n      for (var key in object) {\r\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\r\n          result.push(key);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.lt` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\r\n     *  else `false`.\r\n     */\r\n    function baseLt(value, other) {\r\n      return value < other;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.map` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} iteratee The function invoked per iteration.\r\n     * @returns {Array} Returns the new mapped array.\r\n     */\r\n    function baseMap(collection, iteratee) {\r\n      var index = -1,\r\n          result = isArrayLike(collection) ? Array(collection.length) : [];\r\n\r\n      baseEach(collection, function(value, key, collection) {\r\n        result[++index] = iteratee(value, key, collection);\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.matches` which doesn't clone `source`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function baseMatches(source) {\r\n      var matchData = getMatchData(source);\r\n      if (matchData.length == 1 && matchData[0][2]) {\r\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\r\n      }\r\n      return function(object) {\r\n        return object === source || baseIsMatch(object, source, matchData);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\r\n     *\r\n     * @private\r\n     * @param {string} path The path of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function baseMatchesProperty(path, srcValue) {\r\n      if (isKey(path) && isStrictComparable(srcValue)) {\r\n        return matchesStrictComparable(toKey(path), srcValue);\r\n      }\r\n      return function(object) {\r\n        var objValue = get(object, path);\r\n        return (objValue === undefined && objValue === srcValue)\r\n          ? hasIn(object, path)\r\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.merge` without support for multiple sources.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @param {number} srcIndex The index of `source`.\r\n     * @param {Function} [customizer] The function to customize merged values.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     */\r\n    function baseMerge(object, source, srcIndex, customizer, stack) {\r\n      if (object === source) {\r\n        return;\r\n      }\r\n      baseFor(source, function(srcValue, key) {\r\n        stack || (stack = new Stack);\r\n        if (isObject(srcValue)) {\r\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\r\n        }\r\n        else {\r\n          var newValue = customizer\r\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\r\n            : undefined;\r\n\r\n          if (newValue === undefined) {\r\n            newValue = srcValue;\r\n          }\r\n          assignMergeValue(object, key, newValue);\r\n        }\r\n      }, keysIn);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseMerge` for arrays and objects which performs\r\n     * deep merges and tracks traversed objects enabling objects with circular\r\n     * references to be merged.\r\n     *\r\n     * @private\r\n     * @param {Object} object The destination object.\r\n     * @param {Object} source The source object.\r\n     * @param {string} key The key of the value to merge.\r\n     * @param {number} srcIndex The index of `source`.\r\n     * @param {Function} mergeFunc The function to merge values.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     */\r\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\r\n      var objValue = safeGet(object, key),\r\n          srcValue = safeGet(source, key),\r\n          stacked = stack.get(srcValue);\r\n\r\n      if (stacked) {\r\n        assignMergeValue(object, key, stacked);\r\n        return;\r\n      }\r\n      var newValue = customizer\r\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\r\n        : undefined;\r\n\r\n      var isCommon = newValue === undefined;\r\n\r\n      if (isCommon) {\r\n        var isArr = isArray(srcValue),\r\n            isBuff = !isArr && isBuffer(srcValue),\r\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\r\n\r\n        newValue = srcValue;\r\n        if (isArr || isBuff || isTyped) {\r\n          if (isArray(objValue)) {\r\n            newValue = objValue;\r\n          }\r\n          else if (isArrayLikeObject(objValue)) {\r\n            newValue = copyArray(objValue);\r\n          }\r\n          else if (isBuff) {\r\n            isCommon = false;\r\n            newValue = cloneBuffer(srcValue, true);\r\n          }\r\n          else if (isTyped) {\r\n            isCommon = false;\r\n            newValue = cloneTypedArray(srcValue, true);\r\n          }\r\n          else {\r\n            newValue = [];\r\n          }\r\n        }\r\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\r\n          newValue = objValue;\r\n          if (isArguments(objValue)) {\r\n            newValue = toPlainObject(objValue);\r\n          }\r\n          else if (!isObject(objValue) || isFunction(objValue)) {\r\n            newValue = initCloneObject(srcValue);\r\n          }\r\n        }\r\n        else {\r\n          isCommon = false;\r\n        }\r\n      }\r\n      if (isCommon) {\r\n        // Recursively merge objects and arrays (susceptible to call stack limits).\r\n        stack.set(srcValue, newValue);\r\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\r\n        stack['delete'](srcValue);\r\n      }\r\n      assignMergeValue(object, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.nth` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to query.\r\n     * @param {number} n The index of the element to return.\r\n     * @returns {*} Returns the nth element of `array`.\r\n     */\r\n    function baseNth(array, n) {\r\n      var length = array.length;\r\n      if (!length) {\r\n        return;\r\n      }\r\n      n += n < 0 ? length : 0;\r\n      return isIndex(n, length) ? array[n] : undefined;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.orderBy` without param guards.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\r\n     * @param {string[]} orders The sort orders of `iteratees`.\r\n     * @returns {Array} Returns the new sorted array.\r\n     */\r\n    function baseOrderBy(collection, iteratees, orders) {\r\n      if (iteratees.length) {\r\n        iteratees = arrayMap(iteratees, function(iteratee) {\r\n          if (isArray(iteratee)) {\r\n            return function(value) {\r\n              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\r\n            }\r\n          }\r\n          return iteratee;\r\n        });\r\n      } else {\r\n        iteratees = [identity];\r\n      }\r\n\r\n      var index = -1;\r\n      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\r\n\r\n      var result = baseMap(collection, function(value, key, collection) {\r\n        var criteria = arrayMap(iteratees, function(iteratee) {\r\n          return iteratee(value);\r\n        });\r\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\r\n      });\r\n\r\n      return baseSortBy(result, function(object, other) {\r\n        return compareMultiple(object, other, orders);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.pick` without support for individual\r\n     * property identifiers.\r\n     *\r\n     * @private\r\n     * @param {Object} object The source object.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function basePick(object, paths) {\r\n      return basePickBy(object, paths, function(value, path) {\r\n        return hasIn(object, path);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Object} object The source object.\r\n     * @param {string[]} paths The property paths to pick.\r\n     * @param {Function} predicate The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function basePickBy(object, paths, predicate) {\r\n      var index = -1,\r\n          length = paths.length,\r\n          result = {};\r\n\r\n      while (++index < length) {\r\n        var path = paths[index],\r\n            value = baseGet(object, path);\r\n\r\n        if (predicate(value, path)) {\r\n          baseSet(result, castPath(path, object), value);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseProperty` which supports deep paths.\r\n     *\r\n     * @private\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {Function} Returns the new accessor function.\r\n     */\r\n    function basePropertyDeep(path) {\r\n      return function(object) {\r\n        return baseGet(object, path);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.pullAllBy` without support for iteratee\r\n     * shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to modify.\r\n     * @param {Array} values The values to remove.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function basePullAll(array, values, iteratee, comparator) {\r\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\r\n          index = -1,\r\n          length = values.length,\r\n          seen = array;\r\n\r\n      if (array === values) {\r\n        values = copyArray(values);\r\n      }\r\n      if (iteratee) {\r\n        seen = arrayMap(array, baseUnary(iteratee));\r\n      }\r\n      while (++index < length) {\r\n        var fromIndex = 0,\r\n            value = values[index],\r\n            computed = iteratee ? iteratee(value) : value;\r\n\r\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\r\n          if (seen !== array) {\r\n            splice.call(seen, fromIndex, 1);\r\n          }\r\n          splice.call(array, fromIndex, 1);\r\n        }\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.pullAt` without support for individual\r\n     * indexes or capturing the removed elements.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to modify.\r\n     * @param {number[]} indexes The indexes of elements to remove.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function basePullAt(array, indexes) {\r\n      var length = array ? indexes.length : 0,\r\n          lastIndex = length - 1;\r\n\r\n      while (length--) {\r\n        var index = indexes[length];\r\n        if (length == lastIndex || index !== previous) {\r\n          var previous = index;\r\n          if (isIndex(index)) {\r\n            splice.call(array, index, 1);\r\n          } else {\r\n            baseUnset(array, index);\r\n          }\r\n        }\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.random` without support for returning\r\n     * floating-point numbers.\r\n     *\r\n     * @private\r\n     * @param {number} lower The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the random number.\r\n     */\r\n    function baseRandom(lower, upper) {\r\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n     * coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {number} start The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} step The value to increment or decrement by.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Array} Returns the range of numbers.\r\n     */\r\n    function baseRange(start, end, step, fromRight) {\r\n      var index = -1,\r\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\r\n          result = Array(length);\r\n\r\n      while (length--) {\r\n        result[fromRight ? length : ++index] = start;\r\n        start += step;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to repeat.\r\n     * @param {number} n The number of times to repeat the string.\r\n     * @returns {string} Returns the repeated string.\r\n     */\r\n    function baseRepeat(string, n) {\r\n      var result = '';\r\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\r\n        return result;\r\n      }\r\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\r\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\r\n      do {\r\n        if (n % 2) {\r\n          result += string;\r\n        }\r\n        n = nativeFloor(n / 2);\r\n        if (n) {\r\n          string += string;\r\n        }\r\n      } while (n);\r\n\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function baseRest(func, start) {\r\n      return setToString(overRest(func, start, identity), func + '');\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sample`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to sample.\r\n     * @returns {*} Returns the random element.\r\n     */\r\n    function baseSample(collection) {\r\n      return arraySample(values(collection));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sampleSize` without param guards.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to sample.\r\n     * @param {number} n The number of elements to sample.\r\n     * @returns {Array} Returns the random elements.\r\n     */\r\n    function baseSampleSize(collection, n) {\r\n      var array = values(collection);\r\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.set`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @param {Function} [customizer] The function to customize path creation.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseSet(object, path, value, customizer) {\r\n      if (!isObject(object)) {\r\n        return object;\r\n      }\r\n      path = castPath(path, object);\r\n\r\n      var index = -1,\r\n          length = path.length,\r\n          lastIndex = length - 1,\r\n          nested = object;\r\n\r\n      while (nested != null && ++index < length) {\r\n        var key = toKey(path[index]),\r\n            newValue = value;\r\n\r\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\r\n          return object;\r\n        }\r\n\r\n        if (index != lastIndex) {\r\n          var objValue = nested[key];\r\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\r\n          if (newValue === undefined) {\r\n            newValue = isObject(objValue)\r\n              ? objValue\r\n              : (isIndex(path[index + 1]) ? [] : {});\r\n          }\r\n        }\r\n        assignValue(nested, key, newValue);\r\n        nested = nested[key];\r\n      }\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `setData` without support for hot loop shorting.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to associate metadata with.\r\n     * @param {*} data The metadata.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var baseSetData = !metaMap ? identity : function(func, data) {\r\n      metaMap.set(func, data);\r\n      return func;\r\n    };\r\n\r\n    /**\r\n     * The base implementation of `setToString` without support for hot loop shorting.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to modify.\r\n     * @param {Function} string The `toString` result.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\r\n      return defineProperty(func, 'toString', {\r\n        'configurable': true,\r\n        'enumerable': false,\r\n        'value': constant(string),\r\n        'writable': true\r\n      });\r\n    };\r\n\r\n    /**\r\n     * The base implementation of `_.shuffle`.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to shuffle.\r\n     * @returns {Array} Returns the new shuffled array.\r\n     */\r\n    function baseShuffle(collection) {\r\n      return shuffleSelf(values(collection));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.slice` without an iteratee call guard.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to slice.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */\r\n    function baseSlice(array, start, end) {\r\n      var index = -1,\r\n          length = array.length;\r\n\r\n      if (start < 0) {\r\n        start = -start > length ? 0 : (length + start);\r\n      }\r\n      end = end > length ? length : end;\r\n      if (end < 0) {\r\n        end += length;\r\n      }\r\n      length = start > end ? 0 : ((end - start) >>> 0);\r\n      start >>>= 0;\r\n\r\n      var result = Array(length);\r\n      while (++index < length) {\r\n        result[index] = array[index + start];\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.some` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     */\r\n    function baseSome(collection, predicate) {\r\n      var result;\r\n\r\n      baseEach(collection, function(value, index, collection) {\r\n        result = predicate(value, index, collection);\r\n        return !result;\r\n      });\r\n      return !!result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\r\n     * performs a binary search of `array` to determine the index at which `value`\r\n     * should be inserted into `array` in order to maintain its sort order.\r\n     *\r\n     * @private\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     */\r\n    function baseSortedIndex(array, value, retHighest) {\r\n      var low = 0,\r\n          high = array == null ? low : array.length;\r\n\r\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\r\n        while (low < high) {\r\n          var mid = (low + high) >>> 1,\r\n              computed = array[mid];\r\n\r\n          if (computed !== null && !isSymbol(computed) &&\r\n              (retHighest ? (computed <= value) : (computed < value))) {\r\n            low = mid + 1;\r\n          } else {\r\n            high = mid;\r\n          }\r\n        }\r\n        return high;\r\n      }\r\n      return baseSortedIndexBy(array, value, identity, retHighest);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\r\n     * which invokes `iteratee` for `value` and each element of `array` to compute\r\n     * their sort ranking. The iteratee is invoked with one argument; (value).\r\n     *\r\n     * @private\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {Function} iteratee The iteratee invoked per element.\r\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     */\r\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\r\n      var low = 0,\r\n          high = array == null ? 0 : array.length;\r\n      if (high === 0) {\r\n        return 0;\r\n      }\r\n\r\n      value = iteratee(value);\r\n      var valIsNaN = value !== value,\r\n          valIsNull = value === null,\r\n          valIsSymbol = isSymbol(value),\r\n          valIsUndefined = value === undefined;\r\n\r\n      while (low < high) {\r\n        var mid = nativeFloor((low + high) / 2),\r\n            computed = iteratee(array[mid]),\r\n            othIsDefined = computed !== undefined,\r\n            othIsNull = computed === null,\r\n            othIsReflexive = computed === computed,\r\n            othIsSymbol = isSymbol(computed);\r\n\r\n        if (valIsNaN) {\r\n          var setLow = retHighest || othIsReflexive;\r\n        } else if (valIsUndefined) {\r\n          setLow = othIsReflexive && (retHighest || othIsDefined);\r\n        } else if (valIsNull) {\r\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\r\n        } else if (valIsSymbol) {\r\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\r\n        } else if (othIsNull || othIsSymbol) {\r\n          setLow = false;\r\n        } else {\r\n          setLow = retHighest ? (computed <= value) : (computed < value);\r\n        }\r\n        if (setLow) {\r\n          low = mid + 1;\r\n        } else {\r\n          high = mid;\r\n        }\r\n      }\r\n      return nativeMin(high, MAX_ARRAY_INDEX);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     */\r\n    function baseSortedUniq(array, iteratee) {\r\n      var index = -1,\r\n          length = array.length,\r\n          resIndex = 0,\r\n          result = [];\r\n\r\n      while (++index < length) {\r\n        var value = array[index],\r\n            computed = iteratee ? iteratee(value) : value;\r\n\r\n        if (!index || !eq(computed, seen)) {\r\n          var seen = computed;\r\n          result[resIndex++] = value === 0 ? 0 : value;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.toNumber` which doesn't ensure correct\r\n     * conversions of binary, hexadecimal, or octal string values.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to process.\r\n     * @returns {number} Returns the number.\r\n     */\r\n    function baseToNumber(value) {\r\n      if (typeof value == 'number') {\r\n        return value;\r\n      }\r\n      if (isSymbol(value)) {\r\n        return NAN;\r\n      }\r\n      return +value;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.toString` which doesn't convert nullish\r\n     * values to empty strings.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to process.\r\n     * @returns {string} Returns the string.\r\n     */\r\n    function baseToString(value) {\r\n      // Exit early for strings to avoid a performance hit in some environments.\r\n      if (typeof value == 'string') {\r\n        return value;\r\n      }\r\n      if (isArray(value)) {\r\n        // Recursively convert values (susceptible to call stack limits).\r\n        return arrayMap(value, baseToString) + '';\r\n      }\r\n      if (isSymbol(value)) {\r\n        return symbolToString ? symbolToString.call(value) : '';\r\n      }\r\n      var result = (value + '');\r\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     */\r\n    function baseUniq(array, iteratee, comparator) {\r\n      var index = -1,\r\n          includes = arrayIncludes,\r\n          length = array.length,\r\n          isCommon = true,\r\n          result = [],\r\n          seen = result;\r\n\r\n      if (comparator) {\r\n        isCommon = false;\r\n        includes = arrayIncludesWith;\r\n      }\r\n      else if (length >= LARGE_ARRAY_SIZE) {\r\n        var set = iteratee ? null : createSet(array);\r\n        if (set) {\r\n          return setToArray(set);\r\n        }\r\n        isCommon = false;\r\n        includes = cacheHas;\r\n        seen = new SetCache;\r\n      }\r\n      else {\r\n        seen = iteratee ? [] : result;\r\n      }\r\n      outer:\r\n      while (++index < length) {\r\n        var value = array[index],\r\n            computed = iteratee ? iteratee(value) : value;\r\n\r\n        value = (comparator || value !== 0) ? value : 0;\r\n        if (isCommon && computed === computed) {\r\n          var seenIndex = seen.length;\r\n          while (seenIndex--) {\r\n            if (seen[seenIndex] === computed) {\r\n              continue outer;\r\n            }\r\n          }\r\n          if (iteratee) {\r\n            seen.push(computed);\r\n          }\r\n          result.push(value);\r\n        }\r\n        else if (!includes(seen, computed, comparator)) {\r\n          if (seen !== result) {\r\n            seen.push(computed);\r\n          }\r\n          result.push(value);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.unset`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The property path to unset.\r\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\r\n     */\r\n    function baseUnset(object, path) {\r\n      path = castPath(path, object);\r\n      object = parent(object, path);\r\n      return object == null || delete object[toKey(last(path))];\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.update`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to update.\r\n     * @param {Function} updater The function to produce the updated value.\r\n     * @param {Function} [customizer] The function to customize path creation.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function baseUpdate(object, path, updater, customizer) {\r\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\r\n     * without support for iteratee shorthands.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to query.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */\r\n    function baseWhile(array, predicate, isDrop, fromRight) {\r\n      var length = array.length,\r\n          index = fromRight ? length : -1;\r\n\r\n      while ((fromRight ? index-- : ++index < length) &&\r\n        predicate(array[index], index, array)) {}\r\n\r\n      return isDrop\r\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\r\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `wrapperValue` which returns the result of\r\n     * performing a sequence of actions on the unwrapped `value`, where each\r\n     * successive action is supplied the return value of the previous.\r\n     *\r\n     * @private\r\n     * @param {*} value The unwrapped value.\r\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\r\n     * @returns {*} Returns the resolved value.\r\n     */\r\n    function baseWrapperValue(value, actions) {\r\n      var result = value;\r\n      if (result instanceof LazyWrapper) {\r\n        result = result.value();\r\n      }\r\n      return arrayReduce(actions, function(result, action) {\r\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\r\n      }, result);\r\n    }\r\n\r\n    /**\r\n     * The base implementation of methods like `_.xor`, without support for\r\n     * iteratee shorthands, that accepts an array of arrays to inspect.\r\n     *\r\n     * @private\r\n     * @param {Array} arrays The arrays to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of values.\r\n     */\r\n    function baseXor(arrays, iteratee, comparator) {\r\n      var length = arrays.length;\r\n      if (length < 2) {\r\n        return length ? baseUniq(arrays[0]) : [];\r\n      }\r\n      var index = -1,\r\n          result = Array(length);\r\n\r\n      while (++index < length) {\r\n        var array = arrays[index],\r\n            othIndex = -1;\r\n\r\n        while (++othIndex < length) {\r\n          if (othIndex != index) {\r\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\r\n          }\r\n        }\r\n      }\r\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\r\n    }\r\n\r\n    /**\r\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\r\n     *\r\n     * @private\r\n     * @param {Array} props The property identifiers.\r\n     * @param {Array} values The property values.\r\n     * @param {Function} assignFunc The function to assign values.\r\n     * @returns {Object} Returns the new object.\r\n     */\r\n    function baseZipObject(props, values, assignFunc) {\r\n      var index = -1,\r\n          length = props.length,\r\n          valsLength = values.length,\r\n          result = {};\r\n\r\n      while (++index < length) {\r\n        var value = index < valsLength ? values[index] : undefined;\r\n        assignFunc(result, props[index], value);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Casts `value` to an empty array if it's not an array like object.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @returns {Array|Object} Returns the cast array-like object.\r\n     */\r\n    function castArrayLikeObject(value) {\r\n      return isArrayLikeObject(value) ? value : [];\r\n    }\r\n\r\n    /**\r\n     * Casts `value` to `identity` if it's not a function.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @returns {Function} Returns cast function.\r\n     */\r\n    function castFunction(value) {\r\n      return typeof value == 'function' ? value : identity;\r\n    }\r\n\r\n    /**\r\n     * Casts `value` to a path array if it's not one.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @param {Object} [object] The object to query keys on.\r\n     * @returns {Array} Returns the cast property path array.\r\n     */\r\n    function castPath(value, object) {\r\n      if (isArray(value)) {\r\n        return value;\r\n      }\r\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\r\n    }\r\n\r\n    /**\r\n     * A `baseRest` alias which can be replaced with `identity` by module\r\n     * replacement plugins.\r\n     *\r\n     * @private\r\n     * @type {Function}\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    var castRest = baseRest;\r\n\r\n    /**\r\n     * Casts `array` to a slice if it's needed.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to inspect.\r\n     * @param {number} start The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the cast slice.\r\n     */\r\n    function castSlice(array, start, end) {\r\n      var length = array.length;\r\n      end = end === undefined ? length : end;\r\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n    }\r\n\r\n    /**\r\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\r\n     *\r\n     * @private\r\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\r\n     */\r\n    var clearTimeout = ctxClearTimeout || function(id) {\r\n      return root.clearTimeout(id);\r\n    };\r\n\r\n    /**\r\n     * Creates a clone of  `buffer`.\r\n     *\r\n     * @private\r\n     * @param {Buffer} buffer The buffer to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Buffer} Returns the cloned buffer.\r\n     */\r\n    function cloneBuffer(buffer, isDeep) {\r\n      if (isDeep) {\r\n        return buffer.slice();\r\n      }\r\n      var length = buffer.length,\r\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\r\n\r\n      buffer.copy(result);\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `arrayBuffer`.\r\n     *\r\n     * @private\r\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n     */\r\n    function cloneArrayBuffer(arrayBuffer) {\r\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `dataView`.\r\n     *\r\n     * @private\r\n     * @param {Object} dataView The data view to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the cloned data view.\r\n     */\r\n    function cloneDataView(dataView, isDeep) {\r\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\r\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `regexp`.\r\n     *\r\n     * @private\r\n     * @param {Object} regexp The regexp to clone.\r\n     * @returns {Object} Returns the cloned regexp.\r\n     */\r\n    function cloneRegExp(regexp) {\r\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\r\n      result.lastIndex = regexp.lastIndex;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the `symbol` object.\r\n     *\r\n     * @private\r\n     * @param {Object} symbol The symbol object to clone.\r\n     * @returns {Object} Returns the cloned symbol object.\r\n     */\r\n    function cloneSymbol(symbol) {\r\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `typedArray`.\r\n     *\r\n     * @private\r\n     * @param {Object} typedArray The typed array to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the cloned typed array.\r\n     */\r\n    function cloneTypedArray(typedArray, isDeep) {\r\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n    }\r\n\r\n    /**\r\n     * Compares values to sort them in ascending order.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {number} Returns the sort order indicator for `value`.\r\n     */\r\n    function compareAscending(value, other) {\r\n      if (value !== other) {\r\n        var valIsDefined = value !== undefined,\r\n            valIsNull = value === null,\r\n            valIsReflexive = value === value,\r\n            valIsSymbol = isSymbol(value);\r\n\r\n        var othIsDefined = other !== undefined,\r\n            othIsNull = other === null,\r\n            othIsReflexive = other === other,\r\n            othIsSymbol = isSymbol(other);\r\n\r\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\r\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\r\n            (valIsNull && othIsDefined && othIsReflexive) ||\r\n            (!valIsDefined && othIsReflexive) ||\r\n            !valIsReflexive) {\r\n          return 1;\r\n        }\r\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\r\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\r\n            (othIsNull && valIsDefined && valIsReflexive) ||\r\n            (!othIsDefined && valIsReflexive) ||\r\n            !othIsReflexive) {\r\n          return -1;\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.orderBy` to compare multiple properties of a value to another\r\n     * and stable sort them.\r\n     *\r\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\r\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\r\n     * of corresponding values.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\r\n     * @returns {number} Returns the sort order indicator for `object`.\r\n     */\r\n    function compareMultiple(object, other, orders) {\r\n      var index = -1,\r\n          objCriteria = object.criteria,\r\n          othCriteria = other.criteria,\r\n          length = objCriteria.length,\r\n          ordersLength = orders.length;\r\n\r\n      while (++index < length) {\r\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\r\n        if (result) {\r\n          if (index >= ordersLength) {\r\n            return result;\r\n          }\r\n          var order = orders[index];\r\n          return result * (order == 'desc' ? -1 : 1);\r\n        }\r\n      }\r\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\r\n      // that causes it, under certain circumstances, to provide the same value for\r\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\r\n      // for more details.\r\n      //\r\n      // This also ensures a stable sort in V8 and other engines.\r\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\r\n      return object.index - other.index;\r\n    }\r\n\r\n    /**\r\n     * Creates an array that is the composition of partially applied arguments,\r\n     * placeholders, and provided arguments into a single array of arguments.\r\n     *\r\n     * @private\r\n     * @param {Array} args The provided arguments.\r\n     * @param {Array} partials The arguments to prepend to those provided.\r\n     * @param {Array} holders The `partials` placeholder indexes.\r\n     * @params {boolean} [isCurried] Specify composing for a curried function.\r\n     * @returns {Array} Returns the new array of composed arguments.\r\n     */\r\n    function composeArgs(args, partials, holders, isCurried) {\r\n      var argsIndex = -1,\r\n          argsLength = args.length,\r\n          holdersLength = holders.length,\r\n          leftIndex = -1,\r\n          leftLength = partials.length,\r\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n          result = Array(leftLength + rangeLength),\r\n          isUncurried = !isCurried;\r\n\r\n      while (++leftIndex < leftLength) {\r\n        result[leftIndex] = partials[leftIndex];\r\n      }\r\n      while (++argsIndex < holdersLength) {\r\n        if (isUncurried || argsIndex < argsLength) {\r\n          result[holders[argsIndex]] = args[argsIndex];\r\n        }\r\n      }\r\n      while (rangeLength--) {\r\n        result[leftIndex++] = args[argsIndex++];\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * This function is like `composeArgs` except that the arguments composition\r\n     * is tailored for `_.partialRight`.\r\n     *\r\n     * @private\r\n     * @param {Array} args The provided arguments.\r\n     * @param {Array} partials The arguments to append to those provided.\r\n     * @param {Array} holders The `partials` placeholder indexes.\r\n     * @params {boolean} [isCurried] Specify composing for a curried function.\r\n     * @returns {Array} Returns the new array of composed arguments.\r\n     */\r\n    function composeArgsRight(args, partials, holders, isCurried) {\r\n      var argsIndex = -1,\r\n          argsLength = args.length,\r\n          holdersIndex = -1,\r\n          holdersLength = holders.length,\r\n          rightIndex = -1,\r\n          rightLength = partials.length,\r\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\r\n          result = Array(rangeLength + rightLength),\r\n          isUncurried = !isCurried;\r\n\r\n      while (++argsIndex < rangeLength) {\r\n        result[argsIndex] = args[argsIndex];\r\n      }\r\n      var offset = argsIndex;\r\n      while (++rightIndex < rightLength) {\r\n        result[offset + rightIndex] = partials[rightIndex];\r\n      }\r\n      while (++holdersIndex < holdersLength) {\r\n        if (isUncurried || argsIndex < argsLength) {\r\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Copies the values of `source` to `array`.\r\n     *\r\n     * @private\r\n     * @param {Array} source The array to copy values from.\r\n     * @param {Array} [array=[]] The array to copy values to.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function copyArray(source, array) {\r\n      var index = -1,\r\n          length = source.length;\r\n\r\n      array || (array = Array(length));\r\n      while (++index < length) {\r\n        array[index] = source[index];\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * Copies properties of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy properties from.\r\n     * @param {Array} props The property identifiers to copy.\r\n     * @param {Object} [object={}] The object to copy properties to.\r\n     * @param {Function} [customizer] The function to customize copied values.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copyObject(source, props, object, customizer) {\r\n      var isNew = !object;\r\n      object || (object = {});\r\n\r\n      var index = -1,\r\n          length = props.length;\r\n\r\n      while (++index < length) {\r\n        var key = props[index];\r\n\r\n        var newValue = customizer\r\n          ? customizer(object[key], source[key], key, object, source)\r\n          : undefined;\r\n\r\n        if (newValue === undefined) {\r\n          newValue = source[key];\r\n        }\r\n        if (isNew) {\r\n          baseAssignValue(object, key, newValue);\r\n        } else {\r\n          assignValue(object, key, newValue);\r\n        }\r\n      }\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * Copies own symbols of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy symbols from.\r\n     * @param {Object} [object={}] The object to copy symbols to.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copySymbols(source, object) {\r\n      return copyObject(source, getSymbols(source), object);\r\n    }\r\n\r\n    /**\r\n     * Copies own and inherited symbols of `source` to `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} source The object to copy symbols from.\r\n     * @param {Object} [object={}] The object to copy symbols to.\r\n     * @returns {Object} Returns `object`.\r\n     */\r\n    function copySymbolsIn(source, object) {\r\n      return copyObject(source, getSymbolsIn(source), object);\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.groupBy`.\r\n     *\r\n     * @private\r\n     * @param {Function} setter The function to set accumulator values.\r\n     * @param {Function} [initializer] The accumulator object initializer.\r\n     * @returns {Function} Returns the new aggregator function.\r\n     */\r\n    function createAggregator(setter, initializer) {\r\n      return function(collection, iteratee) {\r\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\r\n            accumulator = initializer ? initializer() : {};\r\n\r\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.assign`.\r\n     *\r\n     * @private\r\n     * @param {Function} assigner The function to assign values.\r\n     * @returns {Function} Returns the new assigner function.\r\n     */\r\n    function createAssigner(assigner) {\r\n      return baseRest(function(object, sources) {\r\n        var index = -1,\r\n            length = sources.length,\r\n            customizer = length > 1 ? sources[length - 1] : undefined,\r\n            guard = length > 2 ? sources[2] : undefined;\r\n\r\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\r\n          ? (length--, customizer)\r\n          : undefined;\r\n\r\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\r\n          customizer = length < 3 ? undefined : customizer;\r\n          length = 1;\r\n        }\r\n        object = Object(object);\r\n        while (++index < length) {\r\n          var source = sources[index];\r\n          if (source) {\r\n            assigner(object, source, index, customizer);\r\n          }\r\n        }\r\n        return object;\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a `baseEach` or `baseEachRight` function.\r\n     *\r\n     * @private\r\n     * @param {Function} eachFunc The function to iterate over a collection.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new base function.\r\n     */\r\n    function createBaseEach(eachFunc, fromRight) {\r\n      return function(collection, iteratee) {\r\n        if (collection == null) {\r\n          return collection;\r\n        }\r\n        if (!isArrayLike(collection)) {\r\n          return eachFunc(collection, iteratee);\r\n        }\r\n        var length = collection.length,\r\n            index = fromRight ? length : -1,\r\n            iterable = Object(collection);\r\n\r\n        while ((fromRight ? index-- : ++index < length)) {\r\n          if (iteratee(iterable[index], index, iterable) === false) {\r\n            break;\r\n          }\r\n        }\r\n        return collection;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n     *\r\n     * @private\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new base function.\r\n     */\r\n    function createBaseFor(fromRight) {\r\n      return function(object, iteratee, keysFunc) {\r\n        var index = -1,\r\n            iterable = Object(object),\r\n            props = keysFunc(object),\r\n            length = props.length;\r\n\r\n        while (length--) {\r\n          var key = props[fromRight ? length : ++index];\r\n          if (iteratee(iterable[key], key, iterable) === false) {\r\n            break;\r\n          }\r\n        }\r\n        return object;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with the optional `this`\r\n     * binding of `thisArg`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createBind(func, bitmask, thisArg) {\r\n      var isBind = bitmask & WRAP_BIND_FLAG,\r\n          Ctor = createCtor(func);\r\n\r\n      function wrapper() {\r\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n        return fn.apply(isBind ? thisArg : this, arguments);\r\n      }\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.lowerFirst`.\r\n     *\r\n     * @private\r\n     * @param {string} methodName The name of the `String` case method to use.\r\n     * @returns {Function} Returns the new case function.\r\n     */\r\n    function createCaseFirst(methodName) {\r\n      return function(string) {\r\n        string = toString(string);\r\n\r\n        var strSymbols = hasUnicode(string)\r\n          ? stringToArray(string)\r\n          : undefined;\r\n\r\n        var chr = strSymbols\r\n          ? strSymbols[0]\r\n          : string.charAt(0);\r\n\r\n        var trailing = strSymbols\r\n          ? castSlice(strSymbols, 1).join('')\r\n          : string.slice(1);\r\n\r\n        return chr[methodName]() + trailing;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.camelCase`.\r\n     *\r\n     * @private\r\n     * @param {Function} callback The function to combine each word.\r\n     * @returns {Function} Returns the new compounder function.\r\n     */\r\n    function createCompounder(callback) {\r\n      return function(string) {\r\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that produces an instance of `Ctor` regardless of\r\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\r\n     *\r\n     * @private\r\n     * @param {Function} Ctor The constructor to wrap.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createCtor(Ctor) {\r\n      return function() {\r\n        // Use a `switch` statement to work with class constructors. See\r\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\r\n        // for more details.\r\n        var args = arguments;\r\n        switch (args.length) {\r\n          case 0: return new Ctor;\r\n          case 1: return new Ctor(args[0]);\r\n          case 2: return new Ctor(args[0], args[1]);\r\n          case 3: return new Ctor(args[0], args[1], args[2]);\r\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\r\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\r\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\r\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\r\n        }\r\n        var thisBinding = baseCreate(Ctor.prototype),\r\n            result = Ctor.apply(thisBinding, args);\r\n\r\n        // Mimic the constructor's `return` behavior.\r\n        // See https://es5.github.io/#x13.2.2 for more details.\r\n        return isObject(result) ? result : thisBinding;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to enable currying.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {number} arity The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createCurry(func, bitmask, arity) {\r\n      var Ctor = createCtor(func);\r\n\r\n      function wrapper() {\r\n        var length = arguments.length,\r\n            args = Array(length),\r\n            index = length,\r\n            placeholder = getHolder(wrapper);\r\n\r\n        while (index--) {\r\n          args[index] = arguments[index];\r\n        }\r\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\r\n          ? []\r\n          : replaceHolders(args, placeholder);\r\n\r\n        length -= holders.length;\r\n        if (length < arity) {\r\n          return createRecurry(\r\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\r\n            args, holders, undefined, undefined, arity - length);\r\n        }\r\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n        return apply(fn, this, args);\r\n      }\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a `_.find` or `_.findLast` function.\r\n     *\r\n     * @private\r\n     * @param {Function} findIndexFunc The function to find the collection index.\r\n     * @returns {Function} Returns the new find function.\r\n     */\r\n    function createFind(findIndexFunc) {\r\n      return function(collection, predicate, fromIndex) {\r\n        var iterable = Object(collection);\r\n        if (!isArrayLike(collection)) {\r\n          var iteratee = getIteratee(predicate, 3);\r\n          collection = keys(collection);\r\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\r\n        }\r\n        var index = findIndexFunc(collection, predicate, fromIndex);\r\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a `_.flow` or `_.flowRight` function.\r\n     *\r\n     * @private\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new flow function.\r\n     */\r\n    function createFlow(fromRight) {\r\n      return flatRest(function(funcs) {\r\n        var length = funcs.length,\r\n            index = length,\r\n            prereq = LodashWrapper.prototype.thru;\r\n\r\n        if (fromRight) {\r\n          funcs.reverse();\r\n        }\r\n        while (index--) {\r\n          var func = funcs[index];\r\n          if (typeof func != 'function') {\r\n            throw new TypeError(FUNC_ERROR_TEXT);\r\n          }\r\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\r\n            var wrapper = new LodashWrapper([], true);\r\n          }\r\n        }\r\n        index = wrapper ? index : length;\r\n        while (++index < length) {\r\n          func = funcs[index];\r\n\r\n          var funcName = getFuncName(func),\r\n              data = funcName == 'wrapper' ? getData(func) : undefined;\r\n\r\n          if (data && isLaziable(data[0]) &&\r\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\r\n                !data[4].length && data[9] == 1\r\n              ) {\r\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\r\n          } else {\r\n            wrapper = (func.length == 1 && isLaziable(func))\r\n              ? wrapper[funcName]()\r\n              : wrapper.thru(func);\r\n          }\r\n        }\r\n        return function() {\r\n          var args = arguments,\r\n              value = args[0];\r\n\r\n          if (wrapper && args.length == 1 && isArray(value)) {\r\n            return wrapper.plant(value).value();\r\n          }\r\n          var index = 0,\r\n              result = length ? funcs[index].apply(this, args) : value;\r\n\r\n          while (++index < length) {\r\n            result = funcs[index].call(this, result);\r\n          }\r\n          return result;\r\n        };\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with optional `this`\r\n     * binding of `thisArg`, partial application, and currying.\r\n     *\r\n     * @private\r\n     * @param {Function|string} func The function or method name to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [partialsRight] The arguments to append to those provided\r\n     *  to the new function.\r\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\r\n      var isAry = bitmask & WRAP_ARY_FLAG,\r\n          isBind = bitmask & WRAP_BIND_FLAG,\r\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\r\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\r\n          isFlip = bitmask & WRAP_FLIP_FLAG,\r\n          Ctor = isBindKey ? undefined : createCtor(func);\r\n\r\n      function wrapper() {\r\n        var length = arguments.length,\r\n            args = Array(length),\r\n            index = length;\r\n\r\n        while (index--) {\r\n          args[index] = arguments[index];\r\n        }\r\n        if (isCurried) {\r\n          var placeholder = getHolder(wrapper),\r\n              holdersCount = countHolders(args, placeholder);\r\n        }\r\n        if (partials) {\r\n          args = composeArgs(args, partials, holders, isCurried);\r\n        }\r\n        if (partialsRight) {\r\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\r\n        }\r\n        length -= holdersCount;\r\n        if (isCurried && length < arity) {\r\n          var newHolders = replaceHolders(args, placeholder);\r\n          return createRecurry(\r\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\r\n            args, newHolders, argPos, ary, arity - length\r\n          );\r\n        }\r\n        var thisBinding = isBind ? thisArg : this,\r\n            fn = isBindKey ? thisBinding[func] : func;\r\n\r\n        length = args.length;\r\n        if (argPos) {\r\n          args = reorder(args, argPos);\r\n        } else if (isFlip && length > 1) {\r\n          args.reverse();\r\n        }\r\n        if (isAry && ary < length) {\r\n          args.length = ary;\r\n        }\r\n        if (this && this !== root && this instanceof wrapper) {\r\n          fn = Ctor || createCtor(fn);\r\n        }\r\n        return fn.apply(thisBinding, args);\r\n      }\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.invertBy`.\r\n     *\r\n     * @private\r\n     * @param {Function} setter The function to set accumulator values.\r\n     * @param {Function} toIteratee The function to resolve iteratees.\r\n     * @returns {Function} Returns the new inverter function.\r\n     */\r\n    function createInverter(setter, toIteratee) {\r\n      return function(object, iteratee) {\r\n        return baseInverter(object, setter, toIteratee(iteratee), {});\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that performs a mathematical operation on two values.\r\n     *\r\n     * @private\r\n     * @param {Function} operator The function to perform the operation.\r\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\r\n     * @returns {Function} Returns the new mathematical operation function.\r\n     */\r\n    function createMathOperation(operator, defaultValue) {\r\n      return function(value, other) {\r\n        var result;\r\n        if (value === undefined && other === undefined) {\r\n          return defaultValue;\r\n        }\r\n        if (value !== undefined) {\r\n          result = value;\r\n        }\r\n        if (other !== undefined) {\r\n          if (result === undefined) {\r\n            return other;\r\n          }\r\n          if (typeof value == 'string' || typeof other == 'string') {\r\n            value = baseToString(value);\r\n            other = baseToString(other);\r\n          } else {\r\n            value = baseToNumber(value);\r\n            other = baseToNumber(other);\r\n          }\r\n          result = operator(value, other);\r\n        }\r\n        return result;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.over`.\r\n     *\r\n     * @private\r\n     * @param {Function} arrayFunc The function to iterate over iteratees.\r\n     * @returns {Function} Returns the new over function.\r\n     */\r\n    function createOver(arrayFunc) {\r\n      return flatRest(function(iteratees) {\r\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\r\n        return baseRest(function(args) {\r\n          var thisArg = this;\r\n          return arrayFunc(iteratees, function(iteratee) {\r\n            return apply(iteratee, thisArg, args);\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates the padding for `string` based on `length`. The `chars` string\r\n     * is truncated if the number of characters exceeds `length`.\r\n     *\r\n     * @private\r\n     * @param {number} length The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padding for `string`.\r\n     */\r\n    function createPadding(length, chars) {\r\n      chars = chars === undefined ? ' ' : baseToString(chars);\r\n\r\n      var charsLength = chars.length;\r\n      if (charsLength < 2) {\r\n        return charsLength ? baseRepeat(chars, length) : chars;\r\n      }\r\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\r\n      return hasUnicode(chars)\r\n        ? castSlice(stringToArray(result), 0, length).join('')\r\n        : result.slice(0, length);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to invoke it with the `this` binding\r\n     * of `thisArg` and `partials` prepended to the arguments it receives.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {Array} partials The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createPartial(func, bitmask, thisArg, partials) {\r\n      var isBind = bitmask & WRAP_BIND_FLAG,\r\n          Ctor = createCtor(func);\r\n\r\n      function wrapper() {\r\n        var argsIndex = -1,\r\n            argsLength = arguments.length,\r\n            leftIndex = -1,\r\n            leftLength = partials.length,\r\n            args = Array(leftLength + argsLength),\r\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\r\n\r\n        while (++leftIndex < leftLength) {\r\n          args[leftIndex] = partials[leftIndex];\r\n        }\r\n        while (argsLength--) {\r\n          args[leftIndex++] = arguments[++argsIndex];\r\n        }\r\n        return apply(fn, isBind ? thisArg : this, args);\r\n      }\r\n      return wrapper;\r\n    }\r\n\r\n    /**\r\n     * Creates a `_.range` or `_.rangeRight` function.\r\n     *\r\n     * @private\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {Function} Returns the new range function.\r\n     */\r\n    function createRange(fromRight) {\r\n      return function(start, end, step) {\r\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\r\n          end = step = undefined;\r\n        }\r\n        // Ensure the sign of `-0` is preserved.\r\n        start = toFinite(start);\r\n        if (end === undefined) {\r\n          end = start;\r\n          start = 0;\r\n        } else {\r\n          end = toFinite(end);\r\n        }\r\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\r\n        return baseRange(start, end, step, fromRight);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that performs a relational operation on two values.\r\n     *\r\n     * @private\r\n     * @param {Function} operator The function to perform the operation.\r\n     * @returns {Function} Returns the new relational operation function.\r\n     */\r\n    function createRelationalOperation(operator) {\r\n      return function(value, other) {\r\n        if (!(typeof value == 'string' && typeof other == 'string')) {\r\n          value = toNumber(value);\r\n          other = toNumber(other);\r\n        }\r\n        return operator(value, other);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that wraps `func` to continue currying.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to wrap.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\r\n     * @param {*} placeholder The placeholder value.\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to prepend to those provided to\r\n     *  the new function.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\r\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\r\n          newHolders = isCurry ? holders : undefined,\r\n          newHoldersRight = isCurry ? undefined : holders,\r\n          newPartials = isCurry ? partials : undefined,\r\n          newPartialsRight = isCurry ? undefined : partials;\r\n\r\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\r\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\r\n\r\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\r\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\r\n      }\r\n      var newData = [\r\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\r\n        newHoldersRight, argPos, ary, arity\r\n      ];\r\n\r\n      var result = wrapFunc.apply(undefined, newData);\r\n      if (isLaziable(func)) {\r\n        setData(result, newData);\r\n      }\r\n      result.placeholder = placeholder;\r\n      return setWrapToString(result, func, bitmask);\r\n    }\r\n\r\n    /**\r\n     * Creates a function like `_.round`.\r\n     *\r\n     * @private\r\n     * @param {string} methodName The name of the `Math` method to use when rounding.\r\n     * @returns {Function} Returns the new round function.\r\n     */\r\n    function createRound(methodName) {\r\n      var func = Math[methodName];\r\n      return function(number, precision) {\r\n        number = toNumber(number);\r\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\r\n        if (precision && nativeIsFinite(number)) {\r\n          // Shift with exponential notation to avoid floating-point issues.\r\n          // See [MDN](https://mdn.io/round#Examples) for more details.\r\n          var pair = (toString(number) + 'e').split('e'),\r\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\r\n\r\n          pair = (toString(value) + 'e').split('e');\r\n          return +(pair[0] + 'e' + (+pair[1] - precision));\r\n        }\r\n        return func(number);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a set object of `values`.\r\n     *\r\n     * @private\r\n     * @param {Array} values The values to add to the set.\r\n     * @returns {Object} Returns the new set.\r\n     */\r\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\r\n      return new Set(values);\r\n    };\r\n\r\n    /**\r\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\r\n     *\r\n     * @private\r\n     * @param {Function} keysFunc The function to get the keys of a given object.\r\n     * @returns {Function} Returns the new pairs function.\r\n     */\r\n    function createToPairs(keysFunc) {\r\n      return function(object) {\r\n        var tag = getTag(object);\r\n        if (tag == mapTag) {\r\n          return mapToArray(object);\r\n        }\r\n        if (tag == setTag) {\r\n          return setToPairs(object);\r\n        }\r\n        return baseToPairs(object, keysFunc(object));\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that either curries or invokes `func` with optional\r\n     * `this` binding and partially applied arguments.\r\n     *\r\n     * @private\r\n     * @param {Function|string} func The function or method name to wrap.\r\n     * @param {number} bitmask The bitmask flags.\r\n     *    1 - `_.bind`\r\n     *    2 - `_.bindKey`\r\n     *    4 - `_.curry` or `_.curryRight` of a bound function\r\n     *    8 - `_.curry`\r\n     *   16 - `_.curryRight`\r\n     *   32 - `_.partial`\r\n     *   64 - `_.partialRight`\r\n     *  128 - `_.rearg`\r\n     *  256 - `_.ary`\r\n     *  512 - `_.flip`\r\n     * @param {*} [thisArg] The `this` binding of `func`.\r\n     * @param {Array} [partials] The arguments to be partially applied.\r\n     * @param {Array} [holders] The `partials` placeholder indexes.\r\n     * @param {Array} [argPos] The argument positions of the new function.\r\n     * @param {number} [ary] The arity cap of `func`.\r\n     * @param {number} [arity] The arity of `func`.\r\n     * @returns {Function} Returns the new wrapped function.\r\n     */\r\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\r\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\r\n      if (!isBindKey && typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      var length = partials ? partials.length : 0;\r\n      if (!length) {\r\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\r\n        partials = holders = undefined;\r\n      }\r\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\r\n      arity = arity === undefined ? arity : toInteger(arity);\r\n      length -= holders ? holders.length : 0;\r\n\r\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\r\n        var partialsRight = partials,\r\n            holdersRight = holders;\r\n\r\n        partials = holders = undefined;\r\n      }\r\n      var data = isBindKey ? undefined : getData(func);\r\n\r\n      var newData = [\r\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\r\n        argPos, ary, arity\r\n      ];\r\n\r\n      if (data) {\r\n        mergeData(newData, data);\r\n      }\r\n      func = newData[0];\r\n      bitmask = newData[1];\r\n      thisArg = newData[2];\r\n      partials = newData[3];\r\n      holders = newData[4];\r\n      arity = newData[9] = newData[9] === undefined\r\n        ? (isBindKey ? 0 : func.length)\r\n        : nativeMax(newData[9] - length, 0);\r\n\r\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\r\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\r\n      }\r\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\r\n        var result = createBind(func, bitmask, thisArg);\r\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\r\n        result = createCurry(func, bitmask, arity);\r\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\r\n        result = createPartial(func, bitmask, thisArg, partials);\r\n      } else {\r\n        result = createHybrid.apply(undefined, newData);\r\n      }\r\n      var setter = data ? baseSetData : setData;\r\n      return setWrapToString(setter(result, newData), func, bitmask);\r\n    }\r\n\r\n    /**\r\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\r\n     * of source objects to the destination object for all destination properties\r\n     * that resolve to `undefined`.\r\n     *\r\n     * @private\r\n     * @param {*} objValue The destination value.\r\n     * @param {*} srcValue The source value.\r\n     * @param {string} key The key of the property to assign.\r\n     * @param {Object} object The parent object of `objValue`.\r\n     * @returns {*} Returns the value to assign.\r\n     */\r\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\r\n      if (objValue === undefined ||\r\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\r\n        return srcValue;\r\n      }\r\n      return objValue;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\r\n     * objects into destination objects that are passed thru.\r\n     *\r\n     * @private\r\n     * @param {*} objValue The destination value.\r\n     * @param {*} srcValue The source value.\r\n     * @param {string} key The key of the property to merge.\r\n     * @param {Object} object The parent object of `objValue`.\r\n     * @param {Object} source The parent object of `srcValue`.\r\n     * @param {Object} [stack] Tracks traversed source values and their merged\r\n     *  counterparts.\r\n     * @returns {*} Returns the value to assign.\r\n     */\r\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\r\n      if (isObject(objValue) && isObject(srcValue)) {\r\n        // Recursively merge objects and arrays (susceptible to call stack limits).\r\n        stack.set(srcValue, objValue);\r\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\r\n        stack['delete'](srcValue);\r\n      }\r\n      return objValue;\r\n    }\r\n\r\n    /**\r\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\r\n     * objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @param {string} key The key of the property to inspect.\r\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\r\n     */\r\n    function customOmitClone(value) {\r\n      return isPlainObject(value) ? undefined : value;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n     * partial deep comparisons.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to compare.\r\n     * @param {Array} other The other array to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n     */\r\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n          arrLength = array.length,\r\n          othLength = other.length;\r\n\r\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n        return false;\r\n      }\r\n      // Check that cyclic values are equal.\r\n      var arrStacked = stack.get(array);\r\n      var othStacked = stack.get(other);\r\n      if (arrStacked && othStacked) {\r\n        return arrStacked == other && othStacked == array;\r\n      }\r\n      var index = -1,\r\n          result = true,\r\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n      stack.set(array, other);\r\n      stack.set(other, array);\r\n\r\n      // Ignore non-index properties.\r\n      while (++index < arrLength) {\r\n        var arrValue = array[index],\r\n            othValue = other[index];\r\n\r\n        if (customizer) {\r\n          var compared = isPartial\r\n            ? customizer(othValue, arrValue, index, other, array, stack)\r\n            : customizer(arrValue, othValue, index, array, other, stack);\r\n        }\r\n        if (compared !== undefined) {\r\n          if (compared) {\r\n            continue;\r\n          }\r\n          result = false;\r\n          break;\r\n        }\r\n        // Recursively compare arrays (susceptible to call stack limits).\r\n        if (seen) {\r\n          if (!arraySome(other, function(othValue, othIndex) {\r\n                if (!cacheHas(seen, othIndex) &&\r\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n                  return seen.push(othIndex);\r\n                }\r\n              })) {\r\n            result = false;\r\n            break;\r\n          }\r\n        } else if (!(\r\n              arrValue === othValue ||\r\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n            )) {\r\n          result = false;\r\n          break;\r\n        }\r\n      }\r\n      stack['delete'](array);\r\n      stack['delete'](other);\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n     * the same `toStringTag`.\r\n     *\r\n     * **Note:** This function only supports comparing values with tags of\r\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {string} tag The `toStringTag` of the objects to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n      switch (tag) {\r\n        case dataViewTag:\r\n          if ((object.byteLength != other.byteLength) ||\r\n              (object.byteOffset != other.byteOffset)) {\r\n            return false;\r\n          }\r\n          object = object.buffer;\r\n          other = other.buffer;\r\n\r\n        case arrayBufferTag:\r\n          if ((object.byteLength != other.byteLength) ||\r\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n            return false;\r\n          }\r\n          return true;\r\n\r\n        case boolTag:\r\n        case dateTag:\r\n        case numberTag:\r\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n          // Invalid dates are coerced to `NaN`.\r\n          return eq(+object, +other);\r\n\r\n        case errorTag:\r\n          return object.name == other.name && object.message == other.message;\r\n\r\n        case regexpTag:\r\n        case stringTag:\r\n          // Coerce regexes to strings and treat strings, primitives and objects,\r\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n          // for more details.\r\n          return object == (other + '');\r\n\r\n        case mapTag:\r\n          var convert = mapToArray;\r\n\r\n        case setTag:\r\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n          convert || (convert = setToArray);\r\n\r\n          if (object.size != other.size && !isPartial) {\r\n            return false;\r\n          }\r\n          // Assume cyclic values are equal.\r\n          var stacked = stack.get(object);\r\n          if (stacked) {\r\n            return stacked == other;\r\n          }\r\n          bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n          // Recursively compare objects (susceptible to call stack limits).\r\n          stack.set(object, other);\r\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n          stack['delete'](object);\r\n          return result;\r\n\r\n        case symbolTag:\r\n          if (symbolValueOf) {\r\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n          }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseIsEqualDeep` for objects with support for\r\n     * partial deep comparisons.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to compare.\r\n     * @param {Object} other The other object to compare.\r\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n     * @param {Function} customizer The function to customize comparisons.\r\n     * @param {Function} equalFunc The function to determine equivalents of values.\r\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n     */\r\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n          objProps = getAllKeys(object),\r\n          objLength = objProps.length,\r\n          othProps = getAllKeys(other),\r\n          othLength = othProps.length;\r\n\r\n      if (objLength != othLength && !isPartial) {\r\n        return false;\r\n      }\r\n      var index = objLength;\r\n      while (index--) {\r\n        var key = objProps[index];\r\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n          return false;\r\n        }\r\n      }\r\n      // Check that cyclic values are equal.\r\n      var objStacked = stack.get(object);\r\n      var othStacked = stack.get(other);\r\n      if (objStacked && othStacked) {\r\n        return objStacked == other && othStacked == object;\r\n      }\r\n      var result = true;\r\n      stack.set(object, other);\r\n      stack.set(other, object);\r\n\r\n      var skipCtor = isPartial;\r\n      while (++index < objLength) {\r\n        key = objProps[index];\r\n        var objValue = object[key],\r\n            othValue = other[key];\r\n\r\n        if (customizer) {\r\n          var compared = isPartial\r\n            ? customizer(othValue, objValue, key, other, object, stack)\r\n            : customizer(objValue, othValue, key, object, other, stack);\r\n        }\r\n        // Recursively compare objects (susceptible to call stack limits).\r\n        if (!(compared === undefined\r\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n              : compared\r\n            )) {\r\n          result = false;\r\n          break;\r\n        }\r\n        skipCtor || (skipCtor = key == 'constructor');\r\n      }\r\n      if (result && !skipCtor) {\r\n        var objCtor = object.constructor,\r\n            othCtor = other.constructor;\r\n\r\n        // Non `Object` object instances with different constructors are not equal.\r\n        if (objCtor != othCtor &&\r\n            ('constructor' in object && 'constructor' in other) &&\r\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n          result = false;\r\n        }\r\n      }\r\n      stack['delete'](object);\r\n      stack['delete'](other);\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseRest` which flattens the rest array.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function flatRest(func) {\r\n      return setToString(overRest(func, undefined, flatten), func + '');\r\n    }\r\n\r\n    /**\r\n     * Creates an array of own enumerable property names and symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function getAllKeys(object) {\r\n      return baseGetAllKeys(object, keys, getSymbols);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of own and inherited enumerable property names and\r\n     * symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names and symbols.\r\n     */\r\n    function getAllKeysIn(object) {\r\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\r\n    }\r\n\r\n    /**\r\n     * Gets metadata for `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to query.\r\n     * @returns {*} Returns the metadata for `func`.\r\n     */\r\n    var getData = !metaMap ? noop : function(func) {\r\n      return metaMap.get(func);\r\n    };\r\n\r\n    /**\r\n     * Gets the name of `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to query.\r\n     * @returns {string} Returns the function name.\r\n     */\r\n    function getFuncName(func) {\r\n      var result = (func.name + ''),\r\n          array = realNames[result],\r\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\r\n\r\n      while (length--) {\r\n        var data = array[length],\r\n            otherFunc = data.func;\r\n        if (otherFunc == null || otherFunc == func) {\r\n          return data.name;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the argument placeholder value for `func`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to inspect.\r\n     * @returns {*} Returns the placeholder value.\r\n     */\r\n    function getHolder(func) {\r\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\r\n      return object.placeholder;\r\n    }\r\n\r\n    /**\r\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\r\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\r\n     * If arguments are provided, the chosen function is invoked with them and\r\n     * its result is returned.\r\n     *\r\n     * @private\r\n     * @param {*} [value] The value to convert to an iteratee.\r\n     * @param {number} [arity] The arity of the created iteratee.\r\n     * @returns {Function} Returns the chosen function or its result.\r\n     */\r\n    function getIteratee() {\r\n      var result = lodash.iteratee || iteratee;\r\n      result = result === iteratee ? baseIteratee : result;\r\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\r\n    }\r\n\r\n    /**\r\n     * Gets the data for `map`.\r\n     *\r\n     * @private\r\n     * @param {Object} map The map to query.\r\n     * @param {string} key The reference key.\r\n     * @returns {*} Returns the map data.\r\n     */\r\n    function getMapData(map, key) {\r\n      var data = map.__data__;\r\n      return isKeyable(key)\r\n        ? data[typeof key == 'string' ? 'string' : 'hash']\r\n        : data.map;\r\n    }\r\n\r\n    /**\r\n     * Gets the property names, values, and compare flags of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the match data of `object`.\r\n     */\r\n    function getMatchData(object) {\r\n      var result = keys(object),\r\n          length = result.length;\r\n\r\n      while (length--) {\r\n        var key = result[length],\r\n            value = object[key];\r\n\r\n        result[length] = [key, value, isStrictComparable(value)];\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the native function at `key` of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {string} key The key of the method to get.\r\n     * @returns {*} Returns the function if it's native, else `undefined`.\r\n     */\r\n    function getNative(object, key) {\r\n      var value = getValue(object, key);\r\n      return baseIsNative(value) ? value : undefined;\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the raw `toStringTag`.\r\n     */\r\n    function getRawTag(value) {\r\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n          tag = value[symToStringTag];\r\n\r\n      try {\r\n        value[symToStringTag] = undefined;\r\n        var unmasked = true;\r\n      } catch (e) {}\r\n\r\n      var result = nativeObjectToString.call(value);\r\n      if (unmasked) {\r\n        if (isOwn) {\r\n          value[symToStringTag] = tag;\r\n        } else {\r\n          delete value[symToStringTag];\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own enumerable symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of symbols.\r\n     */\r\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\r\n      if (object == null) {\r\n        return [];\r\n      }\r\n      object = Object(object);\r\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\r\n        return propertyIsEnumerable.call(object, symbol);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Creates an array of the own and inherited enumerable symbols of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of symbols.\r\n     */\r\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\r\n      var result = [];\r\n      while (object) {\r\n        arrayPush(result, getSymbols(object));\r\n        object = getPrototype(object);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    /**\r\n     * Gets the `toStringTag` of `value`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to query.\r\n     * @returns {string} Returns the `toStringTag`.\r\n     */\r\n    var getTag = baseGetTag;\r\n\r\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\r\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n        (Map && getTag(new Map) != mapTag) ||\r\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n        (Set && getTag(new Set) != setTag) ||\r\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n      getTag = function(value) {\r\n        var result = baseGetTag(value),\r\n            Ctor = result == objectTag ? value.constructor : undefined,\r\n            ctorString = Ctor ? toSource(Ctor) : '';\r\n\r\n        if (ctorString) {\r\n          switch (ctorString) {\r\n            case dataViewCtorString: return dataViewTag;\r\n            case mapCtorString: return mapTag;\r\n            case promiseCtorString: return promiseTag;\r\n            case setCtorString: return setTag;\r\n            case weakMapCtorString: return weakMapTag;\r\n          }\r\n        }\r\n        return result;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\r\n     *\r\n     * @private\r\n     * @param {number} start The start of the view.\r\n     * @param {number} end The end of the view.\r\n     * @param {Array} transforms The transformations to apply to the view.\r\n     * @returns {Object} Returns an object containing the `start` and `end`\r\n     *  positions of the view.\r\n     */\r\n    function getView(start, end, transforms) {\r\n      var index = -1,\r\n          length = transforms.length;\r\n\r\n      while (++index < length) {\r\n        var data = transforms[index],\r\n            size = data.size;\r\n\r\n        switch (data.type) {\r\n          case 'drop':      start += size; break;\r\n          case 'dropRight': end -= size; break;\r\n          case 'take':      end = nativeMin(end, start + size); break;\r\n          case 'takeRight': start = nativeMax(start, end - size); break;\r\n        }\r\n      }\r\n      return { 'start': start, 'end': end };\r\n    }\r\n\r\n    /**\r\n     * Extracts wrapper details from the `source` body comment.\r\n     *\r\n     * @private\r\n     * @param {string} source The source to inspect.\r\n     * @returns {Array} Returns the wrapper details.\r\n     */\r\n    function getWrapDetails(source) {\r\n      var match = source.match(reWrapDetails);\r\n      return match ? match[1].split(reSplitDetails) : [];\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` exists on `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @param {Function} hasFunc The function to check properties.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     */\r\n    function hasPath(object, path, hasFunc) {\r\n      path = castPath(path, object);\r\n\r\n      var index = -1,\r\n          length = path.length,\r\n          result = false;\r\n\r\n      while (++index < length) {\r\n        var key = toKey(path[index]);\r\n        if (!(result = object != null && hasFunc(object, key))) {\r\n          break;\r\n        }\r\n        object = object[key];\r\n      }\r\n      if (result || ++index != length) {\r\n        return result;\r\n      }\r\n      length = object == null ? 0 : object.length;\r\n      return !!length && isLength(length) && isIndex(key, length) &&\r\n        (isArray(object) || isArguments(object));\r\n    }\r\n\r\n    /**\r\n     * Initializes an array clone.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to clone.\r\n     * @returns {Array} Returns the initialized clone.\r\n     */\r\n    function initCloneArray(array) {\r\n      var length = array.length,\r\n          result = new array.constructor(length);\r\n\r\n      // Add properties assigned by `RegExp#exec`.\r\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\r\n        result.index = array.index;\r\n        result.input = array.input;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Initializes an object clone.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to clone.\r\n     * @returns {Object} Returns the initialized clone.\r\n     */\r\n    function initCloneObject(object) {\r\n      return (typeof object.constructor == 'function' && !isPrototype(object))\r\n        ? baseCreate(getPrototype(object))\r\n        : {};\r\n    }\r\n\r\n    /**\r\n     * Initializes an object clone based on its `toStringTag`.\r\n     *\r\n     * **Note:** This function only supports cloning values with tags of\r\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to clone.\r\n     * @param {string} tag The `toStringTag` of the object to clone.\r\n     * @param {boolean} [isDeep] Specify a deep clone.\r\n     * @returns {Object} Returns the initialized clone.\r\n     */\r\n    function initCloneByTag(object, tag, isDeep) {\r\n      var Ctor = object.constructor;\r\n      switch (tag) {\r\n        case arrayBufferTag:\r\n          return cloneArrayBuffer(object);\r\n\r\n        case boolTag:\r\n        case dateTag:\r\n          return new Ctor(+object);\r\n\r\n        case dataViewTag:\r\n          return cloneDataView(object, isDeep);\r\n\r\n        case float32Tag: case float64Tag:\r\n        case int8Tag: case int16Tag: case int32Tag:\r\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\r\n          return cloneTypedArray(object, isDeep);\r\n\r\n        case mapTag:\r\n          return new Ctor;\r\n\r\n        case numberTag:\r\n        case stringTag:\r\n          return new Ctor(object);\r\n\r\n        case regexpTag:\r\n          return cloneRegExp(object);\r\n\r\n        case setTag:\r\n          return new Ctor;\r\n\r\n        case symbolTag:\r\n          return cloneSymbol(object);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\r\n     *\r\n     * @private\r\n     * @param {string} source The source to modify.\r\n     * @returns {Array} details The details to insert.\r\n     * @returns {string} Returns the modified source.\r\n     */\r\n    function insertWrapDetails(source, details) {\r\n      var length = details.length;\r\n      if (!length) {\r\n        return source;\r\n      }\r\n      var lastIndex = length - 1;\r\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\r\n      details = details.join(length > 2 ? ', ' : ' ');\r\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a flattenable `arguments` object or array.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\r\n     */\r\n    function isFlattenable(value) {\r\n      return isArray(value) || isArguments(value) ||\r\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a valid array-like index.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n     */\r\n    function isIndex(value, length) {\r\n      var type = typeof value;\r\n      length = length == null ? MAX_SAFE_INTEGER : length;\r\n\r\n      return !!length &&\r\n        (type == 'number' ||\r\n          (type != 'symbol' && reIsUint.test(value))) &&\r\n            (value > -1 && value % 1 == 0 && value < length);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given arguments are from an iteratee call.\r\n     *\r\n     * @private\r\n     * @param {*} value The potential iteratee value argument.\r\n     * @param {*} index The potential iteratee index or key argument.\r\n     * @param {*} object The potential iteratee object argument.\r\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\r\n     *  else `false`.\r\n     */\r\n    function isIterateeCall(value, index, object) {\r\n      if (!isObject(object)) {\r\n        return false;\r\n      }\r\n      var type = typeof index;\r\n      if (type == 'number'\r\n            ? (isArrayLike(object) && isIndex(index, object.length))\r\n            : (type == 'string' && index in object)\r\n          ) {\r\n        return eq(object[index], value);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a property name and not a property path.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @param {Object} [object] The object to query keys on.\r\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\r\n     */\r\n    function isKey(value, object) {\r\n      if (isArray(value)) {\r\n        return false;\r\n      }\r\n      var type = typeof value;\r\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\r\n          value == null || isSymbol(value)) {\r\n        return true;\r\n      }\r\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\r\n        (object != null && value in Object(object));\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is suitable for use as unique object key.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n     */\r\n    function isKeyable(value) {\r\n      var type = typeof value;\r\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n        ? (value !== '__proto__')\r\n        : (value === null);\r\n    }\r\n\r\n    /**\r\n     * Checks if `func` has a lazy counterpart.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to check.\r\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\r\n     *  else `false`.\r\n     */\r\n    function isLaziable(func) {\r\n      var funcName = getFuncName(func),\r\n          other = lodash[funcName];\r\n\r\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\r\n        return false;\r\n      }\r\n      if (func === other) {\r\n        return true;\r\n      }\r\n      var data = getData(other);\r\n      return !!data && func === data[0];\r\n    }\r\n\r\n    /**\r\n     * Checks if `func` has its source masked.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to check.\r\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n     */\r\n    function isMasked(func) {\r\n      return !!maskSrcKey && (maskSrcKey in func);\r\n    }\r\n\r\n    /**\r\n     * Checks if `func` is capable of being masked.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\r\n     */\r\n    var isMaskable = coreJsData ? isFunction : stubFalse;\r\n\r\n    /**\r\n     * Checks if `value` is likely a prototype object.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n     */\r\n    function isPrototype(value) {\r\n      var Ctor = value && value.constructor,\r\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n      return value === proto;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\r\n     *  equality comparisons, else `false`.\r\n     */\r\n    function isStrictComparable(value) {\r\n      return value === value && !isObject(value);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `matchesProperty` for source values suitable\r\n     * for strict equality comparisons, i.e. `===`.\r\n     *\r\n     * @private\r\n     * @param {string} key The key of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     */\r\n    function matchesStrictComparable(key, srcValue) {\r\n      return function(object) {\r\n        if (object == null) {\r\n          return false;\r\n        }\r\n        return object[key] === srcValue &&\r\n          (srcValue !== undefined || (key in Object(object)));\r\n      };\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.memoize` which clears the memoized function's\r\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to have its output memoized.\r\n     * @returns {Function} Returns the new memoized function.\r\n     */\r\n    function memoizeCapped(func) {\r\n      var result = memoize(func, function(key) {\r\n        if (cache.size === MAX_MEMOIZE_SIZE) {\r\n          cache.clear();\r\n        }\r\n        return key;\r\n      });\r\n\r\n      var cache = result.cache;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Merges the function metadata of `source` into `data`.\r\n     *\r\n     * Merging metadata reduces the number of wrappers used to invoke a function.\r\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\r\n     * may be applied regardless of execution order. Methods like `_.ary` and\r\n     * `_.rearg` modify function arguments, making the order in which they are\r\n     * executed important, preventing the merging of metadata. However, we make\r\n     * an exception for a safe combined case where curried functions have `_.ary`\r\n     * and or `_.rearg` applied.\r\n     *\r\n     * @private\r\n     * @param {Array} data The destination metadata.\r\n     * @param {Array} source The source metadata.\r\n     * @returns {Array} Returns `data`.\r\n     */\r\n    function mergeData(data, source) {\r\n      var bitmask = data[1],\r\n          srcBitmask = source[1],\r\n          newBitmask = bitmask | srcBitmask,\r\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\r\n\r\n      var isCombo =\r\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\r\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\r\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\r\n\r\n      // Exit early if metadata can't be merged.\r\n      if (!(isCommon || isCombo)) {\r\n        return data;\r\n      }\r\n      // Use source `thisArg` if available.\r\n      if (srcBitmask & WRAP_BIND_FLAG) {\r\n        data[2] = source[2];\r\n        // Set when currying a bound function.\r\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\r\n      }\r\n      // Compose partial arguments.\r\n      var value = source[3];\r\n      if (value) {\r\n        var partials = data[3];\r\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\r\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\r\n      }\r\n      // Compose partial right arguments.\r\n      value = source[5];\r\n      if (value) {\r\n        partials = data[5];\r\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\r\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\r\n      }\r\n      // Use source `argPos` if available.\r\n      value = source[7];\r\n      if (value) {\r\n        data[7] = value;\r\n      }\r\n      // Use source `ary` if it's smaller.\r\n      if (srcBitmask & WRAP_ARY_FLAG) {\r\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\r\n      }\r\n      // Use source `arity` if one is not provided.\r\n      if (data[9] == null) {\r\n        data[9] = source[9];\r\n      }\r\n      // Use source `func` and merge bitmasks.\r\n      data[0] = source[0];\r\n      data[1] = newBitmask;\r\n\r\n      return data;\r\n    }\r\n\r\n    /**\r\n     * This function is like\r\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n     * except that it includes inherited enumerable properties.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     */\r\n    function nativeKeysIn(object) {\r\n      var result = [];\r\n      if (object != null) {\r\n        for (var key in Object(object)) {\r\n          result.push(key);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a string using `Object.prototype.toString`.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to convert.\r\n     * @returns {string} Returns the converted string.\r\n     */\r\n    function objectToString(value) {\r\n      return nativeObjectToString.call(value);\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `baseRest` which transforms the rest array.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @param {Function} transform The rest array transform.\r\n     * @returns {Function} Returns the new function.\r\n     */\r\n    function overRest(func, start, transform) {\r\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\r\n      return function() {\r\n        var args = arguments,\r\n            index = -1,\r\n            length = nativeMax(args.length - start, 0),\r\n            array = Array(length);\r\n\r\n        while (++index < length) {\r\n          array[index] = args[start + index];\r\n        }\r\n        index = -1;\r\n        var otherArgs = Array(start + 1);\r\n        while (++index < start) {\r\n          otherArgs[index] = args[index];\r\n        }\r\n        otherArgs[start] = transform(array);\r\n        return apply(func, this, otherArgs);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Gets the parent value at `path` of `object`.\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {Array} path The path to get the parent value of.\r\n     * @returns {*} Returns the parent value.\r\n     */\r\n    function parent(object, path) {\r\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\r\n    }\r\n\r\n    /**\r\n     * Reorder `array` according to the specified indexes where the element at\r\n     * the first index is assigned as the first element, the element at\r\n     * the second index is assigned as the second element, and so on.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to reorder.\r\n     * @param {Array} indexes The arranged array indexes.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function reorder(array, indexes) {\r\n      var arrLength = array.length,\r\n          length = nativeMin(indexes.length, arrLength),\r\n          oldArray = copyArray(array);\r\n\r\n      while (length--) {\r\n        var index = indexes[length];\r\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\r\n      }\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\r\n     *\r\n     * @private\r\n     * @param {Object} object The object to query.\r\n     * @param {string} key The key of the property to get.\r\n     * @returns {*} Returns the property value.\r\n     */\r\n    function safeGet(object, key) {\r\n      if (key === 'constructor' && typeof object[key] === 'function') {\r\n        return;\r\n      }\r\n\r\n      if (key == '__proto__') {\r\n        return;\r\n      }\r\n\r\n      return object[key];\r\n    }\r\n\r\n    /**\r\n     * Sets metadata for `func`.\r\n     *\r\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\r\n     * period of time, it will trip its breaker and transition to an identity\r\n     * function to avoid garbage collection pauses in V8. See\r\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\r\n     * for more details.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to associate metadata with.\r\n     * @param {*} data The metadata.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var setData = shortOut(baseSetData);\r\n\r\n    /**\r\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @returns {number|Object} Returns the timer id or timeout object.\r\n     */\r\n    var setTimeout = ctxSetTimeout || function(func, wait) {\r\n      return root.setTimeout(func, wait);\r\n    };\r\n\r\n    /**\r\n     * Sets the `toString` method of `func` to return `string`.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to modify.\r\n     * @param {Function} string The `toString` result.\r\n     * @returns {Function} Returns `func`.\r\n     */\r\n    var setToString = shortOut(baseSetToString);\r\n\r\n    /**\r\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\r\n     * with wrapper details in a comment at the top of the source body.\r\n     *\r\n     * @private\r\n     * @param {Function} wrapper The function to modify.\r\n     * @param {Function} reference The reference function.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @returns {Function} Returns `wrapper`.\r\n     */\r\n    function setWrapToString(wrapper, reference, bitmask) {\r\n      var source = (reference + '');\r\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that'll short out and invoke `identity` instead\r\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\r\n     * milliseconds.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new shortable function.\r\n     */\r\n    function shortOut(func) {\r\n      var count = 0,\r\n          lastCalled = 0;\r\n\r\n      return function() {\r\n        var stamp = nativeNow(),\r\n            remaining = HOT_SPAN - (stamp - lastCalled);\r\n\r\n        lastCalled = stamp;\r\n        if (remaining > 0) {\r\n          if (++count >= HOT_COUNT) {\r\n            return arguments[0];\r\n          }\r\n        } else {\r\n          count = 0;\r\n        }\r\n        return func.apply(undefined, arguments);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\r\n     *\r\n     * @private\r\n     * @param {Array} array The array to shuffle.\r\n     * @param {number} [size=array.length] The size of `array`.\r\n     * @returns {Array} Returns `array`.\r\n     */\r\n    function shuffleSelf(array, size) {\r\n      var index = -1,\r\n          length = array.length,\r\n          lastIndex = length - 1;\r\n\r\n      size = size === undefined ? length : size;\r\n      while (++index < size) {\r\n        var rand = baseRandom(index, lastIndex),\r\n            value = array[rand];\r\n\r\n        array[rand] = array[index];\r\n        array[index] = value;\r\n      }\r\n      array.length = size;\r\n      return array;\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to a property path array.\r\n     *\r\n     * @private\r\n     * @param {string} string The string to convert.\r\n     * @returns {Array} Returns the property path array.\r\n     */\r\n    var stringToPath = memoizeCapped(function(string) {\r\n      var result = [];\r\n      if (string.charCodeAt(0) === 46 /* . */) {\r\n        result.push('');\r\n      }\r\n      string.replace(rePropName, function(match, number, quote, subString) {\r\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\r\n      });\r\n      return result;\r\n    });\r\n\r\n    /**\r\n     * Converts `value` to a string key if it's not a string or symbol.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to inspect.\r\n     * @returns {string|symbol} Returns the key.\r\n     */\r\n    function toKey(value) {\r\n      if (typeof value == 'string' || isSymbol(value)) {\r\n        return value;\r\n      }\r\n      var result = (value + '');\r\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n    }\r\n\r\n    /**\r\n     * Converts `func` to its source code.\r\n     *\r\n     * @private\r\n     * @param {Function} func The function to convert.\r\n     * @returns {string} Returns the source code.\r\n     */\r\n    function toSource(func) {\r\n      if (func != null) {\r\n        try {\r\n          return funcToString.call(func);\r\n        } catch (e) {}\r\n        try {\r\n          return (func + '');\r\n        } catch (e) {}\r\n      }\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * Updates wrapper `details` based on `bitmask` flags.\r\n     *\r\n     * @private\r\n     * @returns {Array} details The details to modify.\r\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\r\n     * @returns {Array} Returns `details`.\r\n     */\r\n    function updateWrapDetails(details, bitmask) {\r\n      arrayEach(wrapFlags, function(pair) {\r\n        var value = '_.' + pair[0];\r\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\r\n          details.push(value);\r\n        }\r\n      });\r\n      return details.sort();\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of `wrapper`.\r\n     *\r\n     * @private\r\n     * @param {Object} wrapper The wrapper to clone.\r\n     * @returns {Object} Returns the cloned wrapper.\r\n     */\r\n    function wrapperClone(wrapper) {\r\n      if (wrapper instanceof LazyWrapper) {\r\n        return wrapper.clone();\r\n      }\r\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\r\n      result.__actions__ = copyArray(wrapper.__actions__);\r\n      result.__index__  = wrapper.__index__;\r\n      result.__values__ = wrapper.__values__;\r\n      return result;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an array of elements split into groups the length of `size`.\r\n     * If `array` can't be split evenly, the final chunk will be the remaining\r\n     * elements.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to process.\r\n     * @param {number} [size=1] The length of each chunk\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the new array of chunks.\r\n     * @example\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\r\n     * // => [['a', 'b'], ['c', 'd']]\r\n     *\r\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\r\n     * // => [['a', 'b', 'c'], ['d']]\r\n     */\r\n    function chunk(array, size, guard) {\r\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\r\n        size = 1;\r\n      } else {\r\n        size = nativeMax(toInteger(size), 0);\r\n      }\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length || size < 1) {\r\n        return [];\r\n      }\r\n      var index = 0,\r\n          resIndex = 0,\r\n          result = Array(nativeCeil(length / size));\r\n\r\n      while (index < length) {\r\n        result[resIndex++] = baseSlice(array, index, (index += size));\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an array with all falsey values removed. The values `false`, `null`,\r\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to compact.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.compact([0, 1, false, 2, '', 3]);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function compact(array) {\r\n      var index = -1,\r\n          length = array == null ? 0 : array.length,\r\n          resIndex = 0,\r\n          result = [];\r\n\r\n      while (++index < length) {\r\n        var value = array[index];\r\n        if (value) {\r\n          result[resIndex++] = value;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new array concatenating `array` with any additional arrays\r\n     * and/or values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to concatenate.\r\n     * @param {...*} [values] The values to concatenate.\r\n     * @returns {Array} Returns the new concatenated array.\r\n     * @example\r\n     *\r\n     * var array = [1];\r\n     * var other = _.concat(array, 2, [3], [[4]]);\r\n     *\r\n     * console.log(other);\r\n     * // => [1, 2, 3, [4]]\r\n     *\r\n     * console.log(array);\r\n     * // => [1]\r\n     */\r\n    function concat() {\r\n      var length = arguments.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      var args = Array(length - 1),\r\n          array = arguments[0],\r\n          index = length;\r\n\r\n      while (index--) {\r\n        args[index - 1] = arguments[index];\r\n      }\r\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of `array` values not included in the other given arrays\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. The order and references of result values are\r\n     * determined by the first array.\r\n     *\r\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...Array} [values] The values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @see _.without, _.xor\r\n     * @example\r\n     *\r\n     * _.difference([2, 1], [2, 3]);\r\n     * // => [1]\r\n     */\r\n    var difference = baseRest(function(array, values) {\r\n      return isArrayLikeObject(array)\r\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.difference` except that it accepts `iteratee` which\r\n     * is invoked for each element of `array` and `values` to generate the criterion\r\n     * by which they're compared. The order and references of result values are\r\n     * determined by the first array. The iteratee is invoked with one argument:\r\n     * (value).\r\n     *\r\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...Array} [values] The values to exclude.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n     * // => [1.2]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\r\n     * // => [{ 'x': 2 }]\r\n     */\r\n    var differenceBy = baseRest(function(array, values) {\r\n      var iteratee = last(values);\r\n      if (isArrayLikeObject(iteratee)) {\r\n        iteratee = undefined;\r\n      }\r\n      return isArrayLikeObject(array)\r\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.difference` except that it accepts `comparator`\r\n     * which is invoked to compare elements of `array` to `values`. The order and\r\n     * references of result values are determined by the first array. The comparator\r\n     * is invoked with two arguments: (arrVal, othVal).\r\n     *\r\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...Array} [values] The values to exclude.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n     *\r\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\r\n     * // => [{ 'x': 2, 'y': 1 }]\r\n     */\r\n    var differenceWith = baseRest(function(array, values) {\r\n      var comparator = last(values);\r\n      if (isArrayLikeObject(comparator)) {\r\n        comparator = undefined;\r\n      }\r\n      return isArrayLikeObject(array)\r\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to drop.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.drop([1, 2, 3]);\r\n     * // => [2, 3]\r\n     *\r\n     * _.drop([1, 2, 3], 2);\r\n     * // => [3]\r\n     *\r\n     * _.drop([1, 2, 3], 5);\r\n     * // => []\r\n     *\r\n     * _.drop([1, 2, 3], 0);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function drop(array, n, guard) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      n = (guard || n === undefined) ? 1 : toInteger(n);\r\n      return baseSlice(array, n < 0 ? 0 : n, length);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements dropped from the end.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to drop.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.dropRight([1, 2, 3]);\r\n     * // => [1, 2]\r\n     *\r\n     * _.dropRight([1, 2, 3], 2);\r\n     * // => [1]\r\n     *\r\n     * _.dropRight([1, 2, 3], 5);\r\n     * // => []\r\n     *\r\n     * _.dropRight([1, 2, 3], 0);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function dropRight(array, n, guard) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      n = (guard || n === undefined) ? 1 : toInteger(n);\r\n      n = length - n;\r\n      return baseSlice(array, 0, n < 0 ? 0 : n);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` excluding elements dropped from the end.\r\n     * Elements are dropped until `predicate` returns falsey. The predicate is\r\n     * invoked with three arguments: (value, index, array).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * _.dropRightWhile(users, function(o) { return !o.active; });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\r\n     * // => objects for ['barney', 'fred']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.dropRightWhile(users, ['active', false]);\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.dropRightWhile(users, 'active');\r\n     * // => objects for ['barney', 'fred', 'pebbles']\r\n     */\r\n    function dropRightWhile(array, predicate) {\r\n      return (array && array.length)\r\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` excluding elements dropped from the beginning.\r\n     * Elements are dropped until `predicate` returns falsey. The predicate is\r\n     * invoked with three arguments: (value, index, array).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * _.dropWhile(users, function(o) { return !o.active; });\r\n     * // => objects for ['pebbles']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\r\n     * // => objects for ['fred', 'pebbles']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.dropWhile(users, ['active', false]);\r\n     * // => objects for ['pebbles']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.dropWhile(users, 'active');\r\n     * // => objects for ['barney', 'fred', 'pebbles']\r\n     */\r\n    function dropWhile(array, predicate) {\r\n      return (array && array.length)\r\n        ? baseWhile(array, getIteratee(predicate, 3), true)\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * Fills elements of `array` with `value` from `start` up to, but not\r\n     * including, `end`.\r\n     *\r\n     * **Note:** This method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Array\r\n     * @param {Array} array The array to fill.\r\n     * @param {*} value The value to fill `array` with.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _.fill(array, 'a');\r\n     * console.log(array);\r\n     * // => ['a', 'a', 'a']\r\n     *\r\n     * _.fill(Array(3), 2);\r\n     * // => [2, 2, 2]\r\n     *\r\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\r\n     * // => [4, '*', '*', 10]\r\n     */\r\n    function fill(array, value, start, end) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\r\n        start = 0;\r\n        end = length;\r\n      }\r\n      return baseFill(array, value, start, end);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.find` except that it returns the index of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\r\n     * // => 0\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\r\n     * // => 1\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findIndex(users, ['active', false]);\r\n     * // => 0\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findIndex(users, 'active');\r\n     * // => 2\r\n     */\r\n    function findIndex(array, predicate, fromIndex) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return -1;\r\n      }\r\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\r\n      if (index < 0) {\r\n        index = nativeMax(length + index, 0);\r\n      }\r\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.findIndex` except that it iterates over elements\r\n     * of `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=array.length-1] The index to search from.\r\n     * @returns {number} Returns the index of the found element, else `-1`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\r\n     * // => 2\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\r\n     * // => 0\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findLastIndex(users, ['active', false]);\r\n     * // => 2\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findLastIndex(users, 'active');\r\n     * // => 0\r\n     */\r\n    function findLastIndex(array, predicate, fromIndex) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return -1;\r\n      }\r\n      var index = length - 1;\r\n      if (fromIndex !== undefined) {\r\n        index = toInteger(fromIndex);\r\n        index = fromIndex < 0\r\n          ? nativeMax(length + index, 0)\r\n          : nativeMin(index, length - 1);\r\n      }\r\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\r\n    }\r\n\r\n    /**\r\n     * Flattens `array` a single level deep.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flatten([1, [2, [3, [4]], 5]]);\r\n     * // => [1, 2, [3, [4]], 5]\r\n     */\r\n    function flatten(array) {\r\n      var length = array == null ? 0 : array.length;\r\n      return length ? baseFlatten(array, 1) : [];\r\n    }\r\n\r\n    /**\r\n     * Recursively flattens `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\r\n     * // => [1, 2, 3, 4, 5]\r\n     */\r\n    function flattenDeep(array) {\r\n      var length = array == null ? 0 : array.length;\r\n      return length ? baseFlatten(array, INFINITY) : [];\r\n    }\r\n\r\n    /**\r\n     * Recursively flatten `array` up to `depth` times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.4.0\r\n     * @category Array\r\n     * @param {Array} array The array to flatten.\r\n     * @param {number} [depth=1] The maximum recursion depth.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * var array = [1, [2, [3, [4]], 5]];\r\n     *\r\n     * _.flattenDepth(array, 1);\r\n     * // => [1, 2, [3, [4]], 5]\r\n     *\r\n     * _.flattenDepth(array, 2);\r\n     * // => [1, 2, 3, [4], 5]\r\n     */\r\n    function flattenDepth(array, depth) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      depth = depth === undefined ? 1 : toInteger(depth);\r\n      return baseFlatten(array, depth);\r\n    }\r\n\r\n    /**\r\n     * The inverse of `_.toPairs`; this method returns an object composed\r\n     * from key-value `pairs`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} pairs The key-value pairs.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * _.fromPairs([['a', 1], ['b', 2]]);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    function fromPairs(pairs) {\r\n      var index = -1,\r\n          length = pairs == null ? 0 : pairs.length,\r\n          result = {};\r\n\r\n      while (++index < length) {\r\n        var pair = pairs[index];\r\n        result[pair[0]] = pair[1];\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the first element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias first\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the first element of `array`.\r\n     * @example\r\n     *\r\n     * _.head([1, 2, 3]);\r\n     * // => 1\r\n     *\r\n     * _.head([]);\r\n     * // => undefined\r\n     */\r\n    function head(array) {\r\n      return (array && array.length) ? array[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the index at which the first occurrence of `value` is found in `array`\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\r\n     * offset from the end of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.indexOf([1, 2, 1, 2], 2);\r\n     * // => 1\r\n     *\r\n     * // Search from the `fromIndex`.\r\n     * _.indexOf([1, 2, 1, 2], 2, 2);\r\n     * // => 3\r\n     */\r\n    function indexOf(array, value, fromIndex) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return -1;\r\n      }\r\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\r\n      if (index < 0) {\r\n        index = nativeMax(length + index, 0);\r\n      }\r\n      return baseIndexOf(array, value, index);\r\n    }\r\n\r\n    /**\r\n     * Gets all but the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.initial([1, 2, 3]);\r\n     * // => [1, 2]\r\n     */\r\n    function initial(array) {\r\n      var length = array == null ? 0 : array.length;\r\n      return length ? baseSlice(array, 0, -1) : [];\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unique values that are included in all given arrays\r\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons. The order and references of result values are\r\n     * determined by the first array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of intersecting values.\r\n     * @example\r\n     *\r\n     * _.intersection([2, 1], [2, 3]);\r\n     * // => [2]\r\n     */\r\n    var intersection = baseRest(function(arrays) {\r\n      var mapped = arrayMap(arrays, castArrayLikeObject);\r\n      return (mapped.length && mapped[0] === arrays[0])\r\n        ? baseIntersection(mapped)\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.intersection` except that it accepts `iteratee`\r\n     * which is invoked for each element of each `arrays` to generate the criterion\r\n     * by which they're compared. The order and references of result values are\r\n     * determined by the first array. The iteratee is invoked with one argument:\r\n     * (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new array of intersecting values.\r\n     * @example\r\n     *\r\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n     * // => [2.1]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 1 }]\r\n     */\r\n    var intersectionBy = baseRest(function(arrays) {\r\n      var iteratee = last(arrays),\r\n          mapped = arrayMap(arrays, castArrayLikeObject);\r\n\r\n      if (iteratee === last(mapped)) {\r\n        iteratee = undefined;\r\n      } else {\r\n        mapped.pop();\r\n      }\r\n      return (mapped.length && mapped[0] === arrays[0])\r\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.intersection` except that it accepts `comparator`\r\n     * which is invoked to compare elements of `arrays`. The order and references\r\n     * of result values are determined by the first array. The comparator is\r\n     * invoked with two arguments: (arrVal, othVal).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of intersecting values.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n     *\r\n     * _.intersectionWith(objects, others, _.isEqual);\r\n     * // => [{ 'x': 1, 'y': 2 }]\r\n     */\r\n    var intersectionWith = baseRest(function(arrays) {\r\n      var comparator = last(arrays),\r\n          mapped = arrayMap(arrays, castArrayLikeObject);\r\n\r\n      comparator = typeof comparator == 'function' ? comparator : undefined;\r\n      if (comparator) {\r\n        mapped.pop();\r\n      }\r\n      return (mapped.length && mapped[0] === arrays[0])\r\n        ? baseIntersection(mapped, undefined, comparator)\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * Converts all elements in `array` into a string separated by `separator`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to convert.\r\n     * @param {string} [separator=','] The element separator.\r\n     * @returns {string} Returns the joined string.\r\n     * @example\r\n     *\r\n     * _.join(['a', 'b', 'c'], '~');\r\n     * // => 'a~b~c'\r\n     */\r\n    function join(array, separator) {\r\n      return array == null ? '' : nativeJoin.call(array, separator);\r\n    }\r\n\r\n    /**\r\n     * Gets the last element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {*} Returns the last element of `array`.\r\n     * @example\r\n     *\r\n     * _.last([1, 2, 3]);\r\n     * // => 3\r\n     */\r\n    function last(array) {\r\n      var length = array == null ? 0 : array.length;\r\n      return length ? array[length - 1] : undefined;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.indexOf` except that it iterates over elements of\r\n     * `array` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=array.length-1] The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.lastIndexOf([1, 2, 1, 2], 2);\r\n     * // => 3\r\n     *\r\n     * // Search from the `fromIndex`.\r\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\r\n     * // => 1\r\n     */\r\n    function lastIndexOf(array, value, fromIndex) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return -1;\r\n      }\r\n      var index = length;\r\n      if (fromIndex !== undefined) {\r\n        index = toInteger(fromIndex);\r\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\r\n      }\r\n      return value === value\r\n        ? strictLastIndexOf(array, value, index)\r\n        : baseFindIndex(array, baseIsNaN, index, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\r\n     * element from the end is returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.11.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=0] The index of the element to return.\r\n     * @returns {*} Returns the nth element of `array`.\r\n     * @example\r\n     *\r\n     * var array = ['a', 'b', 'c', 'd'];\r\n     *\r\n     * _.nth(array, 1);\r\n     * // => 'b'\r\n     *\r\n     * _.nth(array, -2);\r\n     * // => 'c';\r\n     */\r\n    function nth(array, n) {\r\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Removes all given values from `array` using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\r\n     * to remove elements from an array by predicate.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {...*} [values] The values to remove.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\r\n     *\r\n     * _.pull(array, 'a', 'c');\r\n     * console.log(array);\r\n     * // => ['b', 'b']\r\n     */\r\n    var pull = baseRest(pullAll);\r\n\r\n    /**\r\n     * This method is like `_.pull` except that it accepts an array of values to remove.\r\n     *\r\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {Array} values The values to remove.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\r\n     *\r\n     * _.pullAll(array, ['a', 'c']);\r\n     * console.log(array);\r\n     * // => ['b', 'b']\r\n     */\r\n    function pullAll(array, values) {\r\n      return (array && array.length && values && values.length)\r\n        ? basePullAll(array, values)\r\n        : array;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\r\n     * invoked for each element of `array` and `values` to generate the criterion\r\n     * by which they're compared. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {Array} values The values to remove.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\r\n     *\r\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\r\n     * console.log(array);\r\n     * // => [{ 'x': 2 }]\r\n     */\r\n    function pullAllBy(array, values, iteratee) {\r\n      return (array && array.length && values && values.length)\r\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\r\n        : array;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.pullAll` except that it accepts `comparator` which\r\n     * is invoked to compare elements of `array` to `values`. The comparator is\r\n     * invoked with two arguments: (arrVal, othVal).\r\n     *\r\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.6.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {Array} values The values to remove.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\r\n     *\r\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\r\n     * console.log(array);\r\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\r\n     */\r\n    function pullAllWith(array, values, comparator) {\r\n      return (array && array.length && values && values.length)\r\n        ? basePullAll(array, values, undefined, comparator)\r\n        : array;\r\n    }\r\n\r\n    /**\r\n     * Removes elements from `array` corresponding to `indexes` and returns an\r\n     * array of removed elements.\r\n     *\r\n     * **Note:** Unlike `_.at`, this method mutates `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\r\n     * @returns {Array} Returns the new array of removed elements.\r\n     * @example\r\n     *\r\n     * var array = ['a', 'b', 'c', 'd'];\r\n     * var pulled = _.pullAt(array, [1, 3]);\r\n     *\r\n     * console.log(array);\r\n     * // => ['a', 'c']\r\n     *\r\n     * console.log(pulled);\r\n     * // => ['b', 'd']\r\n     */\r\n    var pullAt = flatRest(function(array, indexes) {\r\n      var length = array == null ? 0 : array.length,\r\n          result = baseAt(array, indexes);\r\n\r\n      basePullAt(array, arrayMap(indexes, function(index) {\r\n        return isIndex(index, length) ? +index : index;\r\n      }).sort(compareAscending));\r\n\r\n      return result;\r\n    });\r\n\r\n    /**\r\n     * Removes all elements from `array` that `predicate` returns truthy for\r\n     * and returns an array of the removed elements. The predicate is invoked\r\n     * with three arguments: (value, index, array).\r\n     *\r\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\r\n     * to pull elements from an array by value.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new array of removed elements.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3, 4];\r\n     * var evens = _.remove(array, function(n) {\r\n     *   return n % 2 == 0;\r\n     * });\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 3]\r\n     *\r\n     * console.log(evens);\r\n     * // => [2, 4]\r\n     */\r\n    function remove(array, predicate) {\r\n      var result = [];\r\n      if (!(array && array.length)) {\r\n        return result;\r\n      }\r\n      var index = -1,\r\n          indexes = [],\r\n          length = array.length;\r\n\r\n      predicate = getIteratee(predicate, 3);\r\n      while (++index < length) {\r\n        var value = array[index];\r\n        if (predicate(value, index, array)) {\r\n          result.push(value);\r\n          indexes.push(index);\r\n        }\r\n      }\r\n      basePullAt(array, indexes);\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Reverses `array` so that the first element becomes the last, the second\r\n     * element becomes the second to last, and so on.\r\n     *\r\n     * **Note:** This method mutates `array` and is based on\r\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to modify.\r\n     * @returns {Array} Returns `array`.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _.reverse(array);\r\n     * // => [3, 2, 1]\r\n     *\r\n     * console.log(array);\r\n     * // => [3, 2, 1]\r\n     */\r\n    function reverse(array) {\r\n      return array == null ? array : nativeReverse.call(array);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\r\n     *\r\n     * **Note:** This method is used instead of\r\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\r\n     * returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to slice.\r\n     * @param {number} [start=0] The start position.\r\n     * @param {number} [end=array.length] The end position.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     */\r\n    function slice(array, start, end) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\r\n        start = 0;\r\n        end = length;\r\n      }\r\n      else {\r\n        start = start == null ? 0 : toInteger(start);\r\n        end = end === undefined ? length : toInteger(end);\r\n      }\r\n      return baseSlice(array, start, end);\r\n    }\r\n\r\n    /**\r\n     * Uses a binary search to determine the lowest index at which `value`\r\n     * should be inserted into `array` in order to maintain its sort order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * _.sortedIndex([30, 50], 40);\r\n     * // => 1\r\n     */\r\n    function sortedIndex(array, value) {\r\n      return baseSortedIndex(array, value);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\r\n     * which is invoked for `value` and each element of `array` to compute their\r\n     * sort ranking. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\r\n     *\r\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\r\n     * // => 0\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\r\n     * // => 0\r\n     */\r\n    function sortedIndexBy(array, value, iteratee) {\r\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.indexOf` except that it performs a binary\r\n     * search on a sorted `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\r\n     * // => 1\r\n     */\r\n    function sortedIndexOf(array, value) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (length) {\r\n        var index = baseSortedIndex(array, value);\r\n        if (index < length && eq(array[index], value)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.sortedIndex` except that it returns the highest\r\n     * index at which `value` should be inserted into `array` in order to\r\n     * maintain its sort order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\r\n     * // => 4\r\n     */\r\n    function sortedLastIndex(array, value) {\r\n      return baseSortedIndex(array, value, true);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\r\n     * which is invoked for `value` and each element of `array` to compute their\r\n     * sort ranking. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The sorted array to inspect.\r\n     * @param {*} value The value to evaluate.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {number} Returns the index at which `value` should be inserted\r\n     *  into `array`.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\r\n     *\r\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\r\n     * // => 1\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\r\n     * // => 1\r\n     */\r\n    function sortedLastIndexBy(array, value, iteratee) {\r\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.lastIndexOf` except that it performs a binary\r\n     * search on a sorted `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     * @example\r\n     *\r\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\r\n     * // => 3\r\n     */\r\n    function sortedLastIndexOf(array, value) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (length) {\r\n        var index = baseSortedIndex(array, value, true) - 1;\r\n        if (eq(array[index], value)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.uniq` except that it's designed and optimized\r\n     * for sorted arrays.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.sortedUniq([1, 1, 2]);\r\n     * // => [1, 2]\r\n     */\r\n    function sortedUniq(array) {\r\n      return (array && array.length)\r\n        ? baseSortedUniq(array)\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.uniqBy` except that it's designed and optimized\r\n     * for sorted arrays.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\r\n     * // => [1.1, 2.3]\r\n     */\r\n    function sortedUniqBy(array, iteratee) {\r\n      return (array && array.length)\r\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * Gets all but the first element of `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.tail([1, 2, 3]);\r\n     * // => [2, 3]\r\n     */\r\n    function tail(array) {\r\n      var length = array == null ? 0 : array.length;\r\n      return length ? baseSlice(array, 1, length) : [];\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements taken from the beginning.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.take([1, 2, 3]);\r\n     * // => [1]\r\n     *\r\n     * _.take([1, 2, 3], 2);\r\n     * // => [1, 2]\r\n     *\r\n     * _.take([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.take([1, 2, 3], 0);\r\n     * // => []\r\n     */\r\n    function take(array, n, guard) {\r\n      if (!(array && array.length)) {\r\n        return [];\r\n      }\r\n      n = (guard || n === undefined) ? 1 : toInteger(n);\r\n      return baseSlice(array, 0, n < 0 ? 0 : n);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with `n` elements taken from the end.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {number} [n=1] The number of elements to take.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * _.takeRight([1, 2, 3]);\r\n     * // => [3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 2);\r\n     * // => [2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 5);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * _.takeRight([1, 2, 3], 0);\r\n     * // => []\r\n     */\r\n    function takeRight(array, n, guard) {\r\n      var length = array == null ? 0 : array.length;\r\n      if (!length) {\r\n        return [];\r\n      }\r\n      n = (guard || n === undefined) ? 1 : toInteger(n);\r\n      n = length - n;\r\n      return baseSlice(array, n < 0 ? 0 : n, length);\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with elements taken from the end. Elements are\r\n     * taken until `predicate` returns falsey. The predicate is invoked with\r\n     * three arguments: (value, index, array).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': true },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': false }\r\n     * ];\r\n     *\r\n     * _.takeRightWhile(users, function(o) { return !o.active; });\r\n     * // => objects for ['fred', 'pebbles']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\r\n     * // => objects for ['pebbles']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.takeRightWhile(users, ['active', false]);\r\n     * // => objects for ['fred', 'pebbles']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.takeRightWhile(users, 'active');\r\n     * // => []\r\n     */\r\n    function takeRightWhile(array, predicate) {\r\n      return (array && array.length)\r\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * Creates a slice of `array` with elements taken from the beginning. Elements\r\n     * are taken until `predicate` returns falsey. The predicate is invoked with\r\n     * three arguments: (value, index, array).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to query.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the slice of `array`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'active': false },\r\n     *   { 'user': 'fred',    'active': false },\r\n     *   { 'user': 'pebbles', 'active': true }\r\n     * ];\r\n     *\r\n     * _.takeWhile(users, function(o) { return !o.active; });\r\n     * // => objects for ['barney', 'fred']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.takeWhile(users, ['active', false]);\r\n     * // => objects for ['barney', 'fred']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.takeWhile(users, 'active');\r\n     * // => []\r\n     */\r\n    function takeWhile(array, predicate) {\r\n      return (array && array.length)\r\n        ? baseWhile(array, getIteratee(predicate, 3))\r\n        : [];\r\n    }\r\n\r\n    /**\r\n     * Creates an array of unique values, in order, from all given arrays using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of combined values.\r\n     * @example\r\n     *\r\n     * _.union([2], [1, 2]);\r\n     * // => [2, 1]\r\n     */\r\n    var union = baseRest(function(arrays) {\r\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.union` except that it accepts `iteratee` which is\r\n     * invoked for each element of each `arrays` to generate the criterion by\r\n     * which uniqueness is computed. Result values are chosen from the first\r\n     * array in which the value occurs. The iteratee is invoked with one argument:\r\n     * (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new array of combined values.\r\n     * @example\r\n     *\r\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\r\n     * // => [2.1, 1.2]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 1 }, { 'x': 2 }]\r\n     */\r\n    var unionBy = baseRest(function(arrays) {\r\n      var iteratee = last(arrays);\r\n      if (isArrayLikeObject(iteratee)) {\r\n        iteratee = undefined;\r\n      }\r\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.union` except that it accepts `comparator` which\r\n     * is invoked to compare elements of `arrays`. Result values are chosen from\r\n     * the first array in which the value occurs. The comparator is invoked\r\n     * with two arguments: (arrVal, othVal).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of combined values.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n     *\r\n     * _.unionWith(objects, others, _.isEqual);\r\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\r\n     */\r\n    var unionWith = baseRest(function(arrays) {\r\n      var comparator = last(arrays);\r\n      comparator = typeof comparator == 'function' ? comparator : undefined;\r\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\r\n    });\r\n\r\n    /**\r\n     * Creates a duplicate-free version of an array, using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons, in which only the first occurrence of each element\r\n     * is kept. The order of result values is determined by the order they occur\r\n     * in the array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.uniq([2, 1, 2]);\r\n     * // => [2, 1]\r\n     */\r\n    function uniq(array) {\r\n      return (array && array.length) ? baseUniq(array) : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the criterion by which\r\n     * uniqueness is computed. The order of result values is determined by the\r\n     * order they occur in the array. The iteratee is invoked with one argument:\r\n     * (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\r\n     * // => [2.1, 1.2]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 1 }, { 'x': 2 }]\r\n     */\r\n    function uniqBy(array, iteratee) {\r\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.uniq` except that it accepts `comparator` which\r\n     * is invoked to compare elements of `array`. The order of result values is\r\n     * determined by the order they occur in the array.The comparator is invoked\r\n     * with two arguments: (arrVal, othVal).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new duplicate free array.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n     *\r\n     * _.uniqWith(objects, _.isEqual);\r\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\r\n     */\r\n    function uniqWith(array, comparator) {\r\n      comparator = typeof comparator == 'function' ? comparator : undefined;\r\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.zip` except that it accepts an array of grouped\r\n     * elements and creates an array regrouping the elements to their pre-zip\r\n     * configuration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.2.0\r\n     * @category Array\r\n     * @param {Array} array The array of grouped elements to process.\r\n     * @returns {Array} Returns the new array of regrouped elements.\r\n     * @example\r\n     *\r\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\r\n     * // => [['a', 1, true], ['b', 2, false]]\r\n     *\r\n     * _.unzip(zipped);\r\n     * // => [['a', 'b'], [1, 2], [true, false]]\r\n     */\r\n    function unzip(array) {\r\n      if (!(array && array.length)) {\r\n        return [];\r\n      }\r\n      var length = 0;\r\n      array = arrayFilter(array, function(group) {\r\n        if (isArrayLikeObject(group)) {\r\n          length = nativeMax(group.length, length);\r\n          return true;\r\n        }\r\n      });\r\n      return baseTimes(length, function(index) {\r\n        return arrayMap(array, baseProperty(index));\r\n      });\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\r\n     * how regrouped values should be combined. The iteratee is invoked with the\r\n     * elements of each group: (...group).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.8.0\r\n     * @category Array\r\n     * @param {Array} array The array of grouped elements to process.\r\n     * @param {Function} [iteratee=_.identity] The function to combine\r\n     *  regrouped values.\r\n     * @returns {Array} Returns the new array of regrouped elements.\r\n     * @example\r\n     *\r\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\r\n     * // => [[1, 10, 100], [2, 20, 200]]\r\n     *\r\n     * _.unzipWith(zipped, _.add);\r\n     * // => [3, 30, 300]\r\n     */\r\n    function unzipWith(array, iteratee) {\r\n      if (!(array && array.length)) {\r\n        return [];\r\n      }\r\n      var result = unzip(array);\r\n      if (iteratee == null) {\r\n        return result;\r\n      }\r\n      return arrayMap(result, function(group) {\r\n        return apply(iteratee, undefined, group);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates an array excluding all given values using\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * for equality comparisons.\r\n     *\r\n     * **Note:** Unlike `_.pull`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {Array} array The array to inspect.\r\n     * @param {...*} [values] The values to exclude.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @see _.difference, _.xor\r\n     * @example\r\n     *\r\n     * _.without([2, 1, 2, 3], 1, 2);\r\n     * // => [3]\r\n     */\r\n    var without = baseRest(function(array, values) {\r\n      return isArrayLikeObject(array)\r\n        ? baseDifference(array, values)\r\n        : [];\r\n    });\r\n\r\n    /**\r\n     * Creates an array of unique values that is the\r\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\r\n     * of the given arrays. The order of result values is determined by the order\r\n     * they occur in the arrays.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @see _.difference, _.without\r\n     * @example\r\n     *\r\n     * _.xor([2, 1], [2, 3]);\r\n     * // => [1, 3]\r\n     */\r\n    var xor = baseRest(function(arrays) {\r\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.xor` except that it accepts `iteratee` which is\r\n     * invoked for each element of each `arrays` to generate the criterion by\r\n     * which by which they're compared. The order of result values is determined\r\n     * by the order they occur in the arrays. The iteratee is invoked with one\r\n     * argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n     * // => [1.2, 3.4]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\r\n     * // => [{ 'x': 2 }]\r\n     */\r\n    var xorBy = baseRest(function(arrays) {\r\n      var iteratee = last(arrays);\r\n      if (isArrayLikeObject(iteratee)) {\r\n        iteratee = undefined;\r\n      }\r\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.xor` except that it accepts `comparator` which is\r\n     * invoked to compare elements of `arrays`. The order of result values is\r\n     * determined by the order they occur in the arrays. The comparator is invoked\r\n     * with two arguments: (arrVal, othVal).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to inspect.\r\n     * @param {Function} [comparator] The comparator invoked per element.\r\n     * @returns {Array} Returns the new array of filtered values.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\r\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\r\n     *\r\n     * _.xorWith(objects, others, _.isEqual);\r\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\r\n     */\r\n    var xorWith = baseRest(function(arrays) {\r\n      var comparator = last(arrays);\r\n      comparator = typeof comparator == 'function' ? comparator : undefined;\r\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\r\n    });\r\n\r\n    /**\r\n     * Creates an array of grouped elements, the first of which contains the\r\n     * first elements of the given arrays, the second of which contains the\r\n     * second elements of the given arrays, and so on.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to process.\r\n     * @returns {Array} Returns the new array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\r\n     * // => [['a', 1, true], ['b', 2, false]]\r\n     */\r\n    var zip = baseRest(unzip);\r\n\r\n    /**\r\n     * This method is like `_.fromPairs` except that it accepts two arrays,\r\n     * one of property identifiers and one of corresponding values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.4.0\r\n     * @category Array\r\n     * @param {Array} [props=[]] The property identifiers.\r\n     * @param {Array} [values=[]] The property values.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * _.zipObject(['a', 'b'], [1, 2]);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    function zipObject(props, values) {\r\n      return baseZipObject(props || [], values || [], assignValue);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.zipObject` except that it supports property paths.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.1.0\r\n     * @category Array\r\n     * @param {Array} [props=[]] The property identifiers.\r\n     * @param {Array} [values=[]] The property values.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\r\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\r\n     */\r\n    function zipObjectDeep(props, values) {\r\n      return baseZipObject(props || [], values || [], baseSet);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\r\n     * how grouped values should be combined. The iteratee is invoked with the\r\n     * elements of each group: (...group).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.8.0\r\n     * @category Array\r\n     * @param {...Array} [arrays] The arrays to process.\r\n     * @param {Function} [iteratee=_.identity] The function to combine\r\n     *  grouped values.\r\n     * @returns {Array} Returns the new array of grouped elements.\r\n     * @example\r\n     *\r\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\r\n     *   return a + b + c;\r\n     * });\r\n     * // => [111, 222]\r\n     */\r\n    var zipWith = baseRest(function(arrays) {\r\n      var length = arrays.length,\r\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\r\n\r\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\r\n      return unzipWith(arrays, iteratee);\r\n    });\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\r\n     * chain sequences enabled. The result of such sequences must be unwrapped\r\n     * with `_#value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.3.0\r\n     * @category Seq\r\n     * @param {*} value The value to wrap.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36 },\r\n     *   { 'user': 'fred',    'age': 40 },\r\n     *   { 'user': 'pebbles', 'age': 1 }\r\n     * ];\r\n     *\r\n     * var youngest = _\r\n     *   .chain(users)\r\n     *   .sortBy('age')\r\n     *   .map(function(o) {\r\n     *     return o.user + ' is ' + o.age;\r\n     *   })\r\n     *   .head()\r\n     *   .value();\r\n     * // => 'pebbles is 1'\r\n     */\r\n    function chain(value) {\r\n      var result = lodash(value);\r\n      result.__chain__ = true;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * This method invokes `interceptor` and returns `value`. The interceptor\r\n     * is invoked with one argument; (value). The purpose of this method is to\r\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3])\r\n     *  .tap(function(array) {\r\n     *    // Mutate input array.\r\n     *    array.pop();\r\n     *  })\r\n     *  .reverse()\r\n     *  .value();\r\n     * // => [2, 1]\r\n     */\r\n    function tap(value, interceptor) {\r\n      interceptor(value);\r\n      return value;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\r\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\r\n     * results in a method chain sequence.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Seq\r\n     * @param {*} value The value to provide to `interceptor`.\r\n     * @param {Function} interceptor The function to invoke.\r\n     * @returns {*} Returns the result of `interceptor`.\r\n     * @example\r\n     *\r\n     * _('  abc  ')\r\n     *  .chain()\r\n     *  .trim()\r\n     *  .thru(function(value) {\r\n     *    return [value];\r\n     *  })\r\n     *  .value();\r\n     * // => ['abc']\r\n     */\r\n    function thru(value, interceptor) {\r\n      return interceptor(value);\r\n    }\r\n\r\n    /**\r\n     * This method is the wrapper version of `_.at`.\r\n     *\r\n     * @name at\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Seq\r\n     * @param {...(string|string[])} [paths] The property paths to pick.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\r\n     *\r\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\r\n     * // => [3, 4]\r\n     */\r\n    var wrapperAt = flatRest(function(paths) {\r\n      var length = paths.length,\r\n          start = length ? paths[0] : 0,\r\n          value = this.__wrapped__,\r\n          interceptor = function(object) { return baseAt(object, paths); };\r\n\r\n      if (length > 1 || this.__actions__.length ||\r\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\r\n        return this.thru(interceptor);\r\n      }\r\n      value = value.slice(start, +start + (length ? 1 : 0));\r\n      value.__actions__.push({\r\n        'func': thru,\r\n        'args': [interceptor],\r\n        'thisArg': undefined\r\n      });\r\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\r\n        if (length && !array.length) {\r\n          array.push(undefined);\r\n        }\r\n        return array;\r\n      });\r\n    });\r\n\r\n    /**\r\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\r\n     *\r\n     * @name chain\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 40 }\r\n     * ];\r\n     *\r\n     * // A sequence without explicit chaining.\r\n     * _(users).head();\r\n     * // => { 'user': 'barney', 'age': 36 }\r\n     *\r\n     * // A sequence with explicit chaining.\r\n     * _(users)\r\n     *   .chain()\r\n     *   .head()\r\n     *   .pick('user')\r\n     *   .value();\r\n     * // => { 'user': 'barney' }\r\n     */\r\n    function wrapperChain() {\r\n      return chain(this);\r\n    }\r\n\r\n    /**\r\n     * Executes the chain sequence and returns the wrapped result.\r\n     *\r\n     * @name commit\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2];\r\n     * var wrapped = _(array).push(3);\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2]\r\n     *\r\n     * wrapped = wrapped.commit();\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * wrapped.last();\r\n     * // => 3\r\n     *\r\n     * console.log(array);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function wrapperCommit() {\r\n      return new LodashWrapper(this.value(), this.__chain__);\r\n    }\r\n\r\n    /**\r\n     * Gets the next value on a wrapped object following the\r\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\r\n     *\r\n     * @name next\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the next iterator value.\r\n     * @example\r\n     *\r\n     * var wrapped = _([1, 2]);\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': false, 'value': 1 }\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': false, 'value': 2 }\r\n     *\r\n     * wrapped.next();\r\n     * // => { 'done': true, 'value': undefined }\r\n     */\r\n    function wrapperNext() {\r\n      if (this.__values__ === undefined) {\r\n        this.__values__ = toArray(this.value());\r\n      }\r\n      var done = this.__index__ >= this.__values__.length,\r\n          value = done ? undefined : this.__values__[this.__index__++];\r\n\r\n      return { 'done': done, 'value': value };\r\n    }\r\n\r\n    /**\r\n     * Enables the wrapper to be iterable.\r\n     *\r\n     * @name Symbol.iterator\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the wrapper object.\r\n     * @example\r\n     *\r\n     * var wrapped = _([1, 2]);\r\n     *\r\n     * wrapped[Symbol.iterator]() === wrapped;\r\n     * // => true\r\n     *\r\n     * Array.from(wrapped);\r\n     * // => [1, 2]\r\n     */\r\n    function wrapperToIterator() {\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\r\n     *\r\n     * @name plant\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Seq\r\n     * @param {*} value The value to plant.\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var wrapped = _([1, 2]).map(square);\r\n     * var other = wrapped.plant([3, 4]);\r\n     *\r\n     * other.value();\r\n     * // => [9, 16]\r\n     *\r\n     * wrapped.value();\r\n     * // => [1, 4]\r\n     */\r\n    function wrapperPlant(value) {\r\n      var result,\r\n          parent = this;\r\n\r\n      while (parent instanceof baseLodash) {\r\n        var clone = wrapperClone(parent);\r\n        clone.__index__ = 0;\r\n        clone.__values__ = undefined;\r\n        if (result) {\r\n          previous.__wrapped__ = clone;\r\n        } else {\r\n          result = clone;\r\n        }\r\n        var previous = clone;\r\n        parent = parent.__wrapped__;\r\n      }\r\n      previous.__wrapped__ = value;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * This method is the wrapper version of `_.reverse`.\r\n     *\r\n     * **Note:** This method mutates the wrapped array.\r\n     *\r\n     * @name reverse\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Seq\r\n     * @returns {Object} Returns the new `lodash` wrapper instance.\r\n     * @example\r\n     *\r\n     * var array = [1, 2, 3];\r\n     *\r\n     * _(array).reverse().value()\r\n     * // => [3, 2, 1]\r\n     *\r\n     * console.log(array);\r\n     * // => [3, 2, 1]\r\n     */\r\n    function wrapperReverse() {\r\n      var value = this.__wrapped__;\r\n      if (value instanceof LazyWrapper) {\r\n        var wrapped = value;\r\n        if (this.__actions__.length) {\r\n          wrapped = new LazyWrapper(this);\r\n        }\r\n        wrapped = wrapped.reverse();\r\n        wrapped.__actions__.push({\r\n          'func': thru,\r\n          'args': [reverse],\r\n          'thisArg': undefined\r\n        });\r\n        return new LodashWrapper(wrapped, this.__chain__);\r\n      }\r\n      return this.thru(reverse);\r\n    }\r\n\r\n    /**\r\n     * Executes the chain sequence to resolve the unwrapped value.\r\n     *\r\n     * @name value\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias toJSON, valueOf\r\n     * @category Seq\r\n     * @returns {*} Returns the resolved unwrapped value.\r\n     * @example\r\n     *\r\n     * _([1, 2, 3]).value();\r\n     * // => [1, 2, 3]\r\n     */\r\n    function wrapperValue() {\r\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` thru `iteratee`. The corresponding value of\r\n     * each key is the number of times the key was returned by `iteratee`. The\r\n     * iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\r\n     * // => { '4': 1, '6': 2 }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.countBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': 2, '5': 1 }\r\n     */\r\n    var countBy = createAggregator(function(result, value, key) {\r\n      if (hasOwnProperty.call(result, key)) {\r\n        ++result[key];\r\n      } else {\r\n        baseAssignValue(result, key, 1);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\r\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * **Note:** This method returns `true` for\r\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\r\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\r\n     * elements of empty collections.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.every([true, 1, null, 'yes'], Boolean);\r\n     * // => false\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.every(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.every(users, ['active', false]);\r\n     * // => true\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.every(users, 'active');\r\n     * // => false\r\n     */\r\n    function every(collection, predicate, guard) {\r\n      var func = isArray(collection) ? arrayEvery : baseEvery;\r\n      if (guard && isIterateeCall(collection, predicate, guard)) {\r\n        predicate = undefined;\r\n      }\r\n      return func(collection, getIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Iterates over elements of `collection`, returning an array of all elements\r\n     * `predicate` returns truthy for. The predicate is invoked with three\r\n     * arguments: (value, index|key, collection).\r\n     *\r\n     * **Note:** Unlike `_.remove`, this method returns a new array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @see _.reject\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * _.filter(users, function(o) { return !o.active; });\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.filter(users, { 'age': 36, 'active': true });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.filter(users, ['active', false]);\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.filter(users, 'active');\r\n     * // => objects for ['barney']\r\n     *\r\n     * // Combining several predicates using `_.overEvery` or `_.overSome`.\r\n     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\r\n     * // => objects for ['fred', 'barney']\r\n     */\r\n    function filter(collection, predicate) {\r\n      var func = isArray(collection) ? arrayFilter : baseFilter;\r\n      return func(collection, getIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Iterates over elements of `collection`, returning the first element\r\n     * `predicate` returns truthy for. The predicate is invoked with three\r\n     * arguments: (value, index|key, collection).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36, 'active': true },\r\n     *   { 'user': 'fred',    'age': 40, 'active': false },\r\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\r\n     * ];\r\n     *\r\n     * _.find(users, function(o) { return o.age < 40; });\r\n     * // => object for 'barney'\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.find(users, { 'age': 1, 'active': true });\r\n     * // => object for 'pebbles'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.find(users, ['active', false]);\r\n     * // => object for 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.find(users, 'active');\r\n     * // => object for 'barney'\r\n     */\r\n    var find = createFind(findIndex);\r\n\r\n    /**\r\n     * This method is like `_.find` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\r\n     * @returns {*} Returns the matched element, else `undefined`.\r\n     * @example\r\n     *\r\n     * _.findLast([1, 2, 3, 4], function(n) {\r\n     *   return n % 2 == 1;\r\n     * });\r\n     * // => 3\r\n     */\r\n    var findLast = createFind(findLastIndex);\r\n\r\n    /**\r\n     * Creates a flattened array of values by running each element in `collection`\r\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\r\n     * with three arguments: (value, index|key, collection).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * function duplicate(n) {\r\n     *   return [n, n];\r\n     * }\r\n     *\r\n     * _.flatMap([1, 2], duplicate);\r\n     * // => [1, 1, 2, 2]\r\n     */\r\n    function flatMap(collection, iteratee) {\r\n      return baseFlatten(map(collection, iteratee), 1);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.flatMap` except that it recursively flattens the\r\n     * mapped results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.7.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * function duplicate(n) {\r\n     *   return [[[n, n]]];\r\n     * }\r\n     *\r\n     * _.flatMapDeep([1, 2], duplicate);\r\n     * // => [1, 1, 2, 2]\r\n     */\r\n    function flatMapDeep(collection, iteratee) {\r\n      return baseFlatten(map(collection, iteratee), INFINITY);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.flatMap` except that it recursively flattens the\r\n     * mapped results up to `depth` times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.7.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {number} [depth=1] The maximum recursion depth.\r\n     * @returns {Array} Returns the new flattened array.\r\n     * @example\r\n     *\r\n     * function duplicate(n) {\r\n     *   return [[[n, n]]];\r\n     * }\r\n     *\r\n     * _.flatMapDepth([1, 2], duplicate, 2);\r\n     * // => [[1, 1], [2, 2]]\r\n     */\r\n    function flatMapDepth(collection, iteratee, depth) {\r\n      depth = depth === undefined ? 1 : toInteger(depth);\r\n      return baseFlatten(map(collection, iteratee), depth);\r\n    }\r\n\r\n    /**\r\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\r\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\r\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\r\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\r\n     * or `_.forOwn` for object iteration.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @alias each\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     * @see _.forEachRight\r\n     * @example\r\n     *\r\n     * _.forEach([1, 2], function(value) {\r\n     *   console.log(value);\r\n     * });\r\n     * // => Logs `1` then `2`.\r\n     *\r\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\r\n     */\r\n    function forEach(collection, iteratee) {\r\n      var func = isArray(collection) ? arrayEach : baseEach;\r\n      return func(collection, getIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.forEach` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @alias eachRight\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array|Object} Returns `collection`.\r\n     * @see _.forEach\r\n     * @example\r\n     *\r\n     * _.forEachRight([1, 2], function(value) {\r\n     *   console.log(value);\r\n     * });\r\n     * // => Logs `2` then `1`.\r\n     */\r\n    function forEachRight(collection, iteratee) {\r\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\r\n      return func(collection, getIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` thru `iteratee`. The order of grouped values\r\n     * is determined by the order they occur in `collection`. The corresponding\r\n     * value of each key is an array of elements responsible for generating the\r\n     * key. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\r\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.groupBy(['one', 'two', 'three'], 'length');\r\n     * // => { '3': ['one', 'two'], '5': ['three'] }\r\n     */\r\n    var groupBy = createAggregator(function(result, value, key) {\r\n      if (hasOwnProperty.call(result, key)) {\r\n        result[key].push(value);\r\n      } else {\r\n        baseAssignValue(result, key, [value]);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n    /**\r\n     * Invokes the method at `path` of each element in `collection`, returning\r\n     * an array of the results of each invoked method. Any additional arguments\r\n     * are provided to each invoked method. If `path` is a function, it's invoked\r\n     * for, and `this` bound to, each element in `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Array|Function|string} path The path of the method to invoke or\r\n     *  the function invoked per iteration.\r\n     * @param {...*} [args] The arguments to invoke each method with.\r\n     * @returns {Array} Returns the array of results.\r\n     * @example\r\n     *\r\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\r\n     * // => [[1, 5, 7], [1, 2, 3]]\r\n     *\r\n     * _.invokeMap([123, 456], String.prototype.split, '');\r\n     * // => [['1', '2', '3'], ['4', '5', '6']]\r\n     */\r\n    var invokeMap = baseRest(function(collection, path, args) {\r\n      var index = -1,\r\n          isFunc = typeof path == 'function',\r\n          result = isArrayLike(collection) ? Array(collection.length) : [];\r\n\r\n      baseEach(collection, function(value) {\r\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\r\n      });\r\n      return result;\r\n    });\r\n\r\n    /**\r\n     * Creates an object composed of keys generated from the results of running\r\n     * each element of `collection` thru `iteratee`. The corresponding value of\r\n     * each key is the last element responsible for generating the key. The\r\n     * iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\r\n     * @returns {Object} Returns the composed aggregate object.\r\n     * @example\r\n     *\r\n     * var array = [\r\n     *   { 'dir': 'left', 'code': 97 },\r\n     *   { 'dir': 'right', 'code': 100 }\r\n     * ];\r\n     *\r\n     * _.keyBy(array, function(o) {\r\n     *   return String.fromCharCode(o.code);\r\n     * });\r\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\r\n     *\r\n     * _.keyBy(array, 'dir');\r\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\r\n     */\r\n    var keyBy = createAggregator(function(result, value, key) {\r\n      baseAssignValue(result, key, value);\r\n    });\r\n\r\n    /**\r\n     * Creates an array of values by running each element in `collection` thru\r\n     * `iteratee`. The iteratee is invoked with three arguments:\r\n     * (value, index|key, collection).\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\r\n     *\r\n     * The guarded methods are:\r\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\r\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\r\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\r\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new mapped array.\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * _.map([4, 8], square);\r\n     * // => [16, 64]\r\n     *\r\n     * _.map({ 'a': 4, 'b': 8 }, square);\r\n     * // => [16, 64] (iteration order is not guaranteed)\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney' },\r\n     *   { 'user': 'fred' }\r\n     * ];\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.map(users, 'user');\r\n     * // => ['barney', 'fred']\r\n     */\r\n    function map(collection, iteratee) {\r\n      var func = isArray(collection) ? arrayMap : baseMap;\r\n      return func(collection, getIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.sortBy` except that it allows specifying the sort\r\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\r\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\r\n     * descending or \"asc\" for ascending sort order of corresponding values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\r\n     *  The iteratees to sort by.\r\n     * @param {string[]} [orders] The sort orders of `iteratees`.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred',   'age': 48 },\r\n     *   { 'user': 'barney', 'age': 34 },\r\n     *   { 'user': 'fred',   'age': 40 },\r\n     *   { 'user': 'barney', 'age': 36 }\r\n     * ];\r\n     *\r\n     * // Sort by `user` in ascending order and by `age` in descending order.\r\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\r\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\r\n     */\r\n    function orderBy(collection, iteratees, orders, guard) {\r\n      if (collection == null) {\r\n        return [];\r\n      }\r\n      if (!isArray(iteratees)) {\r\n        iteratees = iteratees == null ? [] : [iteratees];\r\n      }\r\n      orders = guard ? undefined : orders;\r\n      if (!isArray(orders)) {\r\n        orders = orders == null ? [] : [orders];\r\n      }\r\n      return baseOrderBy(collection, iteratees, orders);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of elements split into two groups, the first of which\r\n     * contains elements `predicate` returns truthy for, the second of which\r\n     * contains elements `predicate` returns falsey for. The predicate is\r\n     * invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the array of grouped elements.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney',  'age': 36, 'active': false },\r\n     *   { 'user': 'fred',    'age': 40, 'active': true },\r\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\r\n     * ];\r\n     *\r\n     * _.partition(users, function(o) { return o.active; });\r\n     * // => objects for [['fred'], ['barney', 'pebbles']]\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.partition(users, { 'age': 1, 'active': false });\r\n     * // => objects for [['pebbles'], ['barney', 'fred']]\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.partition(users, ['active', false]);\r\n     * // => objects for [['barney', 'pebbles'], ['fred']]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.partition(users, 'active');\r\n     * // => objects for [['fred'], ['barney', 'pebbles']]\r\n     */\r\n    var partition = createAggregator(function(result, value, key) {\r\n      result[key ? 0 : 1].push(value);\r\n    }, function() { return [[], []]; });\r\n\r\n    /**\r\n     * Reduces `collection` to a value which is the accumulated result of running\r\n     * each element in `collection` thru `iteratee`, where each successive\r\n     * invocation is supplied the return value of the previous. If `accumulator`\r\n     * is not given, the first element of `collection` is used as the initial\r\n     * value. The iteratee is invoked with four arguments:\r\n     * (accumulator, value, index|key, collection).\r\n     *\r\n     * Many lodash methods are guarded to work as iteratees for methods like\r\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\r\n     *\r\n     * The guarded methods are:\r\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\r\n     * and `sortBy`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @see _.reduceRight\r\n     * @example\r\n     *\r\n     * _.reduce([1, 2], function(sum, n) {\r\n     *   return sum + n;\r\n     * }, 0);\r\n     * // => 3\r\n     *\r\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n     *   (result[value] || (result[value] = [])).push(key);\r\n     *   return result;\r\n     * }, {});\r\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\r\n     */\r\n    function reduce(collection, iteratee, accumulator) {\r\n      var func = isArray(collection) ? arrayReduce : baseReduce,\r\n          initAccum = arguments.length < 3;\r\n\r\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.reduce` except that it iterates over elements of\r\n     * `collection` from right to left.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The initial value.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @see _.reduce\r\n     * @example\r\n     *\r\n     * var array = [[0, 1], [2, 3], [4, 5]];\r\n     *\r\n     * _.reduceRight(array, function(flattened, other) {\r\n     *   return flattened.concat(other);\r\n     * }, []);\r\n     * // => [4, 5, 2, 3, 0, 1]\r\n     */\r\n    function reduceRight(collection, iteratee, accumulator) {\r\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\r\n          initAccum = arguments.length < 3;\r\n\r\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\r\n    }\r\n\r\n    /**\r\n     * The opposite of `_.filter`; this method returns the elements of `collection`\r\n     * that `predicate` does **not** return truthy for.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the new filtered array.\r\n     * @see _.filter\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': false },\r\n     *   { 'user': 'fred',   'age': 40, 'active': true }\r\n     * ];\r\n     *\r\n     * _.reject(users, function(o) { return !o.active; });\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.reject(users, { 'age': 40, 'active': true });\r\n     * // => objects for ['barney']\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.reject(users, ['active', false]);\r\n     * // => objects for ['fred']\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.reject(users, 'active');\r\n     * // => objects for ['barney']\r\n     */\r\n    function reject(collection, predicate) {\r\n      var func = isArray(collection) ? arrayFilter : baseFilter;\r\n      return func(collection, negate(getIteratee(predicate, 3)));\r\n    }\r\n\r\n    /**\r\n     * Gets a random element from `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to sample.\r\n     * @returns {*} Returns the random element.\r\n     * @example\r\n     *\r\n     * _.sample([1, 2, 3, 4]);\r\n     * // => 2\r\n     */\r\n    function sample(collection) {\r\n      var func = isArray(collection) ? arraySample : baseSample;\r\n      return func(collection);\r\n    }\r\n\r\n    /**\r\n     * Gets `n` random elements at unique keys from `collection` up to the\r\n     * size of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to sample.\r\n     * @param {number} [n=1] The number of elements to sample.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the random elements.\r\n     * @example\r\n     *\r\n     * _.sampleSize([1, 2, 3], 2);\r\n     * // => [3, 1]\r\n     *\r\n     * _.sampleSize([1, 2, 3], 4);\r\n     * // => [2, 3, 1]\r\n     */\r\n    function sampleSize(collection, n, guard) {\r\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\r\n        n = 1;\r\n      } else {\r\n        n = toInteger(n);\r\n      }\r\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\r\n      return func(collection, n);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of shuffled values, using a version of the\r\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to shuffle.\r\n     * @returns {Array} Returns the new shuffled array.\r\n     * @example\r\n     *\r\n     * _.shuffle([1, 2, 3, 4]);\r\n     * // => [4, 1, 3, 2]\r\n     */\r\n    function shuffle(collection) {\r\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\r\n      return func(collection);\r\n    }\r\n\r\n    /**\r\n     * Gets the size of `collection` by returning its length for array-like\r\n     * values or the number of own enumerable string keyed properties for objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @returns {number} Returns the collection size.\r\n     * @example\r\n     *\r\n     * _.size([1, 2, 3]);\r\n     * // => 3\r\n     *\r\n     * _.size({ 'a': 1, 'b': 2 });\r\n     * // => 2\r\n     *\r\n     * _.size('pebbles');\r\n     * // => 7\r\n     */\r\n    function size(collection) {\r\n      if (collection == null) {\r\n        return 0;\r\n      }\r\n      if (isArrayLike(collection)) {\r\n        return isString(collection) ? stringSize(collection) : collection.length;\r\n      }\r\n      var tag = getTag(collection);\r\n      if (tag == mapTag || tag == setTag) {\r\n        return collection.size;\r\n      }\r\n      return baseKeys(collection).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\r\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\r\n     * invoked with three arguments: (value, index|key, collection).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.some([null, 0, 'yes', false], Boolean);\r\n     * // => true\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'active': true },\r\n     *   { 'user': 'fred',   'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.some(users, { 'user': 'barney', 'active': false });\r\n     * // => false\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.some(users, ['active', false]);\r\n     * // => true\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.some(users, 'active');\r\n     * // => true\r\n     */\r\n    function some(collection, predicate, guard) {\r\n      var func = isArray(collection) ? arraySome : baseSome;\r\n      if (guard && isIterateeCall(collection, predicate, guard)) {\r\n        predicate = undefined;\r\n      }\r\n      return func(collection, getIteratee(predicate, 3));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of elements, sorted in ascending order by the results of\r\n     * running each element in a collection thru each iteratee. This method\r\n     * performs a stable sort, that is, it preserves the original sort order of\r\n     * equal elements. The iteratees are invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object} collection The collection to iterate over.\r\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\r\n     *  The iteratees to sort by.\r\n     * @returns {Array} Returns the new sorted array.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'fred',   'age': 48 },\r\n     *   { 'user': 'barney', 'age': 36 },\r\n     *   { 'user': 'fred',   'age': 30 },\r\n     *   { 'user': 'barney', 'age': 34 }\r\n     * ];\r\n     *\r\n     * _.sortBy(users, [function(o) { return o.user; }]);\r\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\r\n     *\r\n     * _.sortBy(users, ['user', 'age']);\r\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\r\n     */\r\n    var sortBy = baseRest(function(collection, iteratees) {\r\n      if (collection == null) {\r\n        return [];\r\n      }\r\n      var length = iteratees.length;\r\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\r\n        iteratees = [];\r\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\r\n        iteratees = [iteratees[0]];\r\n      }\r\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\r\n    });\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Gets the timestamp of the number of milliseconds that have elapsed since\r\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Date\r\n     * @returns {number} Returns the timestamp.\r\n     * @example\r\n     *\r\n     * _.defer(function(stamp) {\r\n     *   console.log(_.now() - stamp);\r\n     * }, _.now());\r\n     * // => Logs the number of milliseconds it took for the deferred invocation.\r\n     */\r\n    var now = ctxNow || function() {\r\n      return root.Date.now();\r\n    };\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The opposite of `_.before`; this method creates a function that invokes\r\n     * `func` once it's called `n` or more times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {number} n The number of calls before `func` is invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var saves = ['profile', 'settings'];\r\n     *\r\n     * var done = _.after(saves.length, function() {\r\n     *   console.log('done saving!');\r\n     * });\r\n     *\r\n     * _.forEach(saves, function(type) {\r\n     *   asyncSave({ 'type': type, 'complete': done });\r\n     * });\r\n     * // => Logs 'done saving!' after the two async saves have completed.\r\n     */\r\n    function after(n, func) {\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      n = toInteger(n);\r\n      return function() {\r\n        if (--n < 1) {\r\n          return func.apply(this, arguments);\r\n        }\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func`, with up to `n` arguments,\r\n     * ignoring any additional arguments.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to cap arguments for.\r\n     * @param {number} [n=func.length] The arity cap.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Function} Returns the new capped function.\r\n     * @example\r\n     *\r\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\r\n     * // => [6, 8, 10]\r\n     */\r\n    function ary(func, n, guard) {\r\n      n = guard ? undefined : n;\r\n      n = (func && n == null) ? func.length : n;\r\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func`, with the `this` binding and arguments\r\n     * of the created function, while it's called less than `n` times. Subsequent\r\n     * calls to the created function return the result of the last `func` invocation.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {number} n The number of calls at which `func` is no longer invoked.\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * jQuery(element).on('click', _.before(5, addContactToList));\r\n     * // => Allows adding up to 4 contacts to the list.\r\n     */\r\n    function before(n, func) {\r\n      var result;\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      n = toInteger(n);\r\n      return function() {\r\n        if (--n > 0) {\r\n          result = func.apply(this, arguments);\r\n        }\r\n        if (n <= 1) {\r\n          func = undefined;\r\n        }\r\n        return result;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\r\n     * and `partials` prepended to the arguments it receives.\r\n     *\r\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\r\n     * may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\r\n     * property of bound functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to bind.\r\n     * @param {*} thisArg The `this` binding of `func`.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new bound function.\r\n     * @example\r\n     *\r\n     * function greet(greeting, punctuation) {\r\n     *   return greeting + ' ' + this.user + punctuation;\r\n     * }\r\n     *\r\n     * var object = { 'user': 'fred' };\r\n     *\r\n     * var bound = _.bind(greet, object, 'hi');\r\n     * bound('!');\r\n     * // => 'hi fred!'\r\n     *\r\n     * // Bound with placeholders.\r\n     * var bound = _.bind(greet, object, _, '!');\r\n     * bound('hi');\r\n     * // => 'hi fred!'\r\n     */\r\n    var bind = baseRest(function(func, thisArg, partials) {\r\n      var bitmask = WRAP_BIND_FLAG;\r\n      if (partials.length) {\r\n        var holders = replaceHolders(partials, getHolder(bind));\r\n        bitmask |= WRAP_PARTIAL_FLAG;\r\n      }\r\n      return createWrap(func, bitmask, thisArg, partials, holders);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that invokes the method at `object[key]` with `partials`\r\n     * prepended to the arguments it receives.\r\n     *\r\n     * This method differs from `_.bind` by allowing bound functions to reference\r\n     * methods that may be redefined or don't yet exist. See\r\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\r\n     * for more details.\r\n     *\r\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.10.0\r\n     * @category Function\r\n     * @param {Object} object The object to invoke the method on.\r\n     * @param {string} key The key of the method.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new bound function.\r\n     * @example\r\n     *\r\n     * var object = {\r\n     *   'user': 'fred',\r\n     *   'greet': function(greeting, punctuation) {\r\n     *     return greeting + ' ' + this.user + punctuation;\r\n     *   }\r\n     * };\r\n     *\r\n     * var bound = _.bindKey(object, 'greet', 'hi');\r\n     * bound('!');\r\n     * // => 'hi fred!'\r\n     *\r\n     * object.greet = function(greeting, punctuation) {\r\n     *   return greeting + 'ya ' + this.user + punctuation;\r\n     * };\r\n     *\r\n     * bound('!');\r\n     * // => 'hiya fred!'\r\n     *\r\n     * // Bound with placeholders.\r\n     * var bound = _.bindKey(object, 'greet', _, '!');\r\n     * bound('hi');\r\n     * // => 'hiya fred!'\r\n     */\r\n    var bindKey = baseRest(function(object, key, partials) {\r\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\r\n      if (partials.length) {\r\n        var holders = replaceHolders(partials, getHolder(bindKey));\r\n        bitmask |= WRAP_PARTIAL_FLAG;\r\n      }\r\n      return createWrap(key, bitmask, object, partials, holders);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that accepts arguments of `func` and either invokes\r\n     * `func` returning its result, if at least `arity` number of arguments have\r\n     * been provided, or returns a function that accepts the remaining `func`\r\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\r\n     * is not sufficient.\r\n     *\r\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\r\n     * may be used as a placeholder for provided arguments.\r\n     *\r\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to curry.\r\n     * @param {number} [arity=func.length] The arity of `func`.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Function} Returns the new curried function.\r\n     * @example\r\n     *\r\n     * var abc = function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * };\r\n     *\r\n     * var curried = _.curry(abc);\r\n     *\r\n     * curried(1)(2)(3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2)(3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2, 3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * // Curried with placeholders.\r\n     * curried(1)(_, 3)(2);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function curry(func, arity, guard) {\r\n      arity = guard ? undefined : arity;\r\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\r\n      result.placeholder = curry.placeholder;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.curry` except that arguments are applied to `func`\r\n     * in the manner of `_.partialRight` instead of `_.partial`.\r\n     *\r\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for provided arguments.\r\n     *\r\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to curry.\r\n     * @param {number} [arity=func.length] The arity of `func`.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Function} Returns the new curried function.\r\n     * @example\r\n     *\r\n     * var abc = function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * };\r\n     *\r\n     * var curried = _.curryRight(abc);\r\n     *\r\n     * curried(3)(2)(1);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(2, 3)(1);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * curried(1, 2, 3);\r\n     * // => [1, 2, 3]\r\n     *\r\n     * // Curried with placeholders.\r\n     * curried(3)(1, _)(2);\r\n     * // => [1, 2, 3]\r\n     */\r\n    function curryRight(func, arity, guard) {\r\n      arity = guard ? undefined : arity;\r\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\r\n      result.placeholder = curryRight.placeholder;\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a debounced function that delays invoking `func` until after `wait`\r\n     * milliseconds have elapsed since the last time the debounced function was\r\n     * invoked. The debounced function comes with a `cancel` method to cancel\r\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n     * Provide `options` to indicate whether `func` should be invoked on the\r\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n     * with the last arguments provided to the debounced function. Subsequent\r\n     * calls to the debounced function return the result of the last `func`\r\n     * invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the debounced function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.debounce` and `_.throttle`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to debounce.\r\n     * @param {number} [wait=0] The number of milliseconds to delay.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=false]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {number} [options.maxWait]\r\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new debounced function.\r\n     * @example\r\n     *\r\n     * // Avoid costly calculations while the window size is in flux.\r\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n     *\r\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n     *   'leading': true,\r\n     *   'trailing': false\r\n     * }));\r\n     *\r\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n     * var source = new EventSource('/stream');\r\n     * jQuery(source).on('message', debounced);\r\n     *\r\n     * // Cancel the trailing debounced invocation.\r\n     * jQuery(window).on('popstate', debounced.cancel);\r\n     */\r\n    function debounce(func, wait, options) {\r\n      var lastArgs,\r\n          lastThis,\r\n          maxWait,\r\n          result,\r\n          timerId,\r\n          lastCallTime,\r\n          lastInvokeTime = 0,\r\n          leading = false,\r\n          maxing = false,\r\n          trailing = true;\r\n\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      wait = toNumber(wait) || 0;\r\n      if (isObject(options)) {\r\n        leading = !!options.leading;\r\n        maxing = 'maxWait' in options;\r\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n      }\r\n\r\n      function invokeFunc(time) {\r\n        var args = lastArgs,\r\n            thisArg = lastThis;\r\n\r\n        lastArgs = lastThis = undefined;\r\n        lastInvokeTime = time;\r\n        result = func.apply(thisArg, args);\r\n        return result;\r\n      }\r\n\r\n      function leadingEdge(time) {\r\n        // Reset any `maxWait` timer.\r\n        lastInvokeTime = time;\r\n        // Start the timer for the trailing edge.\r\n        timerId = setTimeout(timerExpired, wait);\r\n        // Invoke the leading edge.\r\n        return leading ? invokeFunc(time) : result;\r\n      }\r\n\r\n      function remainingWait(time) {\r\n        var timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime,\r\n            timeWaiting = wait - timeSinceLastCall;\r\n\r\n        return maxing\r\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\r\n          : timeWaiting;\r\n      }\r\n\r\n      function shouldInvoke(time) {\r\n        var timeSinceLastCall = time - lastCallTime,\r\n            timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n        // Either this is the first call, activity has stopped and we're at the\r\n        // trailing edge, the system time has gone backwards and we're treating\r\n        // it as the trailing edge, or we've hit the `maxWait` limit.\r\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n      }\r\n\r\n      function timerExpired() {\r\n        var time = now();\r\n        if (shouldInvoke(time)) {\r\n          return trailingEdge(time);\r\n        }\r\n        // Restart the timer.\r\n        timerId = setTimeout(timerExpired, remainingWait(time));\r\n      }\r\n\r\n      function trailingEdge(time) {\r\n        timerId = undefined;\r\n\r\n        // Only invoke if we have `lastArgs` which means `func` has been\r\n        // debounced at least once.\r\n        if (trailing && lastArgs) {\r\n          return invokeFunc(time);\r\n        }\r\n        lastArgs = lastThis = undefined;\r\n        return result;\r\n      }\r\n\r\n      function cancel() {\r\n        if (timerId !== undefined) {\r\n          clearTimeout(timerId);\r\n        }\r\n        lastInvokeTime = 0;\r\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n      }\r\n\r\n      function flush() {\r\n        return timerId === undefined ? result : trailingEdge(now());\r\n      }\r\n\r\n      function debounced() {\r\n        var time = now(),\r\n            isInvoking = shouldInvoke(time);\r\n\r\n        lastArgs = arguments;\r\n        lastThis = this;\r\n        lastCallTime = time;\r\n\r\n        if (isInvoking) {\r\n          if (timerId === undefined) {\r\n            return leadingEdge(lastCallTime);\r\n          }\r\n          if (maxing) {\r\n            // Handle invocations in a tight loop.\r\n            clearTimeout(timerId);\r\n            timerId = setTimeout(timerExpired, wait);\r\n            return invokeFunc(lastCallTime);\r\n          }\r\n        }\r\n        if (timerId === undefined) {\r\n          timerId = setTimeout(timerExpired, wait);\r\n        }\r\n        return result;\r\n      }\r\n      debounced.cancel = cancel;\r\n      debounced.flush = flush;\r\n      return debounced;\r\n    }\r\n\r\n    /**\r\n     * Defers invoking the `func` until the current call stack has cleared. Any\r\n     * additional arguments are provided to `func` when it's invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to defer.\r\n     * @param {...*} [args] The arguments to invoke `func` with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.defer(function(text) {\r\n     *   console.log(text);\r\n     * }, 'deferred');\r\n     * // => Logs 'deferred' after one millisecond.\r\n     */\r\n    var defer = baseRest(function(func, args) {\r\n      return baseDelay(func, 1, args);\r\n    });\r\n\r\n    /**\r\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n     * provided to `func` when it's invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to delay.\r\n     * @param {number} wait The number of milliseconds to delay invocation.\r\n     * @param {...*} [args] The arguments to invoke `func` with.\r\n     * @returns {number} Returns the timer id.\r\n     * @example\r\n     *\r\n     * _.delay(function(text) {\r\n     *   console.log(text);\r\n     * }, 1000, 'later');\r\n     * // => Logs 'later' after one second.\r\n     */\r\n    var delay = baseRest(function(func, wait, args) {\r\n      return baseDelay(func, toNumber(wait) || 0, args);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with arguments reversed.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to flip arguments for.\r\n     * @returns {Function} Returns the new flipped function.\r\n     * @example\r\n     *\r\n     * var flipped = _.flip(function() {\r\n     *   return _.toArray(arguments);\r\n     * });\r\n     *\r\n     * flipped('a', 'b', 'c', 'd');\r\n     * // => ['d', 'c', 'b', 'a']\r\n     */\r\n    function flip(func) {\r\n      return createWrap(func, WRAP_FLIP_FLAG);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that memoizes the result of `func`. If `resolver` is\r\n     * provided, it determines the cache key for storing the result based on the\r\n     * arguments provided to the memoized function. By default, the first argument\r\n     * provided to the memoized function is used as the map cache key. The `func`\r\n     * is invoked with the `this` binding of the memoized function.\r\n     *\r\n     * **Note:** The cache is exposed as the `cache` property on the memoized\r\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\r\n     * constructor with one whose instances implement the\r\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\r\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to have its output memoized.\r\n     * @param {Function} [resolver] The function to resolve the cache key.\r\n     * @returns {Function} Returns the new memoized function.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2 };\r\n     * var other = { 'c': 3, 'd': 4 };\r\n     *\r\n     * var values = _.memoize(_.values);\r\n     * values(object);\r\n     * // => [1, 2]\r\n     *\r\n     * values(other);\r\n     * // => [3, 4]\r\n     *\r\n     * object.a = 2;\r\n     * values(object);\r\n     * // => [1, 2]\r\n     *\r\n     * // Modify the result cache.\r\n     * values.cache.set(object, ['a', 'b']);\r\n     * values(object);\r\n     * // => ['a', 'b']\r\n     *\r\n     * // Replace `_.memoize.Cache`.\r\n     * _.memoize.Cache = WeakMap;\r\n     */\r\n    function memoize(func, resolver) {\r\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      var memoized = function() {\r\n        var args = arguments,\r\n            key = resolver ? resolver.apply(this, args) : args[0],\r\n            cache = memoized.cache;\r\n\r\n        if (cache.has(key)) {\r\n          return cache.get(key);\r\n        }\r\n        var result = func.apply(this, args);\r\n        memoized.cache = cache.set(key, result) || cache;\r\n        return result;\r\n      };\r\n      memoized.cache = new (memoize.Cache || MapCache);\r\n      return memoized;\r\n    }\r\n\r\n    // Expose `MapCache`.\r\n    memoize.Cache = MapCache;\r\n\r\n    /**\r\n     * Creates a function that negates the result of the predicate `func`. The\r\n     * `func` predicate is invoked with the `this` binding and arguments of the\r\n     * created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {Function} predicate The predicate to negate.\r\n     * @returns {Function} Returns the new negated function.\r\n     * @example\r\n     *\r\n     * function isEven(n) {\r\n     *   return n % 2 == 0;\r\n     * }\r\n     *\r\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\r\n     * // => [1, 3, 5]\r\n     */\r\n    function negate(predicate) {\r\n      if (typeof predicate != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      return function() {\r\n        var args = arguments;\r\n        switch (args.length) {\r\n          case 0: return !predicate.call(this);\r\n          case 1: return !predicate.call(this, args[0]);\r\n          case 2: return !predicate.call(this, args[0], args[1]);\r\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\r\n        }\r\n        return !predicate.apply(this, args);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\r\n     * to the function return the value of the first invocation. The `func` is\r\n     * invoked with the `this` binding and arguments of the created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to restrict.\r\n     * @returns {Function} Returns the new restricted function.\r\n     * @example\r\n     *\r\n     * var initialize = _.once(createApplication);\r\n     * initialize();\r\n     * initialize();\r\n     * // => `createApplication` is invoked once\r\n     */\r\n    function once(func) {\r\n      return before(2, func);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with its arguments transformed.\r\n     *\r\n     * @static\r\n     * @since 4.0.0\r\n     * @memberOf _\r\n     * @category Function\r\n     * @param {Function} func The function to wrap.\r\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\r\n     *  The argument transforms.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * function doubled(n) {\r\n     *   return n * 2;\r\n     * }\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var func = _.overArgs(function(x, y) {\r\n     *   return [x, y];\r\n     * }, [square, doubled]);\r\n     *\r\n     * func(9, 3);\r\n     * // => [81, 6]\r\n     *\r\n     * func(10, 5);\r\n     * // => [100, 10]\r\n     */\r\n    var overArgs = castRest(function(func, transforms) {\r\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\r\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\r\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\r\n\r\n      var funcsLength = transforms.length;\r\n      return baseRest(function(args) {\r\n        var index = -1,\r\n            length = nativeMin(args.length, funcsLength);\r\n\r\n        while (++index < length) {\r\n          args[index] = transforms[index].call(this, args[index]);\r\n        }\r\n        return apply(func, this, args);\r\n      });\r\n    });\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with `partials` prepended to the\r\n     * arguments it receives. This method is like `_.bind` except it does **not**\r\n     * alter the `this` binding.\r\n     *\r\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** This method doesn't set the \"length\" property of partially\r\n     * applied functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.2.0\r\n     * @category Function\r\n     * @param {Function} func The function to partially apply arguments to.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new partially applied function.\r\n     * @example\r\n     *\r\n     * function greet(greeting, name) {\r\n     *   return greeting + ' ' + name;\r\n     * }\r\n     *\r\n     * var sayHelloTo = _.partial(greet, 'hello');\r\n     * sayHelloTo('fred');\r\n     * // => 'hello fred'\r\n     *\r\n     * // Partially applied with placeholders.\r\n     * var greetFred = _.partial(greet, _, 'fred');\r\n     * greetFred('hi');\r\n     * // => 'hi fred'\r\n     */\r\n    var partial = baseRest(function(func, partials) {\r\n      var holders = replaceHolders(partials, getHolder(partial));\r\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.partial` except that partially applied arguments\r\n     * are appended to the arguments it receives.\r\n     *\r\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\r\n     * builds, may be used as a placeholder for partially applied arguments.\r\n     *\r\n     * **Note:** This method doesn't set the \"length\" property of partially\r\n     * applied functions.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to partially apply arguments to.\r\n     * @param {...*} [partials] The arguments to be partially applied.\r\n     * @returns {Function} Returns the new partially applied function.\r\n     * @example\r\n     *\r\n     * function greet(greeting, name) {\r\n     *   return greeting + ' ' + name;\r\n     * }\r\n     *\r\n     * var greetFred = _.partialRight(greet, 'fred');\r\n     * greetFred('hi');\r\n     * // => 'hi fred'\r\n     *\r\n     * // Partially applied with placeholders.\r\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\r\n     * sayHelloTo('fred');\r\n     * // => 'hello fred'\r\n     */\r\n    var partialRight = baseRest(function(func, partials) {\r\n      var holders = replaceHolders(partials, getHolder(partialRight));\r\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with arguments arranged according\r\n     * to the specified `indexes` where the argument value at the first index is\r\n     * provided as the first argument, the argument value at the second index is\r\n     * provided as the second argument, and so on.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to rearrange arguments for.\r\n     * @param {...(number|number[])} indexes The arranged argument indexes.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var rearged = _.rearg(function(a, b, c) {\r\n     *   return [a, b, c];\r\n     * }, [2, 0, 1]);\r\n     *\r\n     * rearged('b', 'c', 'a')\r\n     * // => ['a', 'b', 'c']\r\n     */\r\n    var rearg = flatRest(function(func, indexes) {\r\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\r\n    });\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the `this` binding of the\r\n     * created function and arguments from `start` and beyond provided as\r\n     * an array.\r\n     *\r\n     * **Note:** This method is based on the\r\n     * [rest parameter](https://mdn.io/rest_parameters).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to apply a rest parameter to.\r\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var say = _.rest(function(what, names) {\r\n     *   return what + ' ' + _.initial(names).join(', ') +\r\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\r\n     * });\r\n     *\r\n     * say('hello', 'fred', 'barney', 'pebbles');\r\n     * // => 'hello fred, barney, & pebbles'\r\n     */\r\n    function rest(func, start) {\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      start = start === undefined ? start : toInteger(start);\r\n      return baseRest(func, start);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the `this` binding of the\r\n     * create function and an array of arguments much like\r\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\r\n     *\r\n     * **Note:** This method is based on the\r\n     * [spread operator](https://mdn.io/spread_operator).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Function\r\n     * @param {Function} func The function to spread arguments over.\r\n     * @param {number} [start=0] The start position of the spread.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var say = _.spread(function(who, what) {\r\n     *   return who + ' says ' + what;\r\n     * });\r\n     *\r\n     * say(['fred', 'hello']);\r\n     * // => 'fred says hello'\r\n     *\r\n     * var numbers = Promise.all([\r\n     *   Promise.resolve(40),\r\n     *   Promise.resolve(36)\r\n     * ]);\r\n     *\r\n     * numbers.then(_.spread(function(x, y) {\r\n     *   return x + y;\r\n     * }));\r\n     * // => a Promise of 76\r\n     */\r\n    function spread(func, start) {\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\r\n      return baseRest(function(args) {\r\n        var array = args[start],\r\n            otherArgs = castSlice(args, 0, start);\r\n\r\n        if (array) {\r\n          arrayPush(otherArgs, array);\r\n        }\r\n        return apply(func, this, otherArgs);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a throttled function that only invokes `func` at most once per\r\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\r\n     * method to cancel delayed `func` invocations and a `flush` method to\r\n     * immediately invoke them. Provide `options` to indicate whether `func`\r\n     * should be invoked on the leading and/or trailing edge of the `wait`\r\n     * timeout. The `func` is invoked with the last arguments provided to the\r\n     * throttled function. Subsequent calls to the throttled function return the\r\n     * result of the last `func` invocation.\r\n     *\r\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n     * invoked on the trailing edge of the timeout only if the throttled function\r\n     * is invoked more than once during the `wait` timeout.\r\n     *\r\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n     *\r\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n     * for details over the differences between `_.throttle` and `_.debounce`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {Function} func The function to throttle.\r\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.leading=true]\r\n     *  Specify invoking on the leading edge of the timeout.\r\n     * @param {boolean} [options.trailing=true]\r\n     *  Specify invoking on the trailing edge of the timeout.\r\n     * @returns {Function} Returns the new throttled function.\r\n     * @example\r\n     *\r\n     * // Avoid excessively updating the position while scrolling.\r\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\r\n     *\r\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\r\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\r\n     * jQuery(element).on('click', throttled);\r\n     *\r\n     * // Cancel the trailing throttled invocation.\r\n     * jQuery(window).on('popstate', throttled.cancel);\r\n     */\r\n    function throttle(func, wait, options) {\r\n      var leading = true,\r\n          trailing = true;\r\n\r\n      if (typeof func != 'function') {\r\n        throw new TypeError(FUNC_ERROR_TEXT);\r\n      }\r\n      if (isObject(options)) {\r\n        leading = 'leading' in options ? !!options.leading : leading;\r\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n      }\r\n      return debounce(func, wait, {\r\n        'leading': leading,\r\n        'maxWait': wait,\r\n        'trailing': trailing\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a function that accepts up to one argument, ignoring any\r\n     * additional arguments.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Function\r\n     * @param {Function} func The function to cap arguments for.\r\n     * @returns {Function} Returns the new capped function.\r\n     * @example\r\n     *\r\n     * _.map(['6', '8', '10'], _.unary(parseInt));\r\n     * // => [6, 8, 10]\r\n     */\r\n    function unary(func) {\r\n      return ary(func, 1);\r\n    }\r\n\r\n    /**\r\n     * Creates a function that provides `value` to `wrapper` as its first\r\n     * argument. Any additional arguments provided to the function are appended\r\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\r\n     * binding of the created function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Function\r\n     * @param {*} value The value to wrap.\r\n     * @param {Function} [wrapper=identity] The wrapper function.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var p = _.wrap(_.escape, function(func, text) {\r\n     *   return '<p>' + func(text) + '</p>';\r\n     * });\r\n     *\r\n     * p('fred, barney, & pebbles');\r\n     * // => '<p>fred, barney, &amp; pebbles</p>'\r\n     */\r\n    function wrap(value, wrapper) {\r\n      return partial(castFunction(wrapper), value);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Casts `value` as an array if it's not one.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.4.0\r\n     * @category Lang\r\n     * @param {*} value The value to inspect.\r\n     * @returns {Array} Returns the cast array.\r\n     * @example\r\n     *\r\n     * _.castArray(1);\r\n     * // => [1]\r\n     *\r\n     * _.castArray({ 'a': 1 });\r\n     * // => [{ 'a': 1 }]\r\n     *\r\n     * _.castArray('abc');\r\n     * // => ['abc']\r\n     *\r\n     * _.castArray(null);\r\n     * // => [null]\r\n     *\r\n     * _.castArray(undefined);\r\n     * // => [undefined]\r\n     *\r\n     * _.castArray();\r\n     * // => []\r\n     *\r\n     * var array = [1, 2, 3];\r\n     * console.log(_.castArray(array) === array);\r\n     * // => true\r\n     */\r\n    function castArray() {\r\n      if (!arguments.length) {\r\n        return [];\r\n      }\r\n      var value = arguments[0];\r\n      return isArray(value) ? value : [value];\r\n    }\r\n\r\n    /**\r\n     * Creates a shallow clone of `value`.\r\n     *\r\n     * **Note:** This method is loosely based on the\r\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\r\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\r\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\r\n     * arrays. The own enumerable properties of `arguments` objects are cloned\r\n     * as plain objects. An empty object is returned for uncloneable values such\r\n     * as error objects, functions, DOM nodes, and WeakMaps.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to clone.\r\n     * @returns {*} Returns the cloned value.\r\n     * @see _.cloneDeep\r\n     * @example\r\n     *\r\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n     *\r\n     * var shallow = _.clone(objects);\r\n     * console.log(shallow[0] === objects[0]);\r\n     * // => true\r\n     */\r\n    function clone(value) {\r\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.clone` except that it accepts `customizer` which\r\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\r\n     * cloning is handled by the method instead. The `customizer` is invoked with\r\n     * up to four arguments; (value [, index|key, object, stack]).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to clone.\r\n     * @param {Function} [customizer] The function to customize cloning.\r\n     * @returns {*} Returns the cloned value.\r\n     * @see _.cloneDeepWith\r\n     * @example\r\n     *\r\n     * function customizer(value) {\r\n     *   if (_.isElement(value)) {\r\n     *     return value.cloneNode(false);\r\n     *   }\r\n     * }\r\n     *\r\n     * var el = _.cloneWith(document.body, customizer);\r\n     *\r\n     * console.log(el === document.body);\r\n     * // => false\r\n     * console.log(el.nodeName);\r\n     * // => 'BODY'\r\n     * console.log(el.childNodes.length);\r\n     * // => 0\r\n     */\r\n    function cloneWith(value, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.clone` except that it recursively clones `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to recursively clone.\r\n     * @returns {*} Returns the deep cloned value.\r\n     * @see _.clone\r\n     * @example\r\n     *\r\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n     *\r\n     * var deep = _.cloneDeep(objects);\r\n     * console.log(deep[0] === objects[0]);\r\n     * // => false\r\n     */\r\n    function cloneDeep(value) {\r\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to recursively clone.\r\n     * @param {Function} [customizer] The function to customize cloning.\r\n     * @returns {*} Returns the deep cloned value.\r\n     * @see _.cloneWith\r\n     * @example\r\n     *\r\n     * function customizer(value) {\r\n     *   if (_.isElement(value)) {\r\n     *     return value.cloneNode(true);\r\n     *   }\r\n     * }\r\n     *\r\n     * var el = _.cloneDeepWith(document.body, customizer);\r\n     *\r\n     * console.log(el === document.body);\r\n     * // => false\r\n     * console.log(el.nodeName);\r\n     * // => 'BODY'\r\n     * console.log(el.childNodes.length);\r\n     * // => 20\r\n     */\r\n    function cloneDeepWith(value, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\r\n    }\r\n\r\n    /**\r\n     * Checks if `object` conforms to `source` by invoking the predicate\r\n     * properties of `source` with the corresponding property values of `object`.\r\n     *\r\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\r\n     * partially applied.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.14.0\r\n     * @category Lang\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property predicates to conform to.\r\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2 };\r\n     *\r\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\r\n     * // => true\r\n     *\r\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\r\n     * // => false\r\n     */\r\n    function conformsTo(object, source) {\r\n      return source == null || baseConformsTo(object, source, keys(source));\r\n    }\r\n\r\n    /**\r\n     * Performs a\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * comparison between two values to determine if they are equivalent.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     * var other = { 'a': 1 };\r\n     *\r\n     * _.eq(object, object);\r\n     * // => true\r\n     *\r\n     * _.eq(object, other);\r\n     * // => false\r\n     *\r\n     * _.eq('a', 'a');\r\n     * // => true\r\n     *\r\n     * _.eq('a', Object('a'));\r\n     * // => false\r\n     *\r\n     * _.eq(NaN, NaN);\r\n     * // => true\r\n     */\r\n    function eq(value, other) {\r\n      return value === other || (value !== value && other !== other);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is greater than `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.9.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\r\n     *  else `false`.\r\n     * @see _.lt\r\n     * @example\r\n     *\r\n     * _.gt(3, 1);\r\n     * // => true\r\n     *\r\n     * _.gt(3, 3);\r\n     * // => false\r\n     *\r\n     * _.gt(1, 3);\r\n     * // => false\r\n     */\r\n    var gt = createRelationalOperation(baseGt);\r\n\r\n    /**\r\n     * Checks if `value` is greater than or equal to `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.9.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\r\n     *  `other`, else `false`.\r\n     * @see _.lte\r\n     * @example\r\n     *\r\n     * _.gte(3, 1);\r\n     * // => true\r\n     *\r\n     * _.gte(3, 3);\r\n     * // => true\r\n     *\r\n     * _.gte(1, 3);\r\n     * // => false\r\n     */\r\n    var gte = createRelationalOperation(function(value, other) {\r\n      return value >= other;\r\n    });\r\n\r\n    /**\r\n     * Checks if `value` is likely an `arguments` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.isArguments(function() { return arguments; }());\r\n     * // => true\r\n     *\r\n     * _.isArguments([1, 2, 3]);\r\n     * // => false\r\n     */\r\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\r\n        !propertyIsEnumerable.call(value, 'callee');\r\n    };\r\n\r\n    /**\r\n     * Checks if `value` is classified as an `Array` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArray([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArray(document.body.children);\r\n     * // => false\r\n     *\r\n     * _.isArray('abc');\r\n     * // => false\r\n     *\r\n     * _.isArray(_.noop);\r\n     * // => false\r\n     */\r\n    var isArray = Array.isArray;\r\n\r\n    /**\r\n     * Checks if `value` is classified as an `ArrayBuffer` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArrayBuffer(new ArrayBuffer(2));\r\n     * // => true\r\n     *\r\n     * _.isArrayBuffer(new Array(2));\r\n     * // => false\r\n     */\r\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * _.isArrayLike([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArrayLike(document.body.children);\r\n     * // => true\r\n     *\r\n     * _.isArrayLike('abc');\r\n     * // => true\r\n     *\r\n     * _.isArrayLike(_.noop);\r\n     * // => false\r\n     */\r\n    function isArrayLike(value) {\r\n      return value != null && isLength(value.length) && !isFunction(value);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.isArrayLike` except that it also checks if `value`\r\n     * is an object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.isArrayLikeObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isArrayLikeObject(document.body.children);\r\n     * // => true\r\n     *\r\n     * _.isArrayLikeObject('abc');\r\n     * // => false\r\n     *\r\n     * _.isArrayLikeObject(_.noop);\r\n     * // => false\r\n     */\r\n    function isArrayLikeObject(value) {\r\n      return isObjectLike(value) && isArrayLike(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * _.isBoolean(false);\r\n     * // => true\r\n     *\r\n     * _.isBoolean(null);\r\n     * // => false\r\n     */\r\n    function isBoolean(value) {\r\n      return value === true || value === false ||\r\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a buffer.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n     * @example\r\n     *\r\n     * _.isBuffer(new Buffer(2));\r\n     * // => true\r\n     *\r\n     * _.isBuffer(new Uint8Array(2));\r\n     * // => false\r\n     */\r\n    var isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Date` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isDate(new Date);\r\n     * // => true\r\n     *\r\n     * _.isDate('Mon April 23 2012');\r\n     * // => false\r\n     */\r\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\r\n\r\n    /**\r\n     * Checks if `value` is likely a DOM element.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\r\n     * @example\r\n     *\r\n     * _.isElement(document.body);\r\n     * // => true\r\n     *\r\n     * _.isElement('<body>');\r\n     * // => false\r\n     */\r\n    function isElement(value) {\r\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is an empty object, collection, map, or set.\r\n     *\r\n     * Objects are considered empty if they have no own enumerable string keyed\r\n     * properties.\r\n     *\r\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\r\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\r\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\r\n     * @example\r\n     *\r\n     * _.isEmpty(null);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(true);\r\n     * // => true\r\n     *\r\n     * _.isEmpty(1);\r\n     * // => true\r\n     *\r\n     * _.isEmpty([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isEmpty({ 'a': 1 });\r\n     * // => false\r\n     */\r\n    function isEmpty(value) {\r\n      if (value == null) {\r\n        return true;\r\n      }\r\n      if (isArrayLike(value) &&\r\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\r\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\r\n        return !value.length;\r\n      }\r\n      var tag = getTag(value);\r\n      if (tag == mapTag || tag == setTag) {\r\n        return !value.size;\r\n      }\r\n      if (isPrototype(value)) {\r\n        return !baseKeys(value).length;\r\n      }\r\n      for (var key in value) {\r\n        if (hasOwnProperty.call(value, key)) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Performs a deep comparison between two values to determine if they are\r\n     * equivalent.\r\n     *\r\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\r\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\r\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\r\n     * by their own, not inherited, enumerable properties. Functions and DOM\r\n     * nodes are compared by strict equality, i.e. `===`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     * var other = { 'a': 1 };\r\n     *\r\n     * _.isEqual(object, other);\r\n     * // => true\r\n     *\r\n     * object === other;\r\n     * // => false\r\n     */\r\n    function isEqual(value, other) {\r\n      return baseIsEqual(value, other);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.isEqual` except that it accepts `customizer` which\r\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\r\n     * are handled by the method instead. The `customizer` is invoked with up to\r\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n     * @example\r\n     *\r\n     * function isGreeting(value) {\r\n     *   return /^h(?:i|ello)$/.test(value);\r\n     * }\r\n     *\r\n     * function customizer(objValue, othValue) {\r\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\r\n     *     return true;\r\n     *   }\r\n     * }\r\n     *\r\n     * var array = ['hello', 'goodbye'];\r\n     * var other = ['hi', 'goodbye'];\r\n     *\r\n     * _.isEqualWith(array, other, customizer);\r\n     * // => true\r\n     */\r\n    function isEqualWith(value, other, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      var result = customizer ? customizer(value, other) : undefined;\r\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\r\n     * `SyntaxError`, `TypeError`, or `URIError` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isError(new Error);\r\n     * // => true\r\n     *\r\n     * _.isError(Error);\r\n     * // => false\r\n     */\r\n    function isError(value) {\r\n      if (!isObjectLike(value)) {\r\n        return false;\r\n      }\r\n      var tag = baseGetTag(value);\r\n      return tag == errorTag || tag == domExcTag ||\r\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a finite primitive number.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFinite(3);\r\n     * // => true\r\n     *\r\n     * _.isFinite(Number.MIN_VALUE);\r\n     * // => true\r\n     *\r\n     * _.isFinite(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isFinite('3');\r\n     * // => false\r\n     */\r\n    function isFinite(value) {\r\n      return typeof value == 'number' && nativeIsFinite(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * _.isFunction(_);\r\n     * // => true\r\n     *\r\n     * _.isFunction(/abc/);\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n      if (!isObject(value)) {\r\n        return false;\r\n      }\r\n      // The use of `Object#toString` avoids issues with the `typeof` operator\r\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n      var tag = baseGetTag(value);\r\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is an integer.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\r\n     * @example\r\n     *\r\n     * _.isInteger(3);\r\n     * // => true\r\n     *\r\n     * _.isInteger(Number.MIN_VALUE);\r\n     * // => false\r\n     *\r\n     * _.isInteger(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isInteger('3');\r\n     * // => false\r\n     */\r\n    function isInteger(value) {\r\n      return typeof value == 'number' && value == toInteger(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a valid array-like length.\r\n     *\r\n     * **Note:** This method is loosely based on\r\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n     * @example\r\n     *\r\n     * _.isLength(3);\r\n     * // => true\r\n     *\r\n     * _.isLength(Number.MIN_VALUE);\r\n     * // => false\r\n     *\r\n     * _.isLength(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isLength('3');\r\n     * // => false\r\n     */\r\n    function isLength(value) {\r\n      return typeof value == 'number' &&\r\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is the\r\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObject({});\r\n     * // => true\r\n     *\r\n     * _.isObject([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObject(_.noop);\r\n     * // => true\r\n     *\r\n     * _.isObject(null);\r\n     * // => false\r\n     */\r\n    function isObject(value) {\r\n      var type = typeof value;\r\n      return value != null && (type == 'object' || type == 'function');\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n     * and has a `typeof` result of \"object\".\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n     * @example\r\n     *\r\n     * _.isObjectLike({});\r\n     * // => true\r\n     *\r\n     * _.isObjectLike([1, 2, 3]);\r\n     * // => true\r\n     *\r\n     * _.isObjectLike(_.noop);\r\n     * // => false\r\n     *\r\n     * _.isObjectLike(null);\r\n     * // => false\r\n     */\r\n    function isObjectLike(value) {\r\n      return value != null && typeof value == 'object';\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Map` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\r\n     * @example\r\n     *\r\n     * _.isMap(new Map);\r\n     * // => true\r\n     *\r\n     * _.isMap(new WeakMap);\r\n     * // => false\r\n     */\r\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\r\n\r\n    /**\r\n     * Performs a partial deep comparison between `object` and `source` to\r\n     * determine if `object` contains equivalent property values.\r\n     *\r\n     * **Note:** This method is equivalent to `_.matches` when `source` is\r\n     * partially applied.\r\n     *\r\n     * Partial comparisons will match empty array and empty object `source`\r\n     * values against any array or object value, respectively. See `_.isEqual`\r\n     * for a list of supported value comparisons.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2 };\r\n     *\r\n     * _.isMatch(object, { 'b': 2 });\r\n     * // => true\r\n     *\r\n     * _.isMatch(object, { 'b': 1 });\r\n     * // => false\r\n     */\r\n    function isMatch(object, source) {\r\n      return object === source || baseIsMatch(object, source, getMatchData(source));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.isMatch` except that it accepts `customizer` which\r\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\r\n     * are handled by the method instead. The `customizer` is invoked with five\r\n     * arguments: (objValue, srcValue, index|key, object, source).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Object} source The object of property values to match.\r\n     * @param {Function} [customizer] The function to customize comparisons.\r\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\r\n     * @example\r\n     *\r\n     * function isGreeting(value) {\r\n     *   return /^h(?:i|ello)$/.test(value);\r\n     * }\r\n     *\r\n     * function customizer(objValue, srcValue) {\r\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\r\n     *     return true;\r\n     *   }\r\n     * }\r\n     *\r\n     * var object = { 'greeting': 'hello' };\r\n     * var source = { 'greeting': 'hi' };\r\n     *\r\n     * _.isMatchWith(object, source, customizer);\r\n     * // => true\r\n     */\r\n    function isMatchWith(object, source, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      return baseIsMatch(object, source, getMatchData(source), customizer);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is `NaN`.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\r\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\r\n     * `undefined` and other non-number values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNaN(NaN);\r\n     * // => true\r\n     *\r\n     * _.isNaN(new Number(NaN));\r\n     * // => true\r\n     *\r\n     * isNaN(undefined);\r\n     * // => true\r\n     *\r\n     * _.isNaN(undefined);\r\n     * // => false\r\n     */\r\n    function isNaN(value) {\r\n      // An `NaN` primitive is the only value that is not equal to itself.\r\n      // Perform the `toStringTag` check first to avoid errors with some\r\n      // ActiveX objects in IE.\r\n      return isNumber(value) && value != +value;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a pristine native function.\r\n     *\r\n     * **Note:** This method can't reliably detect native functions in the presence\r\n     * of the core-js package because core-js circumvents this kind of detection.\r\n     * Despite multiple requests, the core-js maintainer has made it clear: any\r\n     * attempt to fix the detection will be obstructed. As a result, we're left\r\n     * with little choice but to throw an error. Unfortunately, this also affects\r\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\r\n     * which rely on core-js.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a native function,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.isNative(Array.prototype.push);\r\n     * // => true\r\n     *\r\n     * _.isNative(_);\r\n     * // => false\r\n     */\r\n    function isNative(value) {\r\n      if (isMaskable(value)) {\r\n        throw new Error(CORE_ERROR_TEXT);\r\n      }\r\n      return baseIsNative(value);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is `null`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNull(null);\r\n     * // => true\r\n     *\r\n     * _.isNull(void 0);\r\n     * // => false\r\n     */\r\n    function isNull(value) {\r\n      return value === null;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is `null` or `undefined`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNil(null);\r\n     * // => true\r\n     *\r\n     * _.isNil(void 0);\r\n     * // => true\r\n     *\r\n     * _.isNil(NaN);\r\n     * // => false\r\n     */\r\n    function isNil(value) {\r\n      return value == null;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Number` primitive or object.\r\n     *\r\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\r\n     * classified as numbers, use the `_.isFinite` method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\r\n     * @example\r\n     *\r\n     * _.isNumber(3);\r\n     * // => true\r\n     *\r\n     * _.isNumber(Number.MIN_VALUE);\r\n     * // => true\r\n     *\r\n     * _.isNumber(Infinity);\r\n     * // => true\r\n     *\r\n     * _.isNumber('3');\r\n     * // => false\r\n     */\r\n    function isNumber(value) {\r\n      return typeof value == 'number' ||\r\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is a plain object, that is, an object created by the\r\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.8.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * _.isPlainObject(new Foo);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject([1, 2, 3]);\r\n     * // => false\r\n     *\r\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\r\n     * // => true\r\n     *\r\n     * _.isPlainObject(Object.create(null));\r\n     * // => true\r\n     */\r\n    function isPlainObject(value) {\r\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\r\n        return false;\r\n      }\r\n      var proto = getPrototype(value);\r\n      if (proto === null) {\r\n        return true;\r\n      }\r\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\r\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\r\n        funcToString.call(Ctor) == objectCtorString;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `RegExp` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\r\n     * @example\r\n     *\r\n     * _.isRegExp(/abc/);\r\n     * // => true\r\n     *\r\n     * _.isRegExp('/abc/');\r\n     * // => false\r\n     */\r\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\r\n\r\n    /**\r\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\r\n     * double precision number which isn't the result of a rounded unsafe integer.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSafeInteger(3);\r\n     * // => true\r\n     *\r\n     * _.isSafeInteger(Number.MIN_VALUE);\r\n     * // => false\r\n     *\r\n     * _.isSafeInteger(Infinity);\r\n     * // => false\r\n     *\r\n     * _.isSafeInteger('3');\r\n     * // => false\r\n     */\r\n    function isSafeInteger(value) {\r\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Set` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSet(new Set);\r\n     * // => true\r\n     *\r\n     * _.isSet(new WeakSet);\r\n     * // => false\r\n     */\r\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `String` primitive or object.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\r\n     * @example\r\n     *\r\n     * _.isString('abc');\r\n     * // => true\r\n     *\r\n     * _.isString(1);\r\n     * // => false\r\n     */\r\n    function isString(value) {\r\n      return typeof value == 'string' ||\r\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a typed array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n     * @example\r\n     *\r\n     * _.isTypedArray(new Uint8Array);\r\n     * // => true\r\n     *\r\n     * _.isTypedArray([]);\r\n     * // => false\r\n     */\r\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n    /**\r\n     * Checks if `value` is `undefined`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\r\n     * @example\r\n     *\r\n     * _.isUndefined(void 0);\r\n     * // => true\r\n     *\r\n     * _.isUndefined(null);\r\n     * // => false\r\n     */\r\n    function isUndefined(value) {\r\n      return value === undefined;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `WeakMap` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\r\n     * @example\r\n     *\r\n     * _.isWeakMap(new WeakMap);\r\n     * // => true\r\n     *\r\n     * _.isWeakMap(new Map);\r\n     * // => false\r\n     */\r\n    function isWeakMap(value) {\r\n      return isObjectLike(value) && getTag(value) == weakMapTag;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `WeakSet` object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.3.0\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\r\n     * @example\r\n     *\r\n     * _.isWeakSet(new WeakSet);\r\n     * // => true\r\n     *\r\n     * _.isWeakSet(new Set);\r\n     * // => false\r\n     */\r\n    function isWeakSet(value) {\r\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is less than `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.9.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\r\n     *  else `false`.\r\n     * @see _.gt\r\n     * @example\r\n     *\r\n     * _.lt(1, 3);\r\n     * // => true\r\n     *\r\n     * _.lt(3, 3);\r\n     * // => false\r\n     *\r\n     * _.lt(3, 1);\r\n     * // => false\r\n     */\r\n    var lt = createRelationalOperation(baseLt);\r\n\r\n    /**\r\n     * Checks if `value` is less than or equal to `other`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.9.0\r\n     * @category Lang\r\n     * @param {*} value The value to compare.\r\n     * @param {*} other The other value to compare.\r\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\r\n     *  `other`, else `false`.\r\n     * @see _.gte\r\n     * @example\r\n     *\r\n     * _.lte(1, 3);\r\n     * // => true\r\n     *\r\n     * _.lte(3, 3);\r\n     * // => true\r\n     *\r\n     * _.lte(3, 1);\r\n     * // => false\r\n     */\r\n    var lte = createRelationalOperation(function(value, other) {\r\n      return value <= other;\r\n    });\r\n\r\n    /**\r\n     * Converts `value` to an array.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Array} Returns the converted array.\r\n     * @example\r\n     *\r\n     * _.toArray({ 'a': 1, 'b': 2 });\r\n     * // => [1, 2]\r\n     *\r\n     * _.toArray('abc');\r\n     * // => ['a', 'b', 'c']\r\n     *\r\n     * _.toArray(1);\r\n     * // => []\r\n     *\r\n     * _.toArray(null);\r\n     * // => []\r\n     */\r\n    function toArray(value) {\r\n      if (!value) {\r\n        return [];\r\n      }\r\n      if (isArrayLike(value)) {\r\n        return isString(value) ? stringToArray(value) : copyArray(value);\r\n      }\r\n      if (symIterator && value[symIterator]) {\r\n        return iteratorToArray(value[symIterator]());\r\n      }\r\n      var tag = getTag(value),\r\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\r\n\r\n      return func(value);\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a finite number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.12.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted number.\r\n     * @example\r\n     *\r\n     * _.toFinite(3.2);\r\n     * // => 3.2\r\n     *\r\n     * _.toFinite(Number.MIN_VALUE);\r\n     * // => 5e-324\r\n     *\r\n     * _.toFinite(Infinity);\r\n     * // => 1.7976931348623157e+308\r\n     *\r\n     * _.toFinite('3.2');\r\n     * // => 3.2\r\n     */\r\n    function toFinite(value) {\r\n      if (!value) {\r\n        return value === 0 ? value : 0;\r\n      }\r\n      value = toNumber(value);\r\n      if (value === INFINITY || value === -INFINITY) {\r\n        var sign = (value < 0 ? -1 : 1);\r\n        return sign * MAX_INTEGER;\r\n      }\r\n      return value === value ? value : 0;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to an integer.\r\n     *\r\n     * **Note:** This method is loosely based on\r\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.toInteger(3.2);\r\n     * // => 3\r\n     *\r\n     * _.toInteger(Number.MIN_VALUE);\r\n     * // => 0\r\n     *\r\n     * _.toInteger(Infinity);\r\n     * // => 1.7976931348623157e+308\r\n     *\r\n     * _.toInteger('3.2');\r\n     * // => 3\r\n     */\r\n    function toInteger(value) {\r\n      var result = toFinite(value),\r\n          remainder = result % 1;\r\n\r\n      return result === result ? (remainder ? result - remainder : result) : 0;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to an integer suitable for use as the length of an\r\n     * array-like object.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.toLength(3.2);\r\n     * // => 3\r\n     *\r\n     * _.toLength(Number.MIN_VALUE);\r\n     * // => 0\r\n     *\r\n     * _.toLength(Infinity);\r\n     * // => 4294967295\r\n     *\r\n     * _.toLength('3.2');\r\n     * // => 3\r\n     */\r\n    function toLength(value) {\r\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to process.\r\n     * @returns {number} Returns the number.\r\n     * @example\r\n     *\r\n     * _.toNumber(3.2);\r\n     * // => 3.2\r\n     *\r\n     * _.toNumber(Number.MIN_VALUE);\r\n     * // => 5e-324\r\n     *\r\n     * _.toNumber(Infinity);\r\n     * // => Infinity\r\n     *\r\n     * _.toNumber('3.2');\r\n     * // => 3.2\r\n     */\r\n    function toNumber(value) {\r\n      if (typeof value == 'number') {\r\n        return value;\r\n      }\r\n      if (isSymbol(value)) {\r\n        return NAN;\r\n      }\r\n      if (isObject(value)) {\r\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n        value = isObject(other) ? (other + '') : other;\r\n      }\r\n      if (typeof value != 'string') {\r\n        return value === 0 ? value : +value;\r\n      }\r\n      value = baseTrim(value);\r\n      var isBinary = reIsBinary.test(value);\r\n      return (isBinary || reIsOctal.test(value))\r\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n        : (reIsBadHex.test(value) ? NAN : +value);\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a plain object flattening inherited enumerable string\r\n     * keyed properties of `value` to own properties of the plain object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {Object} Returns the converted plain object.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.assign({ 'a': 1 }, new Foo);\r\n     * // => { 'a': 1, 'b': 2 }\r\n     *\r\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\r\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\r\n     */\r\n    function toPlainObject(value) {\r\n      return copyObject(value, keysIn(value));\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a safe integer. A safe integer can be compared and\r\n     * represented correctly.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.toSafeInteger(3.2);\r\n     * // => 3\r\n     *\r\n     * _.toSafeInteger(Number.MIN_VALUE);\r\n     * // => 0\r\n     *\r\n     * _.toSafeInteger(Infinity);\r\n     * // => 9007199254740991\r\n     *\r\n     * _.toSafeInteger('3.2');\r\n     * // => 3\r\n     */\r\n    function toSafeInteger(value) {\r\n      return value\r\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\r\n        : (value === 0 ? value : 0);\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a string. An empty string is returned for `null`\r\n     * and `undefined` values. The sign of `-0` is preserved.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Lang\r\n     * @param {*} value The value to convert.\r\n     * @returns {string} Returns the converted string.\r\n     * @example\r\n     *\r\n     * _.toString(null);\r\n     * // => ''\r\n     *\r\n     * _.toString(-0);\r\n     * // => '-0'\r\n     *\r\n     * _.toString([1, 2, 3]);\r\n     * // => '1,2,3'\r\n     */\r\n    function toString(value) {\r\n      return value == null ? '' : baseToString(value);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Assigns own enumerable string keyed properties of source objects to the\r\n     * destination object. Source objects are applied from left to right.\r\n     * Subsequent sources overwrite property assignments of previous sources.\r\n     *\r\n     * **Note:** This method mutates `object` and is loosely based on\r\n     * [`Object.assign`](https://mdn.io/Object/assign).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.10.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.assignIn\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * function Bar() {\r\n     *   this.c = 3;\r\n     * }\r\n     *\r\n     * Foo.prototype.b = 2;\r\n     * Bar.prototype.d = 4;\r\n     *\r\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\r\n     * // => { 'a': 1, 'c': 3 }\r\n     */\r\n    var assign = createAssigner(function(object, source) {\r\n      if (isPrototype(source) || isArrayLike(source)) {\r\n        copyObject(source, keys(source), object);\r\n        return;\r\n      }\r\n      for (var key in source) {\r\n        if (hasOwnProperty.call(source, key)) {\r\n          assignValue(object, key, source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.assign` except that it iterates over own and\r\n     * inherited source properties.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @alias extend\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.assign\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     * }\r\n     *\r\n     * function Bar() {\r\n     *   this.c = 3;\r\n     * }\r\n     *\r\n     * Foo.prototype.b = 2;\r\n     * Bar.prototype.d = 4;\r\n     *\r\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\r\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\r\n     */\r\n    var assignIn = createAssigner(function(object, source) {\r\n      copyObject(source, keysIn(source), object);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.assignIn` except that it accepts `customizer`\r\n     * which is invoked to produce the assigned values. If `customizer` returns\r\n     * `undefined`, assignment is handled by the method instead. The `customizer`\r\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @alias extendWith\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} sources The source objects.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.assignWith\r\n     * @example\r\n     *\r\n     * function customizer(objValue, srcValue) {\r\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\r\n     * }\r\n     *\r\n     * var defaults = _.partialRight(_.assignInWith, customizer);\r\n     *\r\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\r\n      copyObject(source, keysIn(source), object, customizer);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.assign` except that it accepts `customizer`\r\n     * which is invoked to produce the assigned values. If `customizer` returns\r\n     * `undefined`, assignment is handled by the method instead. The `customizer`\r\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} sources The source objects.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.assignInWith\r\n     * @example\r\n     *\r\n     * function customizer(objValue, srcValue) {\r\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\r\n     * }\r\n     *\r\n     * var defaults = _.partialRight(_.assignWith, customizer);\r\n     *\r\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\r\n      copyObject(source, keys(source), object, customizer);\r\n    });\r\n\r\n    /**\r\n     * Creates an array of values corresponding to `paths` of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {...(string|string[])} [paths] The property paths to pick.\r\n     * @returns {Array} Returns the picked values.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\r\n     *\r\n     * _.at(object, ['a[0].b.c', 'a[1]']);\r\n     * // => [3, 4]\r\n     */\r\n    var at = flatRest(baseAt);\r\n\r\n    /**\r\n     * Creates an object that inherits from the `prototype` object. If a\r\n     * `properties` object is given, its own enumerable string keyed properties\r\n     * are assigned to the created object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.3.0\r\n     * @category Object\r\n     * @param {Object} prototype The object to inherit from.\r\n     * @param {Object} [properties] The properties to assign to the object.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * function Shape() {\r\n     *   this.x = 0;\r\n     *   this.y = 0;\r\n     * }\r\n     *\r\n     * function Circle() {\r\n     *   Shape.call(this);\r\n     * }\r\n     *\r\n     * Circle.prototype = _.create(Shape.prototype, {\r\n     *   'constructor': Circle\r\n     * });\r\n     *\r\n     * var circle = new Circle;\r\n     * circle instanceof Circle;\r\n     * // => true\r\n     *\r\n     * circle instanceof Shape;\r\n     * // => true\r\n     */\r\n    function create(prototype, properties) {\r\n      var result = baseCreate(prototype);\r\n      return properties == null ? result : baseAssign(result, properties);\r\n    }\r\n\r\n    /**\r\n     * Assigns own and inherited enumerable string keyed properties of source\r\n     * objects to the destination object for all destination properties that\r\n     * resolve to `undefined`. Source objects are applied from left to right.\r\n     * Once a property is set, additional values of the same property are ignored.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.defaultsDeep\r\n     * @example\r\n     *\r\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\r\n     * // => { 'a': 1, 'b': 2 }\r\n     */\r\n    var defaults = baseRest(function(object, sources) {\r\n      object = Object(object);\r\n\r\n      var index = -1;\r\n      var length = sources.length;\r\n      var guard = length > 2 ? sources[2] : undefined;\r\n\r\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\r\n        length = 1;\r\n      }\r\n\r\n      while (++index < length) {\r\n        var source = sources[index];\r\n        var props = keysIn(source);\r\n        var propsIndex = -1;\r\n        var propsLength = props.length;\r\n\r\n        while (++propsIndex < propsLength) {\r\n          var key = props[propsIndex];\r\n          var value = object[key];\r\n\r\n          if (value === undefined ||\r\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\r\n            object[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      return object;\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.defaults` except that it recursively assigns\r\n     * default properties.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.10.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.defaults\r\n     * @example\r\n     *\r\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\r\n     * // => { 'a': { 'b': 2, 'c': 3 } }\r\n     */\r\n    var defaultsDeep = baseRest(function(args) {\r\n      args.push(undefined, customDefaultsMerge);\r\n      return apply(mergeWith, undefined, args);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.find` except that it returns the key of the first\r\n     * element `predicate` returns truthy for instead of the element itself.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.1.0\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {string|undefined} Returns the key of the matched element,\r\n     *  else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findKey(users, function(o) { return o.age < 40; });\r\n     * // => 'barney' (iteration order is not guaranteed)\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findKey(users, { 'age': 1, 'active': true });\r\n     * // => 'pebbles'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findKey(users, ['active', false]);\r\n     * // => 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findKey(users, 'active');\r\n     * // => 'barney'\r\n     */\r\n    function findKey(object, predicate) {\r\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.findKey` except that it iterates over elements of\r\n     * a collection in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\r\n     * @returns {string|undefined} Returns the key of the matched element,\r\n     *  else `undefined`.\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'barney':  { 'age': 36, 'active': true },\r\n     *   'fred':    { 'age': 40, 'active': false },\r\n     *   'pebbles': { 'age': 1,  'active': true }\r\n     * };\r\n     *\r\n     * _.findLastKey(users, function(o) { return o.age < 40; });\r\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.findLastKey(users, { 'age': 36, 'active': true });\r\n     * // => 'barney'\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.findLastKey(users, ['active', false]);\r\n     * // => 'fred'\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.findLastKey(users, 'active');\r\n     * // => 'pebbles'\r\n     */\r\n    function findLastKey(object, predicate) {\r\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\r\n    }\r\n\r\n    /**\r\n     * Iterates over own and inherited enumerable string keyed properties of an\r\n     * object and invokes `iteratee` for each property. The iteratee is invoked\r\n     * with three arguments: (value, key, object). Iteratee functions may exit\r\n     * iteration early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.3.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.forInRight\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forIn(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\r\n     */\r\n    function forIn(object, iteratee) {\r\n      return object == null\r\n        ? object\r\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.forIn` except that it iterates over properties of\r\n     * `object` in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.forIn\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forInRight(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\r\n     */\r\n    function forInRight(object, iteratee) {\r\n      return object == null\r\n        ? object\r\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\r\n    }\r\n\r\n    /**\r\n     * Iterates over own enumerable string keyed properties of an object and\r\n     * invokes `iteratee` for each property. The iteratee is invoked with three\r\n     * arguments: (value, key, object). Iteratee functions may exit iteration\r\n     * early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.3.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.forOwnRight\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forOwn(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\r\n     */\r\n    function forOwn(object, iteratee) {\r\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.forOwn` except that it iterates over properties of\r\n     * `object` in the opposite order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns `object`.\r\n     * @see _.forOwn\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.forOwnRight(new Foo, function(value, key) {\r\n     *   console.log(key);\r\n     * });\r\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\r\n     */\r\n    function forOwnRight(object, iteratee) {\r\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of function property names from own enumerable properties\r\n     * of `object`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @returns {Array} Returns the function names.\r\n     * @see _.functionsIn\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = _.constant('a');\r\n     *   this.b = _.constant('b');\r\n     * }\r\n     *\r\n     * Foo.prototype.c = _.constant('c');\r\n     *\r\n     * _.functions(new Foo);\r\n     * // => ['a', 'b']\r\n     */\r\n    function functions(object) {\r\n      return object == null ? [] : baseFunctions(object, keys(object));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of function property names from own and inherited\r\n     * enumerable properties of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to inspect.\r\n     * @returns {Array} Returns the function names.\r\n     * @see _.functions\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = _.constant('a');\r\n     *   this.b = _.constant('b');\r\n     * }\r\n     *\r\n     * Foo.prototype.c = _.constant('c');\r\n     *\r\n     * _.functionsIn(new Foo);\r\n     * // => ['a', 'b', 'c']\r\n     */\r\n    function functionsIn(object) {\r\n      return object == null ? [] : baseFunctions(object, keysIn(object));\r\n    }\r\n\r\n    /**\r\n     * Gets the value at `path` of `object`. If the resolved value is\r\n     * `undefined`, the `defaultValue` is returned in its place.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.get(object, 'a[0].b.c');\r\n     * // => 3\r\n     *\r\n     * _.get(object, ['a', '0', 'b', 'c']);\r\n     * // => 3\r\n     *\r\n     * _.get(object, 'a.b.c', 'default');\r\n     * // => 'default'\r\n     */\r\n    function get(object, path, defaultValue) {\r\n      var result = object == null ? undefined : baseGet(object, path);\r\n      return result === undefined ? defaultValue : result;\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` is a direct property of `object`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': { 'b': 2 } };\r\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\r\n     *\r\n     * _.has(object, 'a');\r\n     * // => true\r\n     *\r\n     * _.has(object, 'a.b');\r\n     * // => true\r\n     *\r\n     * _.has(object, ['a', 'b']);\r\n     * // => true\r\n     *\r\n     * _.has(other, 'a');\r\n     * // => false\r\n     */\r\n    function has(object, path) {\r\n      return object != null && hasPath(object, path, baseHas);\r\n    }\r\n\r\n    /**\r\n     * Checks if `path` is a direct or inherited property of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path to check.\r\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\r\n     * @example\r\n     *\r\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\r\n     *\r\n     * _.hasIn(object, 'a');\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, 'a.b');\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, ['a', 'b']);\r\n     * // => true\r\n     *\r\n     * _.hasIn(object, 'b');\r\n     * // => false\r\n     */\r\n    function hasIn(object, path) {\r\n      return object != null && hasPath(object, path, baseHasIn);\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of the inverted keys and values of `object`.\r\n     * If `object` contains duplicate values, subsequent values overwrite\r\n     * property assignments of previous values.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to invert.\r\n     * @returns {Object} Returns the new inverted object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n     *\r\n     * _.invert(object);\r\n     * // => { '1': 'c', '2': 'b' }\r\n     */\r\n    var invert = createInverter(function(result, value, key) {\r\n      if (value != null &&\r\n          typeof value.toString != 'function') {\r\n        value = nativeObjectToString.call(value);\r\n      }\r\n\r\n      result[value] = key;\r\n    }, constant(identity));\r\n\r\n    /**\r\n     * This method is like `_.invert` except that the inverted object is generated\r\n     * from the results of running each element of `object` thru `iteratee`. The\r\n     * corresponding inverted value of each inverted key is an array of keys\r\n     * responsible for generating the inverted value. The iteratee is invoked\r\n     * with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.1.0\r\n     * @category Object\r\n     * @param {Object} object The object to invert.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {Object} Returns the new inverted object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\r\n     *\r\n     * _.invertBy(object);\r\n     * // => { '1': ['a', 'c'], '2': ['b'] }\r\n     *\r\n     * _.invertBy(object, function(value) {\r\n     *   return 'group' + value;\r\n     * });\r\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\r\n     */\r\n    var invertBy = createInverter(function(result, value, key) {\r\n      if (value != null &&\r\n          typeof value.toString != 'function') {\r\n        value = nativeObjectToString.call(value);\r\n      }\r\n\r\n      if (hasOwnProperty.call(result, value)) {\r\n        result[value].push(key);\r\n      } else {\r\n        result[value] = [key];\r\n      }\r\n    }, getIteratee);\r\n\r\n    /**\r\n     * Invokes the method at `path` of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the method to invoke.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {*} Returns the result of the invoked method.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\r\n     *\r\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\r\n     * // => [2, 3]\r\n     */\r\n    var invoke = baseRest(baseInvoke);\r\n\r\n    /**\r\n     * Creates an array of the own enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects. See the\r\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n     * for more details.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keys(new Foo);\r\n     * // => ['a', 'b'] (iteration order is not guaranteed)\r\n     *\r\n     * _.keys('hi');\r\n     * // => ['0', '1']\r\n     */\r\n    function keys(object) {\r\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own and inherited enumerable property names of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property names.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.keysIn(new Foo);\r\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\r\n     */\r\n    function keysIn(object) {\r\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\r\n    }\r\n\r\n    /**\r\n     * The opposite of `_.mapValues`; this method creates an object with the\r\n     * same values as `object` and keys generated by running each own enumerable\r\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\r\n     * with three arguments: (value, key, object).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.8.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns the new mapped object.\r\n     * @see _.mapValues\r\n     * @example\r\n     *\r\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\r\n     *   return key + value;\r\n     * });\r\n     * // => { 'a1': 1, 'b2': 2 }\r\n     */\r\n    function mapKeys(object, iteratee) {\r\n      var result = {};\r\n      iteratee = getIteratee(iteratee, 3);\r\n\r\n      baseForOwn(object, function(value, key, object) {\r\n        baseAssignValue(result, iteratee(value, key, object), value);\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Creates an object with the same keys as `object` and values generated\r\n     * by running each own enumerable string keyed property of `object` thru\r\n     * `iteratee`. The iteratee is invoked with three arguments:\r\n     * (value, key, object).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Object} Returns the new mapped object.\r\n     * @see _.mapKeys\r\n     * @example\r\n     *\r\n     * var users = {\r\n     *   'fred':    { 'user': 'fred',    'age': 40 },\r\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\r\n     * };\r\n     *\r\n     * _.mapValues(users, function(o) { return o.age; });\r\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.mapValues(users, 'age');\r\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\r\n     */\r\n    function mapValues(object, iteratee) {\r\n      var result = {};\r\n      iteratee = getIteratee(iteratee, 3);\r\n\r\n      baseForOwn(object, function(value, key, object) {\r\n        baseAssignValue(result, key, iteratee(value, key, object));\r\n      });\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.assign` except that it recursively merges own and\r\n     * inherited enumerable string keyed properties of source objects into the\r\n     * destination object. Source properties that resolve to `undefined` are\r\n     * skipped if a destination value exists. Array and plain object properties\r\n     * are merged recursively. Other objects and value types are overridden by\r\n     * assignment. Source objects are applied from left to right. Subsequent\r\n     * sources overwrite property assignments of previous sources.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.5.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} [sources] The source objects.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = {\r\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\r\n     * };\r\n     *\r\n     * var other = {\r\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\r\n     * };\r\n     *\r\n     * _.merge(object, other);\r\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\r\n     */\r\n    var merge = createAssigner(function(object, source, srcIndex) {\r\n      baseMerge(object, source, srcIndex);\r\n    });\r\n\r\n    /**\r\n     * This method is like `_.merge` except that it accepts `customizer` which\r\n     * is invoked to produce the merged values of the destination and source\r\n     * properties. If `customizer` returns `undefined`, merging is handled by the\r\n     * method instead. The `customizer` is invoked with six arguments:\r\n     * (objValue, srcValue, key, object, source, stack).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The destination object.\r\n     * @param {...Object} sources The source objects.\r\n     * @param {Function} customizer The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function customizer(objValue, srcValue) {\r\n     *   if (_.isArray(objValue)) {\r\n     *     return objValue.concat(srcValue);\r\n     *   }\r\n     * }\r\n     *\r\n     * var object = { 'a': [1], 'b': [2] };\r\n     * var other = { 'a': [3], 'b': [4] };\r\n     *\r\n     * _.mergeWith(object, other, customizer);\r\n     * // => { 'a': [1, 3], 'b': [2, 4] }\r\n     */\r\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\r\n      baseMerge(object, source, srcIndex, customizer);\r\n    });\r\n\r\n    /**\r\n     * The opposite of `_.pick`; this method creates an object composed of the\r\n     * own and inherited enumerable property paths of `object` that are not omitted.\r\n     *\r\n     * **Note:** This method is considerably slower than `_.pick`.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {...(string|string[])} [paths] The property paths to omit.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.omit(object, ['a', 'c']);\r\n     * // => { 'b': '2' }\r\n     */\r\n    var omit = flatRest(function(object, paths) {\r\n      var result = {};\r\n      if (object == null) {\r\n        return result;\r\n      }\r\n      var isDeep = false;\r\n      paths = arrayMap(paths, function(path) {\r\n        path = castPath(path, object);\r\n        isDeep || (isDeep = path.length > 1);\r\n        return path;\r\n      });\r\n      copyObject(object, getAllKeysIn(object), result);\r\n      if (isDeep) {\r\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\r\n      }\r\n      var length = paths.length;\r\n      while (length--) {\r\n        baseUnset(result, paths[length]);\r\n      }\r\n      return result;\r\n    });\r\n\r\n    /**\r\n     * The opposite of `_.pickBy`; this method creates an object composed of\r\n     * the own and inherited enumerable string keyed properties of `object` that\r\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\r\n     * arguments: (value, key).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function} [predicate=_.identity] The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.omitBy(object, _.isNumber);\r\n     * // => { 'b': '2' }\r\n     */\r\n    function omitBy(object, predicate) {\r\n      return pickBy(object, negate(getIteratee(predicate)));\r\n    }\r\n\r\n    /**\r\n     * Creates an object composed of the picked `object` properties.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {...(string|string[])} [paths] The property paths to pick.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.pick(object, ['a', 'c']);\r\n     * // => { 'a': 1, 'c': 3 }\r\n     */\r\n    var pick = flatRest(function(object, paths) {\r\n      return object == null ? {} : basePick(object, paths);\r\n    });\r\n\r\n    /**\r\n     * Creates an object composed of the `object` properties `predicate` returns\r\n     * truthy for. The predicate is invoked with two arguments: (value, key).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The source object.\r\n     * @param {Function} [predicate=_.identity] The function invoked per property.\r\n     * @returns {Object} Returns the new object.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\r\n     *\r\n     * _.pickBy(object, _.isNumber);\r\n     * // => { 'a': 1, 'c': 3 }\r\n     */\r\n    function pickBy(object, predicate) {\r\n      if (object == null) {\r\n        return {};\r\n      }\r\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\r\n        return [prop];\r\n      });\r\n      predicate = getIteratee(predicate);\r\n      return basePickBy(object, props, function(value, path) {\r\n        return predicate(value, path[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.get` except that if the resolved value is a\r\n     * function it's invoked with the `this` binding of its parent object and\r\n     * its result is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @param {Array|string} path The path of the property to resolve.\r\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\r\n     *\r\n     * _.result(object, 'a[0].b.c1');\r\n     * // => 3\r\n     *\r\n     * _.result(object, 'a[0].b.c2');\r\n     * // => 4\r\n     *\r\n     * _.result(object, 'a[0].b.c3', 'default');\r\n     * // => 'default'\r\n     *\r\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\r\n     * // => 'default'\r\n     */\r\n    function result(object, path, defaultValue) {\r\n      path = castPath(path, object);\r\n\r\n      var index = -1,\r\n          length = path.length;\r\n\r\n      // Ensure the loop is entered when path is empty.\r\n      if (!length) {\r\n        length = 1;\r\n        object = undefined;\r\n      }\r\n      while (++index < length) {\r\n        var value = object == null ? undefined : object[toKey(path[index])];\r\n        if (value === undefined) {\r\n          index = length;\r\n          value = defaultValue;\r\n        }\r\n        object = isFunction(value) ? value.call(object) : value;\r\n      }\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\r\n     * it's created. Arrays are created for missing index properties while objects\r\n     * are created for all other missing properties. Use `_.setWith` to customize\r\n     * `path` creation.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.set(object, 'a[0].b.c', 4);\r\n     * console.log(object.a[0].b.c);\r\n     * // => 4\r\n     *\r\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\r\n     * console.log(object.x[0].y.z);\r\n     * // => 5\r\n     */\r\n    function set(object, path, value) {\r\n      return object == null ? object : baseSet(object, path, value);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.set` except that it accepts `customizer` which is\r\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\r\n     * path creation is handled by the method instead. The `customizer` is invoked\r\n     * with three arguments: (nsValue, key, nsObject).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {*} value The value to set.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = {};\r\n     *\r\n     * _.setWith(object, '[0][1]', 'a', Object);\r\n     * // => { '0': { '1': 'a' } }\r\n     */\r\n    function setWith(object, path, value, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      return object == null ? object : baseSet(object, path, value, customizer);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of own enumerable string keyed-value pairs for `object`\r\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\r\n     * entries are returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @alias entries\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the key-value pairs.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.toPairs(new Foo);\r\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\r\n     */\r\n    var toPairs = createToPairs(keys);\r\n\r\n    /**\r\n     * Creates an array of own and inherited enumerable string keyed-value pairs\r\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\r\n     * or set, its entries are returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @alias entriesIn\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the key-value pairs.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.toPairsIn(new Foo);\r\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\r\n     */\r\n    var toPairsIn = createToPairs(keysIn);\r\n\r\n    /**\r\n     * An alternative to `_.reduce`; this method transforms `object` to a new\r\n     * `accumulator` object which is the result of running each of its own\r\n     * enumerable string keyed properties thru `iteratee`, with each invocation\r\n     * potentially mutating the `accumulator` object. If `accumulator` is not\r\n     * provided, a new object with the same `[[Prototype]]` will be used. The\r\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\r\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.3.0\r\n     * @category Object\r\n     * @param {Object} object The object to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @param {*} [accumulator] The custom accumulator value.\r\n     * @returns {*} Returns the accumulated value.\r\n     * @example\r\n     *\r\n     * _.transform([2, 3, 4], function(result, n) {\r\n     *   result.push(n *= n);\r\n     *   return n % 2 == 0;\r\n     * }, []);\r\n     * // => [4, 9]\r\n     *\r\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\r\n     *   (result[value] || (result[value] = [])).push(key);\r\n     * }, {});\r\n     * // => { '1': ['a', 'c'], '2': ['b'] }\r\n     */\r\n    function transform(object, iteratee, accumulator) {\r\n      var isArr = isArray(object),\r\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\r\n\r\n      iteratee = getIteratee(iteratee, 4);\r\n      if (accumulator == null) {\r\n        var Ctor = object && object.constructor;\r\n        if (isArrLike) {\r\n          accumulator = isArr ? new Ctor : [];\r\n        }\r\n        else if (isObject(object)) {\r\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\r\n        }\r\n        else {\r\n          accumulator = {};\r\n        }\r\n      }\r\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\r\n        return iteratee(accumulator, value, index, object);\r\n      });\r\n      return accumulator;\r\n    }\r\n\r\n    /**\r\n     * Removes the property at `path` of `object`.\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to unset.\r\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\r\n     * _.unset(object, 'a[0].b.c');\r\n     * // => true\r\n     *\r\n     * console.log(object);\r\n     * // => { 'a': [{ 'b': {} }] };\r\n     *\r\n     * _.unset(object, ['a', '0', 'b', 'c']);\r\n     * // => true\r\n     *\r\n     * console.log(object);\r\n     * // => { 'a': [{ 'b': {} }] };\r\n     */\r\n    function unset(object, path) {\r\n      return object == null ? true : baseUnset(object, path);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.set` except that accepts `updater` to produce the\r\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\r\n     * is invoked with one argument: (value).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.6.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {Function} updater The function to produce the updated value.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n     *\r\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\r\n     * console.log(object.a[0].b.c);\r\n     * // => 9\r\n     *\r\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\r\n     * console.log(object.x[0].y.z);\r\n     * // => 0\r\n     */\r\n    function update(object, path, updater) {\r\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.update` except that it accepts `customizer` which is\r\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\r\n     * path creation is handled by the method instead. The `customizer` is invoked\r\n     * with three arguments: (nsValue, key, nsObject).\r\n     *\r\n     * **Note:** This method mutates `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.6.0\r\n     * @category Object\r\n     * @param {Object} object The object to modify.\r\n     * @param {Array|string} path The path of the property to set.\r\n     * @param {Function} updater The function to produce the updated value.\r\n     * @param {Function} [customizer] The function to customize assigned values.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var object = {};\r\n     *\r\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\r\n     * // => { '0': { '1': 'a' } }\r\n     */\r\n    function updateWith(object, path, updater, customizer) {\r\n      customizer = typeof customizer == 'function' ? customizer : undefined;\r\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own enumerable string keyed property values of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property values.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.values(new Foo);\r\n     * // => [1, 2] (iteration order is not guaranteed)\r\n     *\r\n     * _.values('hi');\r\n     * // => ['h', 'i']\r\n     */\r\n    function values(object) {\r\n      return object == null ? [] : baseValues(object, keys(object));\r\n    }\r\n\r\n    /**\r\n     * Creates an array of the own and inherited enumerable string keyed property\r\n     * values of `object`.\r\n     *\r\n     * **Note:** Non-object values are coerced to objects.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Object\r\n     * @param {Object} object The object to query.\r\n     * @returns {Array} Returns the array of property values.\r\n     * @example\r\n     *\r\n     * function Foo() {\r\n     *   this.a = 1;\r\n     *   this.b = 2;\r\n     * }\r\n     *\r\n     * Foo.prototype.c = 3;\r\n     *\r\n     * _.valuesIn(new Foo);\r\n     * // => [1, 2, 3] (iteration order is not guaranteed)\r\n     */\r\n    function valuesIn(object) {\r\n      return object == null ? [] : baseValues(object, keysIn(object));\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Number\r\n     * @param {number} number The number to clamp.\r\n     * @param {number} [lower] The lower bound.\r\n     * @param {number} upper The upper bound.\r\n     * @returns {number} Returns the clamped number.\r\n     * @example\r\n     *\r\n     * _.clamp(-10, -5, 5);\r\n     * // => -5\r\n     *\r\n     * _.clamp(10, -5, 5);\r\n     * // => 5\r\n     */\r\n    function clamp(number, lower, upper) {\r\n      if (upper === undefined) {\r\n        upper = lower;\r\n        lower = undefined;\r\n      }\r\n      if (upper !== undefined) {\r\n        upper = toNumber(upper);\r\n        upper = upper === upper ? upper : 0;\r\n      }\r\n      if (lower !== undefined) {\r\n        lower = toNumber(lower);\r\n        lower = lower === lower ? lower : 0;\r\n      }\r\n      return baseClamp(toNumber(number), lower, upper);\r\n    }\r\n\r\n    /**\r\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\r\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\r\n     * If `start` is greater than `end` the params are swapped to support\r\n     * negative ranges.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.3.0\r\n     * @category Number\r\n     * @param {number} number The number to check.\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\r\n     * @see _.range, _.rangeRight\r\n     * @example\r\n     *\r\n     * _.inRange(3, 2, 4);\r\n     * // => true\r\n     *\r\n     * _.inRange(4, 8);\r\n     * // => true\r\n     *\r\n     * _.inRange(4, 2);\r\n     * // => false\r\n     *\r\n     * _.inRange(2, 2);\r\n     * // => false\r\n     *\r\n     * _.inRange(1.2, 2);\r\n     * // => true\r\n     *\r\n     * _.inRange(5.2, 4);\r\n     * // => false\r\n     *\r\n     * _.inRange(-3, -2, -6);\r\n     * // => true\r\n     */\r\n    function inRange(number, start, end) {\r\n      start = toFinite(start);\r\n      if (end === undefined) {\r\n        end = start;\r\n        start = 0;\r\n      } else {\r\n        end = toFinite(end);\r\n      }\r\n      number = toNumber(number);\r\n      return baseInRange(number, start, end);\r\n    }\r\n\r\n    /**\r\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\r\n     * If only one argument is provided a number between `0` and the given number\r\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\r\n     * floats, a floating-point number is returned instead of an integer.\r\n     *\r\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\r\n     * floating-point values which can produce unexpected results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.7.0\r\n     * @category Number\r\n     * @param {number} [lower=0] The lower bound.\r\n     * @param {number} [upper=1] The upper bound.\r\n     * @param {boolean} [floating] Specify returning a floating-point number.\r\n     * @returns {number} Returns the random number.\r\n     * @example\r\n     *\r\n     * _.random(0, 5);\r\n     * // => an integer between 0 and 5\r\n     *\r\n     * _.random(5);\r\n     * // => also an integer between 0 and 5\r\n     *\r\n     * _.random(5, true);\r\n     * // => a floating-point number between 0 and 5\r\n     *\r\n     * _.random(1.2, 5.2);\r\n     * // => a floating-point number between 1.2 and 5.2\r\n     */\r\n    function random(lower, upper, floating) {\r\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\r\n        upper = floating = undefined;\r\n      }\r\n      if (floating === undefined) {\r\n        if (typeof upper == 'boolean') {\r\n          floating = upper;\r\n          upper = undefined;\r\n        }\r\n        else if (typeof lower == 'boolean') {\r\n          floating = lower;\r\n          lower = undefined;\r\n        }\r\n      }\r\n      if (lower === undefined && upper === undefined) {\r\n        lower = 0;\r\n        upper = 1;\r\n      }\r\n      else {\r\n        lower = toFinite(lower);\r\n        if (upper === undefined) {\r\n          upper = lower;\r\n          lower = 0;\r\n        } else {\r\n          upper = toFinite(upper);\r\n        }\r\n      }\r\n      if (lower > upper) {\r\n        var temp = lower;\r\n        lower = upper;\r\n        upper = temp;\r\n      }\r\n      if (floating || lower % 1 || upper % 1) {\r\n        var rand = nativeRandom();\r\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\r\n      }\r\n      return baseRandom(lower, upper);\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the camel cased string.\r\n     * @example\r\n     *\r\n     * _.camelCase('Foo Bar');\r\n     * // => 'fooBar'\r\n     *\r\n     * _.camelCase('--foo-bar--');\r\n     * // => 'fooBar'\r\n     *\r\n     * _.camelCase('__FOO_BAR__');\r\n     * // => 'fooBar'\r\n     */\r\n    var camelCase = createCompounder(function(result, word, index) {\r\n      word = word.toLowerCase();\r\n      return result + (index ? capitalize(word) : word);\r\n    });\r\n\r\n    /**\r\n     * Converts the first character of `string` to upper case and the remaining\r\n     * to lower case.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to capitalize.\r\n     * @returns {string} Returns the capitalized string.\r\n     * @example\r\n     *\r\n     * _.capitalize('FRED');\r\n     * // => 'Fred'\r\n     */\r\n    function capitalize(string) {\r\n      return upperFirst(toString(string).toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * Deburrs `string` by converting\r\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\r\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\r\n     * letters to basic Latin letters and removing\r\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to deburr.\r\n     * @returns {string} Returns the deburred string.\r\n     * @example\r\n     *\r\n     * _.deburr('déjà vu');\r\n     * // => 'deja vu'\r\n     */\r\n    function deburr(string) {\r\n      string = toString(string);\r\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\r\n    }\r\n\r\n    /**\r\n     * Checks if `string` ends with the given target string.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to inspect.\r\n     * @param {string} [target] The string to search for.\r\n     * @param {number} [position=string.length] The position to search up to.\r\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.endsWith('abc', 'c');\r\n     * // => true\r\n     *\r\n     * _.endsWith('abc', 'b');\r\n     * // => false\r\n     *\r\n     * _.endsWith('abc', 'b', 2);\r\n     * // => true\r\n     */\r\n    function endsWith(string, target, position) {\r\n      string = toString(string);\r\n      target = baseToString(target);\r\n\r\n      var length = string.length;\r\n      position = position === undefined\r\n        ? length\r\n        : baseClamp(toInteger(position), 0, length);\r\n\r\n      var end = position;\r\n      position -= target.length;\r\n      return position >= 0 && string.slice(position, end) == target;\r\n    }\r\n\r\n    /**\r\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\r\n     * corresponding HTML entities.\r\n     *\r\n     * **Note:** No other characters are escaped. To escape additional\r\n     * characters use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * Though the \">\" character is escaped for symmetry, characters like\r\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\r\n     * unless they're part of a tag or unquoted attribute value. See\r\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\r\n     * (under \"semi-related fun fact\") for more details.\r\n     *\r\n     * When working with HTML you should always\r\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\r\n     * XSS vectors.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The string to escape.\r\n     * @returns {string} Returns the escaped string.\r\n     * @example\r\n     *\r\n     * _.escape('fred, barney, & pebbles');\r\n     * // => 'fred, barney, &amp; pebbles'\r\n     */\r\n    function escape(string) {\r\n      string = toString(string);\r\n      return (string && reHasUnescapedHtml.test(string))\r\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\r\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to escape.\r\n     * @returns {string} Returns the escaped string.\r\n     * @example\r\n     *\r\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\r\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\r\n     */\r\n    function escapeRegExp(string) {\r\n      string = toString(string);\r\n      return (string && reHasRegExpChar.test(string))\r\n        ? string.replace(reRegExpChar, '\\\\$&')\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to\r\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the kebab cased string.\r\n     * @example\r\n     *\r\n     * _.kebabCase('Foo Bar');\r\n     * // => 'foo-bar'\r\n     *\r\n     * _.kebabCase('fooBar');\r\n     * // => 'foo-bar'\r\n     *\r\n     * _.kebabCase('__FOO_BAR__');\r\n     * // => 'foo-bar'\r\n     */\r\n    var kebabCase = createCompounder(function(result, word, index) {\r\n      return result + (index ? '-' : '') + word.toLowerCase();\r\n    });\r\n\r\n    /**\r\n     * Converts `string`, as space separated words, to lower case.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the lower cased string.\r\n     * @example\r\n     *\r\n     * _.lowerCase('--Foo-Bar--');\r\n     * // => 'foo bar'\r\n     *\r\n     * _.lowerCase('fooBar');\r\n     * // => 'foo bar'\r\n     *\r\n     * _.lowerCase('__FOO_BAR__');\r\n     * // => 'foo bar'\r\n     */\r\n    var lowerCase = createCompounder(function(result, word, index) {\r\n      return result + (index ? ' ' : '') + word.toLowerCase();\r\n    });\r\n\r\n    /**\r\n     * Converts the first character of `string` to lower case.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the converted string.\r\n     * @example\r\n     *\r\n     * _.lowerFirst('Fred');\r\n     * // => 'fred'\r\n     *\r\n     * _.lowerFirst('FRED');\r\n     * // => 'fRED'\r\n     */\r\n    var lowerFirst = createCaseFirst('toLowerCase');\r\n\r\n    /**\r\n     * Pads `string` on the left and right sides if it's shorter than `length`.\r\n     * Padding characters are truncated if they can't be evenly divided by `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.pad('abc', 8);\r\n     * // => '  abc   '\r\n     *\r\n     * _.pad('abc', 8, '_-');\r\n     * // => '_-abc_-_'\r\n     *\r\n     * _.pad('abc', 3);\r\n     * // => 'abc'\r\n     */\r\n    function pad(string, length, chars) {\r\n      string = toString(string);\r\n      length = toInteger(length);\r\n\r\n      var strLength = length ? stringSize(string) : 0;\r\n      if (!length || strLength >= length) {\r\n        return string;\r\n      }\r\n      var mid = (length - strLength) / 2;\r\n      return (\r\n        createPadding(nativeFloor(mid), chars) +\r\n        string +\r\n        createPadding(nativeCeil(mid), chars)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Pads `string` on the right side if it's shorter than `length`. Padding\r\n     * characters are truncated if they exceed `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.padEnd('abc', 6);\r\n     * // => 'abc   '\r\n     *\r\n     * _.padEnd('abc', 6, '_-');\r\n     * // => 'abc_-_'\r\n     *\r\n     * _.padEnd('abc', 3);\r\n     * // => 'abc'\r\n     */\r\n    function padEnd(string, length, chars) {\r\n      string = toString(string);\r\n      length = toInteger(length);\r\n\r\n      var strLength = length ? stringSize(string) : 0;\r\n      return (length && strLength < length)\r\n        ? (string + createPadding(length - strLength, chars))\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Pads `string` on the left side if it's shorter than `length`. Padding\r\n     * characters are truncated if they exceed `length`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to pad.\r\n     * @param {number} [length=0] The padding length.\r\n     * @param {string} [chars=' '] The string used as padding.\r\n     * @returns {string} Returns the padded string.\r\n     * @example\r\n     *\r\n     * _.padStart('abc', 6);\r\n     * // => '   abc'\r\n     *\r\n     * _.padStart('abc', 6, '_-');\r\n     * // => '_-_abc'\r\n     *\r\n     * _.padStart('abc', 3);\r\n     * // => 'abc'\r\n     */\r\n    function padStart(string, length, chars) {\r\n      string = toString(string);\r\n      length = toInteger(length);\r\n\r\n      var strLength = length ? stringSize(string) : 0;\r\n      return (length && strLength < length)\r\n        ? (createPadding(length - strLength, chars) + string)\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to an integer of the specified radix. If `radix` is\r\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\r\n     * hexadecimal, in which case a `radix` of `16` is used.\r\n     *\r\n     * **Note:** This method aligns with the\r\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 1.1.0\r\n     * @category String\r\n     * @param {string} string The string to convert.\r\n     * @param {number} [radix=10] The radix to interpret `value` by.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {number} Returns the converted integer.\r\n     * @example\r\n     *\r\n     * _.parseInt('08');\r\n     * // => 8\r\n     *\r\n     * _.map(['6', '08', '10'], _.parseInt);\r\n     * // => [6, 8, 10]\r\n     */\r\n    function parseInt(string, radix, guard) {\r\n      if (guard || radix == null) {\r\n        radix = 0;\r\n      } else if (radix) {\r\n        radix = +radix;\r\n      }\r\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\r\n    }\r\n\r\n    /**\r\n     * Repeats the given string `n` times.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to repeat.\r\n     * @param {number} [n=1] The number of times to repeat the string.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {string} Returns the repeated string.\r\n     * @example\r\n     *\r\n     * _.repeat('*', 3);\r\n     * // => '***'\r\n     *\r\n     * _.repeat('abc', 2);\r\n     * // => 'abcabc'\r\n     *\r\n     * _.repeat('abc', 0);\r\n     * // => ''\r\n     */\r\n    function repeat(string, n, guard) {\r\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\r\n        n = 1;\r\n      } else {\r\n        n = toInteger(n);\r\n      }\r\n      return baseRepeat(toString(string), n);\r\n    }\r\n\r\n    /**\r\n     * Replaces matches for `pattern` in `string` with `replacement`.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`String#replace`](https://mdn.io/String/replace).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to modify.\r\n     * @param {RegExp|string} pattern The pattern to replace.\r\n     * @param {Function|string} replacement The match replacement.\r\n     * @returns {string} Returns the modified string.\r\n     * @example\r\n     *\r\n     * _.replace('Hi Fred', 'Fred', 'Barney');\r\n     * // => 'Hi Barney'\r\n     */\r\n    function replace() {\r\n      var args = arguments,\r\n          string = toString(args[0]);\r\n\r\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to\r\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the snake cased string.\r\n     * @example\r\n     *\r\n     * _.snakeCase('Foo Bar');\r\n     * // => 'foo_bar'\r\n     *\r\n     * _.snakeCase('fooBar');\r\n     * // => 'foo_bar'\r\n     *\r\n     * _.snakeCase('--FOO-BAR--');\r\n     * // => 'foo_bar'\r\n     */\r\n    var snakeCase = createCompounder(function(result, word, index) {\r\n      return result + (index ? '_' : '') + word.toLowerCase();\r\n    });\r\n\r\n    /**\r\n     * Splits `string` by `separator`.\r\n     *\r\n     * **Note:** This method is based on\r\n     * [`String#split`](https://mdn.io/String/split).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to split.\r\n     * @param {RegExp|string} separator The separator pattern to split by.\r\n     * @param {number} [limit] The length to truncate results to.\r\n     * @returns {Array} Returns the string segments.\r\n     * @example\r\n     *\r\n     * _.split('a-b-c', '-', 2);\r\n     * // => ['a', 'b']\r\n     */\r\n    function split(string, separator, limit) {\r\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\r\n        separator = limit = undefined;\r\n      }\r\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\r\n      if (!limit) {\r\n        return [];\r\n      }\r\n      string = toString(string);\r\n      if (string && (\r\n            typeof separator == 'string' ||\r\n            (separator != null && !isRegExp(separator))\r\n          )) {\r\n        separator = baseToString(separator);\r\n        if (!separator && hasUnicode(string)) {\r\n          return castSlice(stringToArray(string), 0, limit);\r\n        }\r\n      }\r\n      return string.split(separator, limit);\r\n    }\r\n\r\n    /**\r\n     * Converts `string` to\r\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.1.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the start cased string.\r\n     * @example\r\n     *\r\n     * _.startCase('--foo-bar--');\r\n     * // => 'Foo Bar'\r\n     *\r\n     * _.startCase('fooBar');\r\n     * // => 'Foo Bar'\r\n     *\r\n     * _.startCase('__FOO_BAR__');\r\n     * // => 'FOO BAR'\r\n     */\r\n    var startCase = createCompounder(function(result, word, index) {\r\n      return result + (index ? ' ' : '') + upperFirst(word);\r\n    });\r\n\r\n    /**\r\n     * Checks if `string` starts with the given target string.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to inspect.\r\n     * @param {string} [target] The string to search for.\r\n     * @param {number} [position=0] The position to search from.\r\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\r\n     *  else `false`.\r\n     * @example\r\n     *\r\n     * _.startsWith('abc', 'a');\r\n     * // => true\r\n     *\r\n     * _.startsWith('abc', 'b');\r\n     * // => false\r\n     *\r\n     * _.startsWith('abc', 'b', 1);\r\n     * // => true\r\n     */\r\n    function startsWith(string, target, position) {\r\n      string = toString(string);\r\n      position = position == null\r\n        ? 0\r\n        : baseClamp(toInteger(position), 0, string.length);\r\n\r\n      target = baseToString(target);\r\n      return string.slice(position, position + target.length) == target;\r\n    }\r\n\r\n    /**\r\n     * Creates a compiled template function that can interpolate data properties\r\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\r\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\r\n     * properties may be accessed as free variables in the template. If a setting\r\n     * object is given, it takes precedence over `_.templateSettings` values.\r\n     *\r\n     * **Note:** In the development build `_.template` utilizes\r\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\r\n     * for easier debugging.\r\n     *\r\n     * For more information on precompiling templates see\r\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\r\n     *\r\n     * For more information on Chrome extension sandboxes see\r\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category String\r\n     * @param {string} [string=''] The template string.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\r\n     *  The HTML \"escape\" delimiter.\r\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\r\n     *  The \"evaluate\" delimiter.\r\n     * @param {Object} [options.imports=_.templateSettings.imports]\r\n     *  An object to import into the template as free variables.\r\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\r\n     *  The \"interpolate\" delimiter.\r\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\r\n     *  The sourceURL of the compiled template.\r\n     * @param {string} [options.variable='obj']\r\n     *  The data object variable name.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Function} Returns the compiled template function.\r\n     * @example\r\n     *\r\n     * // Use the \"interpolate\" delimiter to create a compiled template.\r\n     * var compiled = _.template('hello <%= user %>!');\r\n     * compiled({ 'user': 'fred' });\r\n     * // => 'hello fred!'\r\n     *\r\n     * // Use the HTML \"escape\" delimiter to escape data property values.\r\n     * var compiled = _.template('<b><%- value %></b>');\r\n     * compiled({ 'value': '<script>' });\r\n     * // => '<b>&lt;script&gt;</b>'\r\n     *\r\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\r\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\r\n     * compiled({ 'users': ['fred', 'barney'] });\r\n     * // => '<li>fred</li><li>barney</li>'\r\n     *\r\n     * // Use the internal `print` function in \"evaluate\" delimiters.\r\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\r\n     * compiled({ 'user': 'barney' });\r\n     * // => 'hello barney!'\r\n     *\r\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\r\n     * // Disable support by replacing the \"interpolate\" delimiter.\r\n     * var compiled = _.template('hello ${ user }!');\r\n     * compiled({ 'user': 'pebbles' });\r\n     * // => 'hello pebbles!'\r\n     *\r\n     * // Use backslashes to treat delimiters as plain text.\r\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\r\n     * compiled({ 'value': 'ignored' });\r\n     * // => '<%- value %>'\r\n     *\r\n     * // Use the `imports` option to import `jQuery` as `jq`.\r\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\r\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\r\n     * compiled({ 'users': ['fred', 'barney'] });\r\n     * // => '<li>fred</li><li>barney</li>'\r\n     *\r\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\r\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\r\n     * compiled(data);\r\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\r\n     *\r\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\r\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\r\n     * compiled.source;\r\n     * // => function(data) {\r\n     * //   var __t, __p = '';\r\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\r\n     * //   return __p;\r\n     * // }\r\n     *\r\n     * // Use custom template delimiters.\r\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\r\n     * var compiled = _.template('hello {{ user }}!');\r\n     * compiled({ 'user': 'mustache' });\r\n     * // => 'hello mustache!'\r\n     *\r\n     * // Use the `source` property to inline compiled templates for meaningful\r\n     * // line numbers in error messages and stack traces.\r\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\r\n     *   var JST = {\\\r\n     *     \"main\": ' + _.template(mainText).source + '\\\r\n     *   };\\\r\n     * ');\r\n     */\r\n    function template(string, options, guard) {\r\n      // Based on John Resig's `tmpl` implementation\r\n      // (http://ejohn.org/blog/javascript-micro-templating/)\r\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\r\n      var settings = lodash.templateSettings;\r\n\r\n      if (guard && isIterateeCall(string, options, guard)) {\r\n        options = undefined;\r\n      }\r\n      string = toString(string);\r\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\r\n\r\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\r\n          importsKeys = keys(imports),\r\n          importsValues = baseValues(imports, importsKeys);\r\n\r\n      var isEscaping,\r\n          isEvaluating,\r\n          index = 0,\r\n          interpolate = options.interpolate || reNoMatch,\r\n          source = \"__p += '\";\r\n\r\n      // Compile the regexp to match each delimiter.\r\n      var reDelimiters = RegExp(\r\n        (options.escape || reNoMatch).source + '|' +\r\n        interpolate.source + '|' +\r\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\r\n        (options.evaluate || reNoMatch).source + '|$'\r\n      , 'g');\r\n\r\n      // Use a sourceURL for easier debugging.\r\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\r\n      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in\r\n      // and escape the comment, thus injecting code that gets evaled.\r\n      var sourceURL = '//# sourceURL=' +\r\n        (hasOwnProperty.call(options, 'sourceURL')\r\n          ? (options.sourceURL + '').replace(/\\s/g, ' ')\r\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\r\n        ) + '\\n';\r\n\r\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\r\n        interpolateValue || (interpolateValue = esTemplateValue);\r\n\r\n        // Escape characters that can't be included in string literals.\r\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\r\n\r\n        // Replace delimiters with snippets.\r\n        if (escapeValue) {\r\n          isEscaping = true;\r\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\r\n        }\r\n        if (evaluateValue) {\r\n          isEvaluating = true;\r\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\r\n        }\r\n        if (interpolateValue) {\r\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\r\n        }\r\n        index = offset + match.length;\r\n\r\n        // The JS engine embedded in Adobe products needs `match` returned in\r\n        // order to produce the correct `offset` value.\r\n        return match;\r\n      });\r\n\r\n      source += \"';\\n\";\r\n\r\n      // If `variable` is not specified wrap a with-statement around the generated\r\n      // code to add the data object to the top of the scope chain.\r\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\r\n      if (!variable) {\r\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\r\n      }\r\n      // Throw an error if a forbidden character was found in `variable`, to prevent\r\n      // potential command injection attacks.\r\n      else if (reForbiddenIdentifierChars.test(variable)) {\r\n        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);\r\n      }\r\n\r\n      // Cleanup code by stripping empty strings.\r\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\r\n        .replace(reEmptyStringMiddle, '$1')\r\n        .replace(reEmptyStringTrailing, '$1;');\r\n\r\n      // Frame code as the function body.\r\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\r\n        (variable\r\n          ? ''\r\n          : 'obj || (obj = {});\\n'\r\n        ) +\r\n        \"var __t, __p = ''\" +\r\n        (isEscaping\r\n           ? ', __e = _.escape'\r\n           : ''\r\n        ) +\r\n        (isEvaluating\r\n          ? ', __j = Array.prototype.join;\\n' +\r\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\r\n          : ';\\n'\r\n        ) +\r\n        source +\r\n        'return __p\\n}';\r\n\r\n      var result = attempt(function() {\r\n        return Function(importsKeys, sourceURL + 'return ' + source)\r\n          .apply(undefined, importsValues);\r\n      });\r\n\r\n      // Provide the compiled function's source by its `toString` method or\r\n      // the `source` property as a convenience for inlining compiled templates.\r\n      result.source = source;\r\n      if (isError(result)) {\r\n        throw result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Converts `string`, as a whole, to lower case just like\r\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the lower cased string.\r\n     * @example\r\n     *\r\n     * _.toLower('--Foo-Bar--');\r\n     * // => '--foo-bar--'\r\n     *\r\n     * _.toLower('fooBar');\r\n     * // => 'foobar'\r\n     *\r\n     * _.toLower('__FOO_BAR__');\r\n     * // => '__foo_bar__'\r\n     */\r\n    function toLower(value) {\r\n      return toString(value).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Converts `string`, as a whole, to upper case just like\r\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the upper cased string.\r\n     * @example\r\n     *\r\n     * _.toUpper('--foo-bar--');\r\n     * // => '--FOO-BAR--'\r\n     *\r\n     * _.toUpper('fooBar');\r\n     * // => 'FOOBAR'\r\n     *\r\n     * _.toUpper('__foo_bar__');\r\n     * // => '__FOO_BAR__'\r\n     */\r\n    function toUpper(value) {\r\n      return toString(value).toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Removes leading and trailing whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trim('  abc  ');\r\n     * // => 'abc'\r\n     *\r\n     * _.trim('-_-abc-_-', '_-');\r\n     * // => 'abc'\r\n     *\r\n     * _.map(['  foo  ', '  bar  '], _.trim);\r\n     * // => ['foo', 'bar']\r\n     */\r\n    function trim(string, chars, guard) {\r\n      string = toString(string);\r\n      if (string && (guard || chars === undefined)) {\r\n        return baseTrim(string);\r\n      }\r\n      if (!string || !(chars = baseToString(chars))) {\r\n        return string;\r\n      }\r\n      var strSymbols = stringToArray(string),\r\n          chrSymbols = stringToArray(chars),\r\n          start = charsStartIndex(strSymbols, chrSymbols),\r\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n      return castSlice(strSymbols, start, end).join('');\r\n    }\r\n\r\n    /**\r\n     * Removes trailing whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trimEnd('  abc  ');\r\n     * // => '  abc'\r\n     *\r\n     * _.trimEnd('-_-abc-_-', '_-');\r\n     * // => '-_-abc'\r\n     */\r\n    function trimEnd(string, chars, guard) {\r\n      string = toString(string);\r\n      if (string && (guard || chars === undefined)) {\r\n        return string.slice(0, trimmedEndIndex(string) + 1);\r\n      }\r\n      if (!string || !(chars = baseToString(chars))) {\r\n        return string;\r\n      }\r\n      var strSymbols = stringToArray(string),\r\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\r\n\r\n      return castSlice(strSymbols, 0, end).join('');\r\n    }\r\n\r\n    /**\r\n     * Removes leading whitespace or specified characters from `string`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to trim.\r\n     * @param {string} [chars=whitespace] The characters to trim.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {string} Returns the trimmed string.\r\n     * @example\r\n     *\r\n     * _.trimStart('  abc  ');\r\n     * // => 'abc  '\r\n     *\r\n     * _.trimStart('-_-abc-_-', '_-');\r\n     * // => 'abc-_-'\r\n     */\r\n    function trimStart(string, chars, guard) {\r\n      string = toString(string);\r\n      if (string && (guard || chars === undefined)) {\r\n        return string.replace(reTrimStart, '');\r\n      }\r\n      if (!string || !(chars = baseToString(chars))) {\r\n        return string;\r\n      }\r\n      var strSymbols = stringToArray(string),\r\n          start = charsStartIndex(strSymbols, stringToArray(chars));\r\n\r\n      return castSlice(strSymbols, start).join('');\r\n    }\r\n\r\n    /**\r\n     * Truncates `string` if it's longer than the given maximum string length.\r\n     * The last characters of the truncated string are replaced with the omission\r\n     * string which defaults to \"...\".\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to truncate.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {number} [options.length=30] The maximum string length.\r\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\r\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\r\n     * @returns {string} Returns the truncated string.\r\n     * @example\r\n     *\r\n     * _.truncate('hi-diddly-ho there, neighborino');\r\n     * // => 'hi-diddly-ho there, neighbo...'\r\n     *\r\n     * _.truncate('hi-diddly-ho there, neighborino', {\r\n     *   'length': 24,\r\n     *   'separator': ' '\r\n     * });\r\n     * // => 'hi-diddly-ho there,...'\r\n     *\r\n     * _.truncate('hi-diddly-ho there, neighborino', {\r\n     *   'length': 24,\r\n     *   'separator': /,? +/\r\n     * });\r\n     * // => 'hi-diddly-ho there...'\r\n     *\r\n     * _.truncate('hi-diddly-ho there, neighborino', {\r\n     *   'omission': ' [...]'\r\n     * });\r\n     * // => 'hi-diddly-ho there, neig [...]'\r\n     */\r\n    function truncate(string, options) {\r\n      var length = DEFAULT_TRUNC_LENGTH,\r\n          omission = DEFAULT_TRUNC_OMISSION;\r\n\r\n      if (isObject(options)) {\r\n        var separator = 'separator' in options ? options.separator : separator;\r\n        length = 'length' in options ? toInteger(options.length) : length;\r\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\r\n      }\r\n      string = toString(string);\r\n\r\n      var strLength = string.length;\r\n      if (hasUnicode(string)) {\r\n        var strSymbols = stringToArray(string);\r\n        strLength = strSymbols.length;\r\n      }\r\n      if (length >= strLength) {\r\n        return string;\r\n      }\r\n      var end = length - stringSize(omission);\r\n      if (end < 1) {\r\n        return omission;\r\n      }\r\n      var result = strSymbols\r\n        ? castSlice(strSymbols, 0, end).join('')\r\n        : string.slice(0, end);\r\n\r\n      if (separator === undefined) {\r\n        return result + omission;\r\n      }\r\n      if (strSymbols) {\r\n        end += (result.length - end);\r\n      }\r\n      if (isRegExp(separator)) {\r\n        if (string.slice(end).search(separator)) {\r\n          var match,\r\n              substring = result;\r\n\r\n          if (!separator.global) {\r\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\r\n          }\r\n          separator.lastIndex = 0;\r\n          while ((match = separator.exec(substring))) {\r\n            var newEnd = match.index;\r\n          }\r\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\r\n        }\r\n      } else if (string.indexOf(baseToString(separator), end) != end) {\r\n        var index = result.lastIndexOf(separator);\r\n        if (index > -1) {\r\n          result = result.slice(0, index);\r\n        }\r\n      }\r\n      return result + omission;\r\n    }\r\n\r\n    /**\r\n     * The inverse of `_.escape`; this method converts the HTML entities\r\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\r\n     * their corresponding characters.\r\n     *\r\n     * **Note:** No other HTML entities are unescaped. To unescape additional\r\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.6.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to unescape.\r\n     * @returns {string} Returns the unescaped string.\r\n     * @example\r\n     *\r\n     * _.unescape('fred, barney, &amp; pebbles');\r\n     * // => 'fred, barney, & pebbles'\r\n     */\r\n    function unescape(string) {\r\n      string = toString(string);\r\n      return (string && reHasEscapedHtml.test(string))\r\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\r\n        : string;\r\n    }\r\n\r\n    /**\r\n     * Converts `string`, as space separated words, to upper case.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the upper cased string.\r\n     * @example\r\n     *\r\n     * _.upperCase('--foo-bar');\r\n     * // => 'FOO BAR'\r\n     *\r\n     * _.upperCase('fooBar');\r\n     * // => 'FOO BAR'\r\n     *\r\n     * _.upperCase('__foo_bar__');\r\n     * // => 'FOO BAR'\r\n     */\r\n    var upperCase = createCompounder(function(result, word, index) {\r\n      return result + (index ? ' ' : '') + word.toUpperCase();\r\n    });\r\n\r\n    /**\r\n     * Converts the first character of `string` to upper case.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to convert.\r\n     * @returns {string} Returns the converted string.\r\n     * @example\r\n     *\r\n     * _.upperFirst('fred');\r\n     * // => 'Fred'\r\n     *\r\n     * _.upperFirst('FRED');\r\n     * // => 'FRED'\r\n     */\r\n    var upperFirst = createCaseFirst('toUpperCase');\r\n\r\n    /**\r\n     * Splits `string` into an array of its words.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category String\r\n     * @param {string} [string=''] The string to inspect.\r\n     * @param {RegExp|string} [pattern] The pattern to match words.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n     * @returns {Array} Returns the words of `string`.\r\n     * @example\r\n     *\r\n     * _.words('fred, barney, & pebbles');\r\n     * // => ['fred', 'barney', 'pebbles']\r\n     *\r\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\r\n     * // => ['fred', 'barney', '&', 'pebbles']\r\n     */\r\n    function words(string, pattern, guard) {\r\n      string = toString(string);\r\n      pattern = guard ? undefined : pattern;\r\n\r\n      if (pattern === undefined) {\r\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\r\n      }\r\n      return string.match(pattern) || [];\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Attempts to invoke `func`, returning either the result or the caught error\r\n     * object. Any additional arguments are provided to `func` when it's invoked.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Util\r\n     * @param {Function} func The function to attempt.\r\n     * @param {...*} [args] The arguments to invoke `func` with.\r\n     * @returns {*} Returns the `func` result or error object.\r\n     * @example\r\n     *\r\n     * // Avoid throwing errors for invalid selectors.\r\n     * var elements = _.attempt(function(selector) {\r\n     *   return document.querySelectorAll(selector);\r\n     * }, '>_>');\r\n     *\r\n     * if (_.isError(elements)) {\r\n     *   elements = [];\r\n     * }\r\n     */\r\n    var attempt = baseRest(function(func, args) {\r\n      try {\r\n        return apply(func, undefined, args);\r\n      } catch (e) {\r\n        return isError(e) ? e : new Error(e);\r\n      }\r\n    });\r\n\r\n    /**\r\n     * Binds methods of an object to the object itself, overwriting the existing\r\n     * method.\r\n     *\r\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {Object} object The object to bind and assign the bound methods to.\r\n     * @param {...(string|string[])} methodNames The object method names to bind.\r\n     * @returns {Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * var view = {\r\n     *   'label': 'docs',\r\n     *   'click': function() {\r\n     *     console.log('clicked ' + this.label);\r\n     *   }\r\n     * };\r\n     *\r\n     * _.bindAll(view, ['click']);\r\n     * jQuery(element).on('click', view.click);\r\n     * // => Logs 'clicked docs' when clicked.\r\n     */\r\n    var bindAll = flatRest(function(object, methodNames) {\r\n      arrayEach(methodNames, function(key) {\r\n        key = toKey(key);\r\n        baseAssignValue(object, key, bind(object[key], object));\r\n      });\r\n      return object;\r\n    });\r\n\r\n    /**\r\n     * Creates a function that iterates over `pairs` and invokes the corresponding\r\n     * function of the first predicate to return truthy. The predicate-function\r\n     * pairs are invoked with the `this` binding and arguments of the created\r\n     * function.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {Array} pairs The predicate-function pairs.\r\n     * @returns {Function} Returns the new composite function.\r\n     * @example\r\n     *\r\n     * var func = _.cond([\r\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\r\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\r\n     *   [_.stubTrue,                      _.constant('no match')]\r\n     * ]);\r\n     *\r\n     * func({ 'a': 1, 'b': 2 });\r\n     * // => 'matches A'\r\n     *\r\n     * func({ 'a': 0, 'b': 1 });\r\n     * // => 'matches B'\r\n     *\r\n     * func({ 'a': '1', 'b': '2' });\r\n     * // => 'no match'\r\n     */\r\n    function cond(pairs) {\r\n      var length = pairs == null ? 0 : pairs.length,\r\n          toIteratee = getIteratee();\r\n\r\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\r\n        if (typeof pair[1] != 'function') {\r\n          throw new TypeError(FUNC_ERROR_TEXT);\r\n        }\r\n        return [toIteratee(pair[0]), pair[1]];\r\n      });\r\n\r\n      return baseRest(function(args) {\r\n        var index = -1;\r\n        while (++index < length) {\r\n          var pair = pairs[index];\r\n          if (apply(pair[0], this, args)) {\r\n            return apply(pair[1], this, args);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes the predicate properties of `source` with\r\n     * the corresponding property values of a given object, returning `true` if\r\n     * all predicates return truthy, else `false`.\r\n     *\r\n     * **Note:** The created function is equivalent to `_.conformsTo` with\r\n     * `source` partially applied.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {Object} source The object of property predicates to conform to.\r\n     * @returns {Function} Returns the new spec function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': 2, 'b': 1 },\r\n     *   { 'a': 1, 'b': 2 }\r\n     * ];\r\n     *\r\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\r\n     * // => [{ 'a': 1, 'b': 2 }]\r\n     */\r\n    function conforms(source) {\r\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that returns `value`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Util\r\n     * @param {*} value The value to return from the new function.\r\n     * @returns {Function} Returns the new constant function.\r\n     * @example\r\n     *\r\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n     *\r\n     * console.log(objects);\r\n     * // => [{ 'a': 1 }, { 'a': 1 }]\r\n     *\r\n     * console.log(objects[0] === objects[1]);\r\n     * // => true\r\n     */\r\n    function constant(value) {\r\n      return function() {\r\n        return value;\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Checks `value` to determine whether a default value should be returned in\r\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\r\n     * or `undefined`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.14.0\r\n     * @category Util\r\n     * @param {*} value The value to check.\r\n     * @param {*} defaultValue The default value.\r\n     * @returns {*} Returns the resolved value.\r\n     * @example\r\n     *\r\n     * _.defaultTo(1, 10);\r\n     * // => 1\r\n     *\r\n     * _.defaultTo(undefined, 10);\r\n     * // => 10\r\n     */\r\n    function defaultTo(value, defaultValue) {\r\n      return (value == null || value !== value) ? defaultValue : value;\r\n    }\r\n\r\n    /**\r\n     * Creates a function that returns the result of invoking the given functions\r\n     * with the `this` binding of the created function, where each successive\r\n     * invocation is supplied the return value of the previous.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Util\r\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\r\n     * @returns {Function} Returns the new composite function.\r\n     * @see _.flowRight\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var addSquare = _.flow([_.add, square]);\r\n     * addSquare(1, 2);\r\n     * // => 9\r\n     */\r\n    var flow = createFlow();\r\n\r\n    /**\r\n     * This method is like `_.flow` except that it creates a function that\r\n     * invokes the given functions from right to left.\r\n     *\r\n     * @static\r\n     * @since 3.0.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\r\n     * @returns {Function} Returns the new composite function.\r\n     * @see _.flow\r\n     * @example\r\n     *\r\n     * function square(n) {\r\n     *   return n * n;\r\n     * }\r\n     *\r\n     * var addSquare = _.flowRight([square, _.add]);\r\n     * addSquare(1, 2);\r\n     * // => 9\r\n     */\r\n    var flowRight = createFlow(true);\r\n\r\n    /**\r\n     * This method returns the first argument it receives.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {*} value Any value.\r\n     * @returns {*} Returns `value`.\r\n     * @example\r\n     *\r\n     * var object = { 'a': 1 };\r\n     *\r\n     * console.log(_.identity(object) === object);\r\n     * // => true\r\n     */\r\n    function identity(value) {\r\n      return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `func` with the arguments of the created\r\n     * function. If `func` is a property name, the created function returns the\r\n     * property value for a given element. If `func` is an array or object, the\r\n     * created function returns `true` for elements that contain the equivalent\r\n     * source properties, otherwise it returns `false`.\r\n     *\r\n     * @static\r\n     * @since 4.0.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {*} [func=_.identity] The value to convert to a callback.\r\n     * @returns {Function} Returns the callback.\r\n     * @example\r\n     *\r\n     * var users = [\r\n     *   { 'user': 'barney', 'age': 36, 'active': true },\r\n     *   { 'user': 'fred',   'age': 40, 'active': false }\r\n     * ];\r\n     *\r\n     * // The `_.matches` iteratee shorthand.\r\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\r\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\r\n     *\r\n     * // The `_.matchesProperty` iteratee shorthand.\r\n     * _.filter(users, _.iteratee(['user', 'fred']));\r\n     * // => [{ 'user': 'fred', 'age': 40 }]\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.map(users, _.iteratee('user'));\r\n     * // => ['barney', 'fred']\r\n     *\r\n     * // Create custom iteratee shorthands.\r\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\r\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\r\n     *     return func.test(string);\r\n     *   };\r\n     * });\r\n     *\r\n     * _.filter(['abc', 'def'], /ef/);\r\n     * // => ['def']\r\n     */\r\n    function iteratee(func) {\r\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that performs a partial deep comparison between a given\r\n     * object and `source`, returning `true` if the given object has equivalent\r\n     * property values, else `false`.\r\n     *\r\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\r\n     * partially applied.\r\n     *\r\n     * Partial comparisons will match empty array and empty object `source`\r\n     * values against any array or object value, respectively. See `_.isEqual`\r\n     * for a list of supported value comparisons.\r\n     *\r\n     * **Note:** Multiple values can be checked by combining several matchers\r\n     * using `_.overSome`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Util\r\n     * @param {Object} source The object of property values to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': 1, 'b': 2, 'c': 3 },\r\n     *   { 'a': 4, 'b': 5, 'c': 6 }\r\n     * ];\r\n     *\r\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\r\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\r\n     *\r\n     * // Checking for several possible values\r\n     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\r\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\r\n     */\r\n    function matches(source) {\r\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that performs a partial deep comparison between the\r\n     * value at `path` of a given object to `srcValue`, returning `true` if the\r\n     * object value is equivalent, else `false`.\r\n     *\r\n     * **Note:** Partial comparisons will match empty array and empty object\r\n     * `srcValue` values against any array or object value, respectively. See\r\n     * `_.isEqual` for a list of supported value comparisons.\r\n     *\r\n     * **Note:** Multiple values can be checked by combining several matchers\r\n     * using `_.overSome`\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.2.0\r\n     * @category Util\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @param {*} srcValue The value to match.\r\n     * @returns {Function} Returns the new spec function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': 1, 'b': 2, 'c': 3 },\r\n     *   { 'a': 4, 'b': 5, 'c': 6 }\r\n     * ];\r\n     *\r\n     * _.find(objects, _.matchesProperty('a', 4));\r\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\r\n     *\r\n     * // Checking for several possible values\r\n     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\r\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\r\n     */\r\n    function matchesProperty(path, srcValue) {\r\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes the method at `path` of a given object.\r\n     * Any additional arguments are provided to the invoked method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Util\r\n     * @param {Array|string} path The path of the method to invoke.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {Function} Returns the new invoker function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': { 'b': _.constant(2) } },\r\n     *   { 'a': { 'b': _.constant(1) } }\r\n     * ];\r\n     *\r\n     * _.map(objects, _.method('a.b'));\r\n     * // => [2, 1]\r\n     *\r\n     * _.map(objects, _.method(['a', 'b']));\r\n     * // => [2, 1]\r\n     */\r\n    var method = baseRest(function(path, args) {\r\n      return function(object) {\r\n        return baseInvoke(object, path, args);\r\n      };\r\n    });\r\n\r\n    /**\r\n     * The opposite of `_.method`; this method creates a function that invokes\r\n     * the method at a given path of `object`. Any additional arguments are\r\n     * provided to the invoked method.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.7.0\r\n     * @category Util\r\n     * @param {Object} object The object to query.\r\n     * @param {...*} [args] The arguments to invoke the method with.\r\n     * @returns {Function} Returns the new invoker function.\r\n     * @example\r\n     *\r\n     * var array = _.times(3, _.constant),\r\n     *     object = { 'a': array, 'b': array, 'c': array };\r\n     *\r\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\r\n     * // => [2, 0]\r\n     *\r\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\r\n     * // => [2, 0]\r\n     */\r\n    var methodOf = baseRest(function(object, args) {\r\n      return function(path) {\r\n        return baseInvoke(object, path, args);\r\n      };\r\n    });\r\n\r\n    /**\r\n     * Adds all own enumerable string keyed function properties of a source\r\n     * object to the destination object. If `object` is a function, then methods\r\n     * are added to its prototype as well.\r\n     *\r\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\r\n     * avoid conflicts caused by modifying the original.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {Function|Object} [object=lodash] The destination object.\r\n     * @param {Object} source The object of functions to add.\r\n     * @param {Object} [options={}] The options object.\r\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\r\n     * @returns {Function|Object} Returns `object`.\r\n     * @example\r\n     *\r\n     * function vowels(string) {\r\n     *   return _.filter(string, function(v) {\r\n     *     return /[aeiou]/i.test(v);\r\n     *   });\r\n     * }\r\n     *\r\n     * _.mixin({ 'vowels': vowels });\r\n     * _.vowels('fred');\r\n     * // => ['e']\r\n     *\r\n     * _('fred').vowels().value();\r\n     * // => ['e']\r\n     *\r\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\r\n     * _('fred').vowels();\r\n     * // => ['e']\r\n     */\r\n    function mixin(object, source, options) {\r\n      var props = keys(source),\r\n          methodNames = baseFunctions(source, props);\r\n\r\n      if (options == null &&\r\n          !(isObject(source) && (methodNames.length || !props.length))) {\r\n        options = source;\r\n        source = object;\r\n        object = this;\r\n        methodNames = baseFunctions(source, keys(source));\r\n      }\r\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\r\n          isFunc = isFunction(object);\r\n\r\n      arrayEach(methodNames, function(methodName) {\r\n        var func = source[methodName];\r\n        object[methodName] = func;\r\n        if (isFunc) {\r\n          object.prototype[methodName] = function() {\r\n            var chainAll = this.__chain__;\r\n            if (chain || chainAll) {\r\n              var result = object(this.__wrapped__),\r\n                  actions = result.__actions__ = copyArray(this.__actions__);\r\n\r\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\r\n              result.__chain__ = chainAll;\r\n              return result;\r\n            }\r\n            return func.apply(object, arrayPush([this.value()], arguments));\r\n          };\r\n        }\r\n      });\r\n\r\n      return object;\r\n    }\r\n\r\n    /**\r\n     * Reverts the `_` variable to its previous value and returns a reference to\r\n     * the `lodash` function.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @returns {Function} Returns the `lodash` function.\r\n     * @example\r\n     *\r\n     * var lodash = _.noConflict();\r\n     */\r\n    function noConflict() {\r\n      if (root._ === this) {\r\n        root._ = oldDash;\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * This method returns `undefined`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.3.0\r\n     * @category Util\r\n     * @example\r\n     *\r\n     * _.times(2, _.noop);\r\n     * // => [undefined, undefined]\r\n     */\r\n    function noop() {\r\n      // No operation performed.\r\n    }\r\n\r\n    /**\r\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\r\n     * the nth argument from the end is returned.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {number} [n=0] The index of the argument to return.\r\n     * @returns {Function} Returns the new pass-thru function.\r\n     * @example\r\n     *\r\n     * var func = _.nthArg(1);\r\n     * func('a', 'b', 'c', 'd');\r\n     * // => 'b'\r\n     *\r\n     * var func = _.nthArg(-2);\r\n     * func('a', 'b', 'c', 'd');\r\n     * // => 'c'\r\n     */\r\n    function nthArg(n) {\r\n      n = toInteger(n);\r\n      return baseRest(function(args) {\r\n        return baseNth(args, n);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Creates a function that invokes `iteratees` with the arguments it receives\r\n     * and returns their results.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\r\n     *  The iteratees to invoke.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var func = _.over([Math.max, Math.min]);\r\n     *\r\n     * func(1, 2, 3, 4);\r\n     * // => [4, 1]\r\n     */\r\n    var over = createOver(arrayMap);\r\n\r\n    /**\r\n     * Creates a function that checks if **all** of the `predicates` return\r\n     * truthy when invoked with the arguments it receives.\r\n     *\r\n     * Following shorthands are possible for providing predicates.\r\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\r\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\r\n     *  The predicates to check.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var func = _.overEvery([Boolean, isFinite]);\r\n     *\r\n     * func('1');\r\n     * // => true\r\n     *\r\n     * func(null);\r\n     * // => false\r\n     *\r\n     * func(NaN);\r\n     * // => false\r\n     */\r\n    var overEvery = createOver(arrayEvery);\r\n\r\n    /**\r\n     * Creates a function that checks if **any** of the `predicates` return\r\n     * truthy when invoked with the arguments it receives.\r\n     *\r\n     * Following shorthands are possible for providing predicates.\r\n     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.\r\n     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\r\n     *  The predicates to check.\r\n     * @returns {Function} Returns the new function.\r\n     * @example\r\n     *\r\n     * var func = _.overSome([Boolean, isFinite]);\r\n     *\r\n     * func('1');\r\n     * // => true\r\n     *\r\n     * func(null);\r\n     * // => true\r\n     *\r\n     * func(NaN);\r\n     * // => false\r\n     *\r\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\r\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\r\n     */\r\n    var overSome = createOver(arraySome);\r\n\r\n    /**\r\n     * Creates a function that returns the value at `path` of a given object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 2.4.0\r\n     * @category Util\r\n     * @param {Array|string} path The path of the property to get.\r\n     * @returns {Function} Returns the new accessor function.\r\n     * @example\r\n     *\r\n     * var objects = [\r\n     *   { 'a': { 'b': 2 } },\r\n     *   { 'a': { 'b': 1 } }\r\n     * ];\r\n     *\r\n     * _.map(objects, _.property('a.b'));\r\n     * // => [2, 1]\r\n     *\r\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\r\n     * // => [1, 2]\r\n     */\r\n    function property(path) {\r\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\r\n    }\r\n\r\n    /**\r\n     * The opposite of `_.property`; this method creates a function that returns\r\n     * the value at a given path of `object`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.0.0\r\n     * @category Util\r\n     * @param {Object} object The object to query.\r\n     * @returns {Function} Returns the new accessor function.\r\n     * @example\r\n     *\r\n     * var array = [0, 1, 2],\r\n     *     object = { 'a': array, 'b': array, 'c': array };\r\n     *\r\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\r\n     * // => [2, 0]\r\n     *\r\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\r\n     * // => [2, 0]\r\n     */\r\n    function propertyOf(object) {\r\n      return function(path) {\r\n        return object == null ? undefined : baseGet(object, path);\r\n      };\r\n    }\r\n\r\n    /**\r\n     * Creates an array of numbers (positive and/or negative) progressing from\r\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\r\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\r\n     * it's set to `start` with `start` then set to `0`.\r\n     *\r\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\r\n     * floating-point values which can produce unexpected results.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} [step=1] The value to increment or decrement by.\r\n     * @returns {Array} Returns the range of numbers.\r\n     * @see _.inRange, _.rangeRight\r\n     * @example\r\n     *\r\n     * _.range(4);\r\n     * // => [0, 1, 2, 3]\r\n     *\r\n     * _.range(-4);\r\n     * // => [0, -1, -2, -3]\r\n     *\r\n     * _.range(1, 5);\r\n     * // => [1, 2, 3, 4]\r\n     *\r\n     * _.range(0, 20, 5);\r\n     * // => [0, 5, 10, 15]\r\n     *\r\n     * _.range(0, -4, -1);\r\n     * // => [0, -1, -2, -3]\r\n     *\r\n     * _.range(1, 4, 0);\r\n     * // => [1, 1, 1]\r\n     *\r\n     * _.range(0);\r\n     * // => []\r\n     */\r\n    var range = createRange();\r\n\r\n    /**\r\n     * This method is like `_.range` except that it populates values in\r\n     * descending order.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {number} [start=0] The start of the range.\r\n     * @param {number} end The end of the range.\r\n     * @param {number} [step=1] The value to increment or decrement by.\r\n     * @returns {Array} Returns the range of numbers.\r\n     * @see _.inRange, _.range\r\n     * @example\r\n     *\r\n     * _.rangeRight(4);\r\n     * // => [3, 2, 1, 0]\r\n     *\r\n     * _.rangeRight(-4);\r\n     * // => [-3, -2, -1, 0]\r\n     *\r\n     * _.rangeRight(1, 5);\r\n     * // => [4, 3, 2, 1]\r\n     *\r\n     * _.rangeRight(0, 20, 5);\r\n     * // => [15, 10, 5, 0]\r\n     *\r\n     * _.rangeRight(0, -4, -1);\r\n     * // => [-3, -2, -1, 0]\r\n     *\r\n     * _.rangeRight(1, 4, 0);\r\n     * // => [1, 1, 1]\r\n     *\r\n     * _.rangeRight(0);\r\n     * // => []\r\n     */\r\n    var rangeRight = createRange(true);\r\n\r\n    /**\r\n     * This method returns a new empty array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {Array} Returns the new empty array.\r\n     * @example\r\n     *\r\n     * var arrays = _.times(2, _.stubArray);\r\n     *\r\n     * console.log(arrays);\r\n     * // => [[], []]\r\n     *\r\n     * console.log(arrays[0] === arrays[1]);\r\n     * // => false\r\n     */\r\n    function stubArray() {\r\n      return [];\r\n    }\r\n\r\n    /**\r\n     * This method returns `false`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {boolean} Returns `false`.\r\n     * @example\r\n     *\r\n     * _.times(2, _.stubFalse);\r\n     * // => [false, false]\r\n     */\r\n    function stubFalse() {\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * This method returns a new empty object.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {Object} Returns the new empty object.\r\n     * @example\r\n     *\r\n     * var objects = _.times(2, _.stubObject);\r\n     *\r\n     * console.log(objects);\r\n     * // => [{}, {}]\r\n     *\r\n     * console.log(objects[0] === objects[1]);\r\n     * // => false\r\n     */\r\n    function stubObject() {\r\n      return {};\r\n    }\r\n\r\n    /**\r\n     * This method returns an empty string.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {string} Returns the empty string.\r\n     * @example\r\n     *\r\n     * _.times(2, _.stubString);\r\n     * // => ['', '']\r\n     */\r\n    function stubString() {\r\n      return '';\r\n    }\r\n\r\n    /**\r\n     * This method returns `true`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.13.0\r\n     * @category Util\r\n     * @returns {boolean} Returns `true`.\r\n     * @example\r\n     *\r\n     * _.times(2, _.stubTrue);\r\n     * // => [true, true]\r\n     */\r\n    function stubTrue() {\r\n      return true;\r\n    }\r\n\r\n    /**\r\n     * Invokes the iteratee `n` times, returning an array of the results of\r\n     * each invocation. The iteratee is invoked with one argument; (index).\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {number} n The number of times to invoke `iteratee`.\r\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\r\n     * @returns {Array} Returns the array of results.\r\n     * @example\r\n     *\r\n     * _.times(3, String);\r\n     * // => ['0', '1', '2']\r\n     *\r\n     *  _.times(4, _.constant(0));\r\n     * // => [0, 0, 0, 0]\r\n     */\r\n    function times(n, iteratee) {\r\n      n = toInteger(n);\r\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\r\n        return [];\r\n      }\r\n      var index = MAX_ARRAY_LENGTH,\r\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\r\n\r\n      iteratee = getIteratee(iteratee);\r\n      n -= MAX_ARRAY_LENGTH;\r\n\r\n      var result = baseTimes(length, iteratee);\r\n      while (++index < n) {\r\n        iteratee(index);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    /**\r\n     * Converts `value` to a property path array.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Util\r\n     * @param {*} value The value to convert.\r\n     * @returns {Array} Returns the new property path array.\r\n     * @example\r\n     *\r\n     * _.toPath('a.b.c');\r\n     * // => ['a', 'b', 'c']\r\n     *\r\n     * _.toPath('a[0].b.c');\r\n     * // => ['a', '0', 'b', 'c']\r\n     */\r\n    function toPath(value) {\r\n      if (isArray(value)) {\r\n        return arrayMap(value, toKey);\r\n      }\r\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\r\n    }\r\n\r\n    /**\r\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Util\r\n     * @param {string} [prefix=''] The value to prefix the ID with.\r\n     * @returns {string} Returns the unique ID.\r\n     * @example\r\n     *\r\n     * _.uniqueId('contact_');\r\n     * // => 'contact_104'\r\n     *\r\n     * _.uniqueId();\r\n     * // => '105'\r\n     */\r\n    function uniqueId(prefix) {\r\n      var id = ++idCounter;\r\n      return toString(prefix) + id;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * Adds two numbers.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.4.0\r\n     * @category Math\r\n     * @param {number} augend The first number in an addition.\r\n     * @param {number} addend The second number in an addition.\r\n     * @returns {number} Returns the total.\r\n     * @example\r\n     *\r\n     * _.add(6, 4);\r\n     * // => 10\r\n     */\r\n    var add = createMathOperation(function(augend, addend) {\r\n      return augend + addend;\r\n    }, 0);\r\n\r\n    /**\r\n     * Computes `number` rounded up to `precision`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.10.0\r\n     * @category Math\r\n     * @param {number} number The number to round up.\r\n     * @param {number} [precision=0] The precision to round up to.\r\n     * @returns {number} Returns the rounded up number.\r\n     * @example\r\n     *\r\n     * _.ceil(4.006);\r\n     * // => 5\r\n     *\r\n     * _.ceil(6.004, 2);\r\n     * // => 6.01\r\n     *\r\n     * _.ceil(6040, -2);\r\n     * // => 6100\r\n     */\r\n    var ceil = createRound('ceil');\r\n\r\n    /**\r\n     * Divide two numbers.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.7.0\r\n     * @category Math\r\n     * @param {number} dividend The first number in a division.\r\n     * @param {number} divisor The second number in a division.\r\n     * @returns {number} Returns the quotient.\r\n     * @example\r\n     *\r\n     * _.divide(6, 4);\r\n     * // => 1.5\r\n     */\r\n    var divide = createMathOperation(function(dividend, divisor) {\r\n      return dividend / divisor;\r\n    }, 1);\r\n\r\n    /**\r\n     * Computes `number` rounded down to `precision`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.10.0\r\n     * @category Math\r\n     * @param {number} number The number to round down.\r\n     * @param {number} [precision=0] The precision to round down to.\r\n     * @returns {number} Returns the rounded down number.\r\n     * @example\r\n     *\r\n     * _.floor(4.006);\r\n     * // => 4\r\n     *\r\n     * _.floor(0.046, 2);\r\n     * // => 0.04\r\n     *\r\n     * _.floor(4060, -2);\r\n     * // => 4000\r\n     */\r\n    var floor = createRound('floor');\r\n\r\n    /**\r\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\r\n     * `undefined` is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {*} Returns the maximum value.\r\n     * @example\r\n     *\r\n     * _.max([4, 2, 8, 6]);\r\n     * // => 8\r\n     *\r\n     * _.max([]);\r\n     * // => undefined\r\n     */\r\n    function max(array) {\r\n      return (array && array.length)\r\n        ? baseExtremum(array, identity, baseGt)\r\n        : undefined;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.max` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the criterion by which\r\n     * the value is ranked. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {*} Returns the maximum value.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\r\n     *\r\n     * _.maxBy(objects, function(o) { return o.n; });\r\n     * // => { 'n': 2 }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.maxBy(objects, 'n');\r\n     * // => { 'n': 2 }\r\n     */\r\n    function maxBy(array, iteratee) {\r\n      return (array && array.length)\r\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\r\n        : undefined;\r\n    }\r\n\r\n    /**\r\n     * Computes the mean of the values in `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {number} Returns the mean.\r\n     * @example\r\n     *\r\n     * _.mean([4, 2, 8, 6]);\r\n     * // => 5\r\n     */\r\n    function mean(array) {\r\n      return baseMean(array, identity);\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.mean` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the value to be averaged.\r\n     * The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.7.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {number} Returns the mean.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\r\n     *\r\n     * _.meanBy(objects, function(o) { return o.n; });\r\n     * // => 5\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.meanBy(objects, 'n');\r\n     * // => 5\r\n     */\r\n    function meanBy(array, iteratee) {\r\n      return baseMean(array, getIteratee(iteratee, 2));\r\n    }\r\n\r\n    /**\r\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\r\n     * `undefined` is returned.\r\n     *\r\n     * @static\r\n     * @since 0.1.0\r\n     * @memberOf _\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {*} Returns the minimum value.\r\n     * @example\r\n     *\r\n     * _.min([4, 2, 8, 6]);\r\n     * // => 2\r\n     *\r\n     * _.min([]);\r\n     * // => undefined\r\n     */\r\n    function min(array) {\r\n      return (array && array.length)\r\n        ? baseExtremum(array, identity, baseLt)\r\n        : undefined;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.min` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the criterion by which\r\n     * the value is ranked. The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {*} Returns the minimum value.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\r\n     *\r\n     * _.minBy(objects, function(o) { return o.n; });\r\n     * // => { 'n': 1 }\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.minBy(objects, 'n');\r\n     * // => { 'n': 1 }\r\n     */\r\n    function minBy(array, iteratee) {\r\n      return (array && array.length)\r\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\r\n        : undefined;\r\n    }\r\n\r\n    /**\r\n     * Multiply two numbers.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.7.0\r\n     * @category Math\r\n     * @param {number} multiplier The first number in a multiplication.\r\n     * @param {number} multiplicand The second number in a multiplication.\r\n     * @returns {number} Returns the product.\r\n     * @example\r\n     *\r\n     * _.multiply(6, 4);\r\n     * // => 24\r\n     */\r\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\r\n      return multiplier * multiplicand;\r\n    }, 1);\r\n\r\n    /**\r\n     * Computes `number` rounded to `precision`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.10.0\r\n     * @category Math\r\n     * @param {number} number The number to round.\r\n     * @param {number} [precision=0] The precision to round to.\r\n     * @returns {number} Returns the rounded number.\r\n     * @example\r\n     *\r\n     * _.round(4.006);\r\n     * // => 4\r\n     *\r\n     * _.round(4.006, 2);\r\n     * // => 4.01\r\n     *\r\n     * _.round(4060, -2);\r\n     * // => 4100\r\n     */\r\n    var round = createRound('round');\r\n\r\n    /**\r\n     * Subtract two numbers.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Math\r\n     * @param {number} minuend The first number in a subtraction.\r\n     * @param {number} subtrahend The second number in a subtraction.\r\n     * @returns {number} Returns the difference.\r\n     * @example\r\n     *\r\n     * _.subtract(6, 4);\r\n     * // => 2\r\n     */\r\n    var subtract = createMathOperation(function(minuend, subtrahend) {\r\n      return minuend - subtrahend;\r\n    }, 0);\r\n\r\n    /**\r\n     * Computes the sum of the values in `array`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 3.4.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @returns {number} Returns the sum.\r\n     * @example\r\n     *\r\n     * _.sum([4, 2, 8, 6]);\r\n     * // => 20\r\n     */\r\n    function sum(array) {\r\n      return (array && array.length)\r\n        ? baseSum(array, identity)\r\n        : 0;\r\n    }\r\n\r\n    /**\r\n     * This method is like `_.sum` except that it accepts `iteratee` which is\r\n     * invoked for each element in `array` to generate the value to be summed.\r\n     * The iteratee is invoked with one argument: (value).\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 4.0.0\r\n     * @category Math\r\n     * @param {Array} array The array to iterate over.\r\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\r\n     * @returns {number} Returns the sum.\r\n     * @example\r\n     *\r\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\r\n     *\r\n     * _.sumBy(objects, function(o) { return o.n; });\r\n     * // => 20\r\n     *\r\n     * // The `_.property` iteratee shorthand.\r\n     * _.sumBy(objects, 'n');\r\n     * // => 20\r\n     */\r\n    function sumBy(array, iteratee) {\r\n      return (array && array.length)\r\n        ? baseSum(array, getIteratee(iteratee, 2))\r\n        : 0;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Add methods that return wrapped values in chain sequences.\r\n    lodash.after = after;\r\n    lodash.ary = ary;\r\n    lodash.assign = assign;\r\n    lodash.assignIn = assignIn;\r\n    lodash.assignInWith = assignInWith;\r\n    lodash.assignWith = assignWith;\r\n    lodash.at = at;\r\n    lodash.before = before;\r\n    lodash.bind = bind;\r\n    lodash.bindAll = bindAll;\r\n    lodash.bindKey = bindKey;\r\n    lodash.castArray = castArray;\r\n    lodash.chain = chain;\r\n    lodash.chunk = chunk;\r\n    lodash.compact = compact;\r\n    lodash.concat = concat;\r\n    lodash.cond = cond;\r\n    lodash.conforms = conforms;\r\n    lodash.constant = constant;\r\n    lodash.countBy = countBy;\r\n    lodash.create = create;\r\n    lodash.curry = curry;\r\n    lodash.curryRight = curryRight;\r\n    lodash.debounce = debounce;\r\n    lodash.defaults = defaults;\r\n    lodash.defaultsDeep = defaultsDeep;\r\n    lodash.defer = defer;\r\n    lodash.delay = delay;\r\n    lodash.difference = difference;\r\n    lodash.differenceBy = differenceBy;\r\n    lodash.differenceWith = differenceWith;\r\n    lodash.drop = drop;\r\n    lodash.dropRight = dropRight;\r\n    lodash.dropRightWhile = dropRightWhile;\r\n    lodash.dropWhile = dropWhile;\r\n    lodash.fill = fill;\r\n    lodash.filter = filter;\r\n    lodash.flatMap = flatMap;\r\n    lodash.flatMapDeep = flatMapDeep;\r\n    lodash.flatMapDepth = flatMapDepth;\r\n    lodash.flatten = flatten;\r\n    lodash.flattenDeep = flattenDeep;\r\n    lodash.flattenDepth = flattenDepth;\r\n    lodash.flip = flip;\r\n    lodash.flow = flow;\r\n    lodash.flowRight = flowRight;\r\n    lodash.fromPairs = fromPairs;\r\n    lodash.functions = functions;\r\n    lodash.functionsIn = functionsIn;\r\n    lodash.groupBy = groupBy;\r\n    lodash.initial = initial;\r\n    lodash.intersection = intersection;\r\n    lodash.intersectionBy = intersectionBy;\r\n    lodash.intersectionWith = intersectionWith;\r\n    lodash.invert = invert;\r\n    lodash.invertBy = invertBy;\r\n    lodash.invokeMap = invokeMap;\r\n    lodash.iteratee = iteratee;\r\n    lodash.keyBy = keyBy;\r\n    lodash.keys = keys;\r\n    lodash.keysIn = keysIn;\r\n    lodash.map = map;\r\n    lodash.mapKeys = mapKeys;\r\n    lodash.mapValues = mapValues;\r\n    lodash.matches = matches;\r\n    lodash.matchesProperty = matchesProperty;\r\n    lodash.memoize = memoize;\r\n    lodash.merge = merge;\r\n    lodash.mergeWith = mergeWith;\r\n    lodash.method = method;\r\n    lodash.methodOf = methodOf;\r\n    lodash.mixin = mixin;\r\n    lodash.negate = negate;\r\n    lodash.nthArg = nthArg;\r\n    lodash.omit = omit;\r\n    lodash.omitBy = omitBy;\r\n    lodash.once = once;\r\n    lodash.orderBy = orderBy;\r\n    lodash.over = over;\r\n    lodash.overArgs = overArgs;\r\n    lodash.overEvery = overEvery;\r\n    lodash.overSome = overSome;\r\n    lodash.partial = partial;\r\n    lodash.partialRight = partialRight;\r\n    lodash.partition = partition;\r\n    lodash.pick = pick;\r\n    lodash.pickBy = pickBy;\r\n    lodash.property = property;\r\n    lodash.propertyOf = propertyOf;\r\n    lodash.pull = pull;\r\n    lodash.pullAll = pullAll;\r\n    lodash.pullAllBy = pullAllBy;\r\n    lodash.pullAllWith = pullAllWith;\r\n    lodash.pullAt = pullAt;\r\n    lodash.range = range;\r\n    lodash.rangeRight = rangeRight;\r\n    lodash.rearg = rearg;\r\n    lodash.reject = reject;\r\n    lodash.remove = remove;\r\n    lodash.rest = rest;\r\n    lodash.reverse = reverse;\r\n    lodash.sampleSize = sampleSize;\r\n    lodash.set = set;\r\n    lodash.setWith = setWith;\r\n    lodash.shuffle = shuffle;\r\n    lodash.slice = slice;\r\n    lodash.sortBy = sortBy;\r\n    lodash.sortedUniq = sortedUniq;\r\n    lodash.sortedUniqBy = sortedUniqBy;\r\n    lodash.split = split;\r\n    lodash.spread = spread;\r\n    lodash.tail = tail;\r\n    lodash.take = take;\r\n    lodash.takeRight = takeRight;\r\n    lodash.takeRightWhile = takeRightWhile;\r\n    lodash.takeWhile = takeWhile;\r\n    lodash.tap = tap;\r\n    lodash.throttle = throttle;\r\n    lodash.thru = thru;\r\n    lodash.toArray = toArray;\r\n    lodash.toPairs = toPairs;\r\n    lodash.toPairsIn = toPairsIn;\r\n    lodash.toPath = toPath;\r\n    lodash.toPlainObject = toPlainObject;\r\n    lodash.transform = transform;\r\n    lodash.unary = unary;\r\n    lodash.union = union;\r\n    lodash.unionBy = unionBy;\r\n    lodash.unionWith = unionWith;\r\n    lodash.uniq = uniq;\r\n    lodash.uniqBy = uniqBy;\r\n    lodash.uniqWith = uniqWith;\r\n    lodash.unset = unset;\r\n    lodash.unzip = unzip;\r\n    lodash.unzipWith = unzipWith;\r\n    lodash.update = update;\r\n    lodash.updateWith = updateWith;\r\n    lodash.values = values;\r\n    lodash.valuesIn = valuesIn;\r\n    lodash.without = without;\r\n    lodash.words = words;\r\n    lodash.wrap = wrap;\r\n    lodash.xor = xor;\r\n    lodash.xorBy = xorBy;\r\n    lodash.xorWith = xorWith;\r\n    lodash.zip = zip;\r\n    lodash.zipObject = zipObject;\r\n    lodash.zipObjectDeep = zipObjectDeep;\r\n    lodash.zipWith = zipWith;\r\n\r\n    // Add aliases.\r\n    lodash.entries = toPairs;\r\n    lodash.entriesIn = toPairsIn;\r\n    lodash.extend = assignIn;\r\n    lodash.extendWith = assignInWith;\r\n\r\n    // Add methods to `lodash.prototype`.\r\n    mixin(lodash, lodash);\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    // Add methods that return unwrapped values in chain sequences.\r\n    lodash.add = add;\r\n    lodash.attempt = attempt;\r\n    lodash.camelCase = camelCase;\r\n    lodash.capitalize = capitalize;\r\n    lodash.ceil = ceil;\r\n    lodash.clamp = clamp;\r\n    lodash.clone = clone;\r\n    lodash.cloneDeep = cloneDeep;\r\n    lodash.cloneDeepWith = cloneDeepWith;\r\n    lodash.cloneWith = cloneWith;\r\n    lodash.conformsTo = conformsTo;\r\n    lodash.deburr = deburr;\r\n    lodash.defaultTo = defaultTo;\r\n    lodash.divide = divide;\r\n    lodash.endsWith = endsWith;\r\n    lodash.eq = eq;\r\n    lodash.escape = escape;\r\n    lodash.escapeRegExp = escapeRegExp;\r\n    lodash.every = every;\r\n    lodash.find = find;\r\n    lodash.findIndex = findIndex;\r\n    lodash.findKey = findKey;\r\n    lodash.findLast = findLast;\r\n    lodash.findLastIndex = findLastIndex;\r\n    lodash.findLastKey = findLastKey;\r\n    lodash.floor = floor;\r\n    lodash.forEach = forEach;\r\n    lodash.forEachRight = forEachRight;\r\n    lodash.forIn = forIn;\r\n    lodash.forInRight = forInRight;\r\n    lodash.forOwn = forOwn;\r\n    lodash.forOwnRight = forOwnRight;\r\n    lodash.get = get;\r\n    lodash.gt = gt;\r\n    lodash.gte = gte;\r\n    lodash.has = has;\r\n    lodash.hasIn = hasIn;\r\n    lodash.head = head;\r\n    lodash.identity = identity;\r\n    lodash.includes = includes;\r\n    lodash.indexOf = indexOf;\r\n    lodash.inRange = inRange;\r\n    lodash.invoke = invoke;\r\n    lodash.isArguments = isArguments;\r\n    lodash.isArray = isArray;\r\n    lodash.isArrayBuffer = isArrayBuffer;\r\n    lodash.isArrayLike = isArrayLike;\r\n    lodash.isArrayLikeObject = isArrayLikeObject;\r\n    lodash.isBoolean = isBoolean;\r\n    lodash.isBuffer = isBuffer;\r\n    lodash.isDate = isDate;\r\n    lodash.isElement = isElement;\r\n    lodash.isEmpty = isEmpty;\r\n    lodash.isEqual = isEqual;\r\n    lodash.isEqualWith = isEqualWith;\r\n    lodash.isError = isError;\r\n    lodash.isFinite = isFinite;\r\n    lodash.isFunction = isFunction;\r\n    lodash.isInteger = isInteger;\r\n    lodash.isLength = isLength;\r\n    lodash.isMap = isMap;\r\n    lodash.isMatch = isMatch;\r\n    lodash.isMatchWith = isMatchWith;\r\n    lodash.isNaN = isNaN;\r\n    lodash.isNative = isNative;\r\n    lodash.isNil = isNil;\r\n    lodash.isNull = isNull;\r\n    lodash.isNumber = isNumber;\r\n    lodash.isObject = isObject;\r\n    lodash.isObjectLike = isObjectLike;\r\n    lodash.isPlainObject = isPlainObject;\r\n    lodash.isRegExp = isRegExp;\r\n    lodash.isSafeInteger = isSafeInteger;\r\n    lodash.isSet = isSet;\r\n    lodash.isString = isString;\r\n    lodash.isSymbol = isSymbol;\r\n    lodash.isTypedArray = isTypedArray;\r\n    lodash.isUndefined = isUndefined;\r\n    lodash.isWeakMap = isWeakMap;\r\n    lodash.isWeakSet = isWeakSet;\r\n    lodash.join = join;\r\n    lodash.kebabCase = kebabCase;\r\n    lodash.last = last;\r\n    lodash.lastIndexOf = lastIndexOf;\r\n    lodash.lowerCase = lowerCase;\r\n    lodash.lowerFirst = lowerFirst;\r\n    lodash.lt = lt;\r\n    lodash.lte = lte;\r\n    lodash.max = max;\r\n    lodash.maxBy = maxBy;\r\n    lodash.mean = mean;\r\n    lodash.meanBy = meanBy;\r\n    lodash.min = min;\r\n    lodash.minBy = minBy;\r\n    lodash.stubArray = stubArray;\r\n    lodash.stubFalse = stubFalse;\r\n    lodash.stubObject = stubObject;\r\n    lodash.stubString = stubString;\r\n    lodash.stubTrue = stubTrue;\r\n    lodash.multiply = multiply;\r\n    lodash.nth = nth;\r\n    lodash.noConflict = noConflict;\r\n    lodash.noop = noop;\r\n    lodash.now = now;\r\n    lodash.pad = pad;\r\n    lodash.padEnd = padEnd;\r\n    lodash.padStart = padStart;\r\n    lodash.parseInt = parseInt;\r\n    lodash.random = random;\r\n    lodash.reduce = reduce;\r\n    lodash.reduceRight = reduceRight;\r\n    lodash.repeat = repeat;\r\n    lodash.replace = replace;\r\n    lodash.result = result;\r\n    lodash.round = round;\r\n    lodash.runInContext = runInContext;\r\n    lodash.sample = sample;\r\n    lodash.size = size;\r\n    lodash.snakeCase = snakeCase;\r\n    lodash.some = some;\r\n    lodash.sortedIndex = sortedIndex;\r\n    lodash.sortedIndexBy = sortedIndexBy;\r\n    lodash.sortedIndexOf = sortedIndexOf;\r\n    lodash.sortedLastIndex = sortedLastIndex;\r\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\r\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\r\n    lodash.startCase = startCase;\r\n    lodash.startsWith = startsWith;\r\n    lodash.subtract = subtract;\r\n    lodash.sum = sum;\r\n    lodash.sumBy = sumBy;\r\n    lodash.template = template;\r\n    lodash.times = times;\r\n    lodash.toFinite = toFinite;\r\n    lodash.toInteger = toInteger;\r\n    lodash.toLength = toLength;\r\n    lodash.toLower = toLower;\r\n    lodash.toNumber = toNumber;\r\n    lodash.toSafeInteger = toSafeInteger;\r\n    lodash.toString = toString;\r\n    lodash.toUpper = toUpper;\r\n    lodash.trim = trim;\r\n    lodash.trimEnd = trimEnd;\r\n    lodash.trimStart = trimStart;\r\n    lodash.truncate = truncate;\r\n    lodash.unescape = unescape;\r\n    lodash.uniqueId = uniqueId;\r\n    lodash.upperCase = upperCase;\r\n    lodash.upperFirst = upperFirst;\r\n\r\n    // Add aliases.\r\n    lodash.each = forEach;\r\n    lodash.eachRight = forEachRight;\r\n    lodash.first = head;\r\n\r\n    mixin(lodash, (function() {\r\n      var source = {};\r\n      baseForOwn(lodash, function(func, methodName) {\r\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\r\n          source[methodName] = func;\r\n        }\r\n      });\r\n      return source;\r\n    }()), { 'chain': false });\r\n\r\n    /*------------------------------------------------------------------------*/\r\n\r\n    /**\r\n     * The semantic version number.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @type {string}\r\n     */\r\n    lodash.VERSION = VERSION;\r\n\r\n    // Assign default placeholders.\r\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\r\n      lodash[methodName].placeholder = lodash;\r\n    });\r\n\r\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\r\n    arrayEach(['drop', 'take'], function(methodName, index) {\r\n      LazyWrapper.prototype[methodName] = function(n) {\r\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\r\n\r\n        var result = (this.__filtered__ && !index)\r\n          ? new LazyWrapper(this)\r\n          : this.clone();\r\n\r\n        if (result.__filtered__) {\r\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\r\n        } else {\r\n          result.__views__.push({\r\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\r\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\r\n          });\r\n        }\r\n        return result;\r\n      };\r\n\r\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\r\n        return this.reverse()[methodName](n).reverse();\r\n      };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\r\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\r\n      var type = index + 1,\r\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\r\n\r\n      LazyWrapper.prototype[methodName] = function(iteratee) {\r\n        var result = this.clone();\r\n        result.__iteratees__.push({\r\n          'iteratee': getIteratee(iteratee, 3),\r\n          'type': type\r\n        });\r\n        result.__filtered__ = result.__filtered__ || isFilter;\r\n        return result;\r\n      };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\r\n    arrayEach(['head', 'last'], function(methodName, index) {\r\n      var takeName = 'take' + (index ? 'Right' : '');\r\n\r\n      LazyWrapper.prototype[methodName] = function() {\r\n        return this[takeName](1).value()[0];\r\n      };\r\n    });\r\n\r\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\r\n    arrayEach(['initial', 'tail'], function(methodName, index) {\r\n      var dropName = 'drop' + (index ? '' : 'Right');\r\n\r\n      LazyWrapper.prototype[methodName] = function() {\r\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\r\n      };\r\n    });\r\n\r\n    LazyWrapper.prototype.compact = function() {\r\n      return this.filter(identity);\r\n    };\r\n\r\n    LazyWrapper.prototype.find = function(predicate) {\r\n      return this.filter(predicate).head();\r\n    };\r\n\r\n    LazyWrapper.prototype.findLast = function(predicate) {\r\n      return this.reverse().find(predicate);\r\n    };\r\n\r\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\r\n      if (typeof path == 'function') {\r\n        return new LazyWrapper(this);\r\n      }\r\n      return this.map(function(value) {\r\n        return baseInvoke(value, path, args);\r\n      });\r\n    });\r\n\r\n    LazyWrapper.prototype.reject = function(predicate) {\r\n      return this.filter(negate(getIteratee(predicate)));\r\n    };\r\n\r\n    LazyWrapper.prototype.slice = function(start, end) {\r\n      start = toInteger(start);\r\n\r\n      var result = this;\r\n      if (result.__filtered__ && (start > 0 || end < 0)) {\r\n        return new LazyWrapper(result);\r\n      }\r\n      if (start < 0) {\r\n        result = result.takeRight(-start);\r\n      } else if (start) {\r\n        result = result.drop(start);\r\n      }\r\n      if (end !== undefined) {\r\n        end = toInteger(end);\r\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\r\n      return this.reverse().takeWhile(predicate).reverse();\r\n    };\r\n\r\n    LazyWrapper.prototype.toArray = function() {\r\n      return this.take(MAX_ARRAY_LENGTH);\r\n    };\r\n\r\n    // Add `LazyWrapper` methods to `lodash.prototype`.\r\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\r\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\r\n          isTaker = /^(?:head|last)$/.test(methodName),\r\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\r\n          retUnwrapped = isTaker || /^find/.test(methodName);\r\n\r\n      if (!lodashFunc) {\r\n        return;\r\n      }\r\n      lodash.prototype[methodName] = function() {\r\n        var value = this.__wrapped__,\r\n            args = isTaker ? [1] : arguments,\r\n            isLazy = value instanceof LazyWrapper,\r\n            iteratee = args[0],\r\n            useLazy = isLazy || isArray(value);\r\n\r\n        var interceptor = function(value) {\r\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\r\n          return (isTaker && chainAll) ? result[0] : result;\r\n        };\r\n\r\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\r\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\r\n          isLazy = useLazy = false;\r\n        }\r\n        var chainAll = this.__chain__,\r\n            isHybrid = !!this.__actions__.length,\r\n            isUnwrapped = retUnwrapped && !chainAll,\r\n            onlyLazy = isLazy && !isHybrid;\r\n\r\n        if (!retUnwrapped && useLazy) {\r\n          value = onlyLazy ? value : new LazyWrapper(this);\r\n          var result = func.apply(value, args);\r\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\r\n          return new LodashWrapper(result, chainAll);\r\n        }\r\n        if (isUnwrapped && onlyLazy) {\r\n          return func.apply(this, args);\r\n        }\r\n        result = this.thru(interceptor);\r\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\r\n      };\r\n    });\r\n\r\n    // Add `Array` methods to `lodash.prototype`.\r\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\r\n      var func = arrayProto[methodName],\r\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\r\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\r\n\r\n      lodash.prototype[methodName] = function() {\r\n        var args = arguments;\r\n        if (retUnwrapped && !this.__chain__) {\r\n          var value = this.value();\r\n          return func.apply(isArray(value) ? value : [], args);\r\n        }\r\n        return this[chainName](function(value) {\r\n          return func.apply(isArray(value) ? value : [], args);\r\n        });\r\n      };\r\n    });\r\n\r\n    // Map minified method names to their real names.\r\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\r\n      var lodashFunc = lodash[methodName];\r\n      if (lodashFunc) {\r\n        var key = lodashFunc.name + '';\r\n        if (!hasOwnProperty.call(realNames, key)) {\r\n          realNames[key] = [];\r\n        }\r\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\r\n      }\r\n    });\r\n\r\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\r\n      'name': 'wrapper',\r\n      'func': undefined\r\n    }];\r\n\r\n    // Add methods to `LazyWrapper`.\r\n    LazyWrapper.prototype.clone = lazyClone;\r\n    LazyWrapper.prototype.reverse = lazyReverse;\r\n    LazyWrapper.prototype.value = lazyValue;\r\n\r\n    // Add chain sequence methods to the `lodash` wrapper.\r\n    lodash.prototype.at = wrapperAt;\r\n    lodash.prototype.chain = wrapperChain;\r\n    lodash.prototype.commit = wrapperCommit;\r\n    lodash.prototype.next = wrapperNext;\r\n    lodash.prototype.plant = wrapperPlant;\r\n    lodash.prototype.reverse = wrapperReverse;\r\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\r\n\r\n    // Add lazy aliases.\r\n    lodash.prototype.first = lodash.prototype.head;\r\n\r\n    if (symIterator) {\r\n      lodash.prototype[symIterator] = wrapperToIterator;\r\n    }\r\n    return lodash;\r\n  });\r\n\r\n  /*--------------------------------------------------------------------------*/\r\n\r\n  // Export lodash.\r\n  var _ = runInContext();\r\n\r\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\r\n  if (true) {\r\n    // Expose Lodash on the global object to prevent errors when Lodash is\r\n    // loaded by a script tag in the presence of an AMD loader.\r\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\r\n    // Use `_.noConflict` to remove Lodash from the global object.\r\n    root._ = _;\r\n\r\n    // Define as an anonymous module so, through path mapping, it can be\r\n    // referenced as the \"underscore\" module.\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\r\n      return _;\r\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n  }\r\n  // Check for `exports` after `define` in case a build optimizer adds it.\r\n  else {}\r\n}.call(this));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/lodash/lodash.js\n");

/***/ }),

/***/ "./src/index.css":
/*!***********************!*\
  !*** ./src/index.css ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./index.css */ \"./node_modules/css-loader/dist/cjs.js!./src/index.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\noptions.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_index_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguY3NzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLE1BQStGO0FBQy9GLE1BQXFGO0FBQ3JGLE1BQTRGO0FBQzVGLE1BQStHO0FBQy9HLE1BQXdHO0FBQ3hHLE1BQXdHO0FBQ3hHLE1BQW1HO0FBQ25HO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCLHFHQUFtQjtBQUMvQyx3QkFBd0Isa0hBQWE7QUFDckMsaUJBQWlCLHVHQUFhO0FBQzlCLGlCQUFpQiwrRkFBTTtBQUN2Qiw2QkFBNkIsc0dBQWtCOztBQUUvQyxhQUFhLDBHQUFHLENBQUMsc0ZBQU87Ozs7QUFJNkM7QUFDckUsT0FBTyxpRUFBZSxzRkFBTyxJQUFJLHNGQUFPLFVBQVUsc0ZBQU8sbUJBQW1CLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguY3NzP2NmZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.css\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nvar stylesInDOM = [];\r\nfunction getIndexByIdentifier(identifier) {\r\n  var result = -1;\r\n  for (var i = 0; i < stylesInDOM.length; i++) {\r\n    if (stylesInDOM[i].identifier === identifier) {\r\n      result = i;\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nfunction modulesToDom(list, options) {\r\n  var idCountMap = {};\r\n  var identifiers = [];\r\n  for (var i = 0; i < list.length; i++) {\r\n    var item = list[i];\r\n    var id = options.base ? item[0] + options.base : item[0];\r\n    var count = idCountMap[id] || 0;\r\n    var identifier = \"\".concat(id, \" \").concat(count);\r\n    idCountMap[id] = count + 1;\r\n    var indexByIdentifier = getIndexByIdentifier(identifier);\r\n    var obj = {\r\n      css: item[1],\r\n      media: item[2],\r\n      sourceMap: item[3],\r\n      supports: item[4],\r\n      layer: item[5]\r\n    };\r\n    if (indexByIdentifier !== -1) {\r\n      stylesInDOM[indexByIdentifier].references++;\r\n      stylesInDOM[indexByIdentifier].updater(obj);\r\n    } else {\r\n      var updater = addElementStyle(obj, options);\r\n      options.byIndex = i;\r\n      stylesInDOM.splice(i, 0, {\r\n        identifier: identifier,\r\n        updater: updater,\r\n        references: 1\r\n      });\r\n    }\r\n    identifiers.push(identifier);\r\n  }\r\n  return identifiers;\r\n}\r\nfunction addElementStyle(obj, options) {\r\n  var api = options.domAPI(options);\r\n  api.update(obj);\r\n  var updater = function updater(newObj) {\r\n    if (newObj) {\r\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\r\n        return;\r\n      }\r\n      api.update(obj = newObj);\r\n    } else {\r\n      api.remove();\r\n    }\r\n  };\r\n  return updater;\r\n}\r\nmodule.exports = function (list, options) {\r\n  options = options || {};\r\n  list = list || [];\r\n  var lastIdentifiers = modulesToDom(list, options);\r\n  return function update(newList) {\r\n    newList = newList || [];\r\n    for (var i = 0; i < lastIdentifiers.length; i++) {\r\n      var identifier = lastIdentifiers[i];\r\n      var index = getIndexByIdentifier(identifier);\r\n      stylesInDOM[index].references--;\r\n    }\r\n    var newLastIdentifiers = modulesToDom(newList, options);\r\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\r\n      var _identifier = lastIdentifiers[_i];\r\n      var _index = getIndexByIdentifier(_identifier);\r\n      if (stylesInDOM[_index].references === 0) {\r\n        stylesInDOM[_index].updater();\r\n        stylesInDOM.splice(_index, 1);\r\n      }\r\n    }\r\n    lastIdentifiers = newLastIdentifiers;\r\n  };\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkJBQTZCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzPzJkYmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcclxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xyXG4gIHZhciByZXN1bHQgPSAtMTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xyXG4gICAgICByZXN1bHQgPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xyXG4gIHZhciBpZENvdW50TWFwID0ge307XHJcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XHJcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcclxuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XHJcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcclxuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xyXG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICB2YXIgb2JqID0ge1xyXG4gICAgICBjc3M6IGl0ZW1bMV0sXHJcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxyXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXHJcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxyXG4gICAgICBsYXllcjogaXRlbVs1XVxyXG4gICAgfTtcclxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcclxuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcclxuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XHJcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XHJcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XHJcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcclxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxyXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xyXG4gIH1cclxuICByZXR1cm4gaWRlbnRpZmllcnM7XHJcbn1cclxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xyXG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcclxuICBhcGkudXBkYXRlKG9iaik7XHJcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xyXG4gICAgaWYgKG5ld09iaikge1xyXG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFwaS5yZW1vdmUoKTtcclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiB1cGRhdGVyO1xyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICBsaXN0ID0gbGlzdCB8fCBbXTtcclxuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xyXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xyXG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcclxuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XHJcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XHJcbiAgICB9XHJcbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcclxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcclxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xyXG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xyXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XHJcbiAgfTtcclxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\nvar memo = {};\r\n\r\n/* istanbul ignore next  */\r\nfunction getTarget(target) {\r\n  if (typeof memo[target] === \"undefined\") {\r\n    var styleTarget = document.querySelector(target);\r\n\r\n    // Special case to return head of iframe instead of iframe itself\r\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\r\n      try {\r\n        // This will throw an exception if access to iframe is blocked\r\n        // due to cross-origin restrictions\r\n        styleTarget = styleTarget.contentDocument.head;\r\n      } catch (e) {\r\n        // istanbul ignore next\r\n        styleTarget = null;\r\n      }\r\n    }\r\n    memo[target] = styleTarget;\r\n  }\r\n  return memo[target];\r\n}\r\n\r\n/* istanbul ignore next  */\r\nfunction insertBySelector(insert, style) {\r\n  var target = getTarget(insert);\r\n  if (!target) {\r\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\r\n  }\r\n  target.appendChild(style);\r\n}\r\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgbWVtbyA9IHt9O1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXHJcbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcclxuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xyXG5cclxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXHJcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcclxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xyXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxyXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XHJcbiAgfVxyXG4gIHJldHVybiBtZW1vW3RhcmdldF07XHJcbn1cclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xyXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcclxuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XHJcbiAgaWYgKCF0YXJnZXQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XHJcbiAgfVxyXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertBySelector.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n/* istanbul ignore next  */\r\nfunction insertStyleElement(options) {\r\n  var element = document.createElement(\"style\");\r\n  options.setAttributes(element, options.attributes);\r\n  options.insert(element, options.options);\r\n  return element;\r\n}\r\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xyXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xyXG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xyXG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/insertStyleElement.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\r\n\r\n/* istanbul ignore next  */\r\nfunction setAttributesWithoutAttributes(styleElement) {\r\n  var nonce =  true ? __webpack_require__.nc : 0;\r\n  if (nonce) {\r\n    styleElement.setAttribute(\"nonce\", nonce);\r\n  }\r\n}\r\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQXdDLEdBQUcsc0JBQWlCLEdBQUcsQ0FBSTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzP2RkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xyXG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcclxuICBpZiAobm9uY2UpIHtcclxuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XHJcbiAgfVxyXG59XHJcbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n/* istanbul ignore next  */\r\nfunction apply(styleElement, options, obj) {\r\n  var css = \"\";\r\n  if (obj.supports) {\r\n    css += \"@supports (\".concat(obj.supports, \") {\");\r\n  }\r\n  if (obj.media) {\r\n    css += \"@media \".concat(obj.media, \" {\");\r\n  }\r\n  var needLayer = typeof obj.layer !== \"undefined\";\r\n  if (needLayer) {\r\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\r\n  }\r\n  css += obj.css;\r\n  if (needLayer) {\r\n    css += \"}\";\r\n  }\r\n  if (obj.media) {\r\n    css += \"}\";\r\n  }\r\n  if (obj.supports) {\r\n    css += \"}\";\r\n  }\r\n  var sourceMap = obj.sourceMap;\r\n  if (sourceMap && typeof btoa !== \"undefined\") {\r\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\r\n  }\r\n\r\n  // For old IE\r\n  /* istanbul ignore if  */\r\n  options.styleTagTransform(css, styleElement, options.options);\r\n}\r\nfunction removeStyleElement(styleElement) {\r\n  // istanbul ignore if\r\n  if (styleElement.parentNode === null) {\r\n    return false;\r\n  }\r\n  styleElement.parentNode.removeChild(styleElement);\r\n}\r\n\r\n/* istanbul ignore next  */\r\nfunction domAPI(options) {\r\n  if (typeof document === \"undefined\") {\r\n    return {\r\n      update: function update() {},\r\n      remove: function remove() {}\r\n    };\r\n  }\r\n  var styleElement = options.insertStyleElement(options);\r\n  return {\r\n    update: function update(obj) {\r\n      apply(styleElement, options, obj);\r\n    },\r\n    remove: function remove() {\r\n      removeStyleElement(styleElement);\r\n    }\r\n  };\r\n}\r\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cclxuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcclxuICB2YXIgY3NzID0gXCJcIjtcclxuICBpZiAob2JqLnN1cHBvcnRzKSB7XHJcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xyXG4gIH1cclxuICBpZiAob2JqLm1lZGlhKSB7XHJcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcclxuICB9XHJcbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XHJcbiAgaWYgKG5lZWRMYXllcikge1xyXG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xyXG4gIH1cclxuICBjc3MgKz0gb2JqLmNzcztcclxuICBpZiAobmVlZExheWVyKSB7XHJcbiAgICBjc3MgKz0gXCJ9XCI7XHJcbiAgfVxyXG4gIGlmIChvYmoubWVkaWEpIHtcclxuICAgIGNzcyArPSBcIn1cIjtcclxuICB9XHJcbiAgaWYgKG9iai5zdXBwb3J0cykge1xyXG4gICAgY3NzICs9IFwifVwiO1xyXG4gIH1cclxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcclxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcclxuICB9XHJcblxyXG4gIC8vIEZvciBvbGQgSUVcclxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXHJcbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XHJcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXHJcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XHJcbn1cclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xyXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xyXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXHJcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cclxuICAgIH07XHJcbiAgfVxyXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcclxuICByZXR1cm4ge1xyXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XHJcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleDomAPI.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\r\n\r\n/* istanbul ignore next  */\r\nfunction styleTagTransform(css, styleElement) {\r\n  if (styleElement.styleSheet) {\r\n    styleElement.styleSheet.cssText = css;\r\n  } else {\r\n    while (styleElement.firstChild) {\r\n      styleElement.removeChild(styleElement.firstChild);\r\n    }\r\n    styleElement.appendChild(document.createTextNode(css));\r\n  }\r\n}\r\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcz8xZGRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXHJcbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XHJcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XHJcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcclxuICAgIH1cclxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcclxuICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/styleTagTransform.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _index_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.css */ \"./src/index.css\");\n/* harmony import */ var _images_dagger_png__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./images/dagger.png */ \"./src/images/dagger.png\");\n/* harmony import */ var _images_amulet_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./images/amulet.png */ \"./src/images/amulet.png\");\n/* harmony import */ var _images_arms_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./images/arms.png */ \"./src/images/arms.png\");\n/* harmony import */ var _images_head_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./images/head.png */ \"./src/images/head.png\");\n/* harmony import */ var _images_inventory_png__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./images/inventory.png */ \"./src/images/inventory.png\");\n/* harmony import */ var _images_legs_png__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./images/legs.png */ \"./src/images/legs.png\");\n/* harmony import */ var _images_mainHand_png__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./images/mainHand.png */ \"./src/images/mainHand.png\");\n/* harmony import */ var _images_offHand_png__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./images/offHand.png */ \"./src/images/offHand.png\");\n/* harmony import */ var _images_torso_png__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./images/torso.png */ \"./src/images/torso.png\");\n/* harmony import */ var _images_quickAccess_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./images/quickAccess.png */ \"./src/images/quickAccess.png\");\n/* harmony import */ var _images_oldShirt_png__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./images/oldShirt.png */ \"./src/images/oldShirt.png\");\n/* harmony import */ var _images_trustyBelt_png__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./images/trustyBelt.png */ \"./src/images/trustyBelt.png\");\n/* harmony import */ var _images_attack_png__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./images/attack.png */ \"./src/images/attack.png\");\n/* harmony import */ var _images_powerfulStrike_png__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./images/powerfulStrike.png */ \"./src/images/powerfulStrike.png\");\n/* harmony import */ var _images_precisionStrike_png__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./images/precisionStrike.png */ \"./src/images/precisionStrike.png\");\n/* harmony import */ var _images_healingWord_png__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./images/healingWord.png */ \"./src/images/healingWord.png\");\n/* harmony import */ var _images_guard_png__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./images/guard.png */ \"./src/images/guard.png\");\n/* harmony import */ var _images_leapingStrike_png__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./images/leapingStrike.png */ \"./src/images/leapingStrike.png\");\n/* harmony import */ var _images_reflexiveFocus_png__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./images/reflexiveFocus.png */ \"./src/images/reflexiveFocus.png\");\n/* harmony import */ var _images_revealWeakness_png__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./images/revealWeakness.png */ \"./src/images/revealWeakness.png\");\n/* harmony import */ var _images_fleshEating_png__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./images/fleshEating.png */ \"./src/images/fleshEating.png\");\n/* harmony import */ var _images_riposte_png__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./images/riposte.png */ \"./src/images/riposte.png\");\n/* harmony import */ var _print_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./print.js */ \"./src/print.js\");\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"use strict\";\r\n\r\n/* #region Notes*/\r\n\r\n// timeToCast converts to the following:\r\n// Reaction = 1\r\n// Bonus Action = 2\r\n// Action = 3\r\n// Type of Weapons:\r\n// Melee = 1\r\n// Ranged = 2\r\n// Magic = 3\r\n// TODO: Must make ID's for everything, to make them easier to handle.\r\n// TODO: I am copying data too much, all characters should REFERENCE ability data etc, this will make it easier to code and should improve performance.\r\n// TODO: Search for TODO's throughout the code and do them.\r\n// TODO: Should merge the branches in git at this point.\r\n\r\n/* #endregion Notes*/\r\n\r\n/* #region  Combat Log */\r\n\r\nconst combatLog = {\r\n    critHit: function (caster, target, damage) {\r\n        console.log(`            - ${caster.name} -->  CRITICALLY HITS!!! --> ${target.name} -\r\n            ▼             - ROLLS -            ▼`);\r\n        this.displayDamageRollsByResist(damage);\r\n        console.log(`            ▼         - DAMAGE TOTALS (2X)-        ▼`)\r\n    },\r\n    attackAttempt: function (caster, target, attackRoll, defendRoll, attackBonus, defendBonus, ability) {\r\n        const attack = attackRoll + attackBonus;\r\n        const defend = defendRoll + defendBonus;\r\n        console.log(`${caster.name} attacks --> ${target.name} \r\n            - Weapon: ${caster.equipment.mainHand.name} - Ability: ${ability.name} - \r\n            - Attack Roll : ${attackRoll} + Bonus : ${attackBonus} -\r\n            - Defend Roll : ${defendRoll} + Bonus : ${defendBonus} -\r\n            ▼          - HIT TOTALS: -         ▼\r\n            - Attack   ${attack}   -->   ${defend}   Defense -`);\r\n    },\r\n    displayDamageRollsByResist: function (damage) {\r\n        // input looks like: [[0,2][0,3][0,4]] last index is the damage bonus.\r\n        //takes off the damage bonus and stores in this variable.\r\n        let damageBonus = damage.pop();\r\n        // So the below goes from [[0,2][0,3][0,4][2,6]] to [[2,3,4],[null],[6],[null],... etc] if that makes sense.\r\n        let resistanceSortArr = [[null],[null],[null],[null],[null],[null],[null],[null],[null]];\r\n        damage.forEach((ele) => {\r\n            switch(ele[0]) {\r\n                case 0:\r\n                    if(resistanceSortArr[0][0] === null) {\r\n                        resistanceSortArr[0] = [];\r\n                    }\r\n                    resistanceSortArr[0].push(ele[1]);\r\n                    break;\r\n                case 1:\r\n                    if(resistanceSortArr[1][0] === null) {\r\n                        resistanceSortArr[1] = [];\r\n                    }\r\n                    resistanceSortArr[1].push(ele[1]);\r\n                    break;\r\n                case 2:\r\n                    if(resistanceSortArr[2][0] === null) {\r\n                        resistanceSortArr[2] = [];\r\n                    }\r\n                    resistanceSortArr[2].push(ele[1]);\r\n                    break;\r\n                case 3:\r\n                    if(resistanceSortArr[3][0] === null) {\r\n                        resistanceSortArr[3] = [];\r\n                    }\r\n                    resistanceSortArr[3].push(ele[1]);\r\n                    break;\r\n                case 4:\r\n                    if(resistanceSortArr[4][0] === null) {\r\n                        resistanceSortArr[4] = [];\r\n                    }\r\n                    resistanceSortArr[4].push(ele[1]);\r\n                    break;\r\n                case 5:\r\n                    if(resistanceSortArr[5][0] === null) {\r\n                        resistanceSortArr[5] = [];\r\n                    }\r\n                    resistanceSortArr[5].push(ele[1]);\r\n                    break;\r\n                case 6:\r\n                    if(resistanceSortArr[6][0] === null) {\r\n                        resistanceSortArr[6] = [];\r\n                    }\r\n                    resistanceSortArr[6].push(ele[1]);\r\n                    break;\r\n                case 7:\r\n                    if(resistanceSortArr[7][0] === null) {\r\n                        resistanceSortArr[7] = [];\r\n                    }\r\n                    resistanceSortArr[7].push(ele[1]);\r\n                    break;\r\n                case 8:\r\n                    if(resistanceSortArr[8][0] === null) {\r\n                        resistanceSortArr[8] = [];\r\n                    }\r\n                    resistanceSortArr[8].push(ele[1]);\r\n                    break;\r\n            }\r\n        });\r\n        for(let i = 0; i < 9; i++) {\r\n            if(resistanceSortArr[i][0] !== null) {\r\n                switch(i) {\r\n                    case 0:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Flat damage rolls: ${createRollOutcomeString(resistanceSortArr[0])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Flat damage rolls: ${createRollOutcomeString(resistanceSortArr[0])}`);\r\n                        }\r\n                    break;\r\n                    case 1:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Piercing damage rolls: ${createRollOutcomeString(resistanceSortArr[1])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Piercing damage rolls: ${createRollOutcomeString(resistanceSortArr[1])}`);\r\n                        }\r\n                    break;\r\n                    case 2:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Ice damage rolls: ${createRollOutcomeString(resistanceSortArr[2])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Ice damage rolls: ${createRollOutcomeString(resistanceSortArr[2])}`);\r\n                        }\r\n                    break;\r\n                    case 3:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Fire damage rolls: ${createRollOutcomeString(resistanceSortArr[3])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Fire damage rolls: ${createRollOutcomeString(resistanceSortArr[3])}`);\r\n                        }\r\n                    break;\r\n                    case 4:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Corrosive damage rolls: ${createRollOutcomeString(resistanceSortArr[4])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Corrosive damage rolls: ${createRollOutcomeString(resistanceSortArr[4])}`);\r\n                        }\r\n                    break;\r\n                    case 5:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Poison damage rolls: ${createRollOutcomeString(resistanceSortArr[5])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Poison damage rolls: ${createRollOutcomeString(resistanceSortArr[5])}`);\r\n                        }\r\n                    break;\r\n                    case 6:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Spiritual damage rolls: ${createRollOutcomeString(resistanceSortArr[6])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Spiritual damage rolls: ${createRollOutcomeString(resistanceSortArr[6])}`);\r\n                        }\r\n                    break;\r\n                    case 7:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Lightning damage rolls: ${createRollOutcomeString(resistanceSortArr[7])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Lightning damage rolls: ${createRollOutcomeString(resistanceSortArr[7])}`);\r\n                        }\r\n                    break;\r\n                    case 8:\r\n                        if(damageBonus[0] === i) {\r\n                            console.log(`            Arcane damage rolls: ${createRollOutcomeString(resistanceSortArr[8])} + a bonus of ${damageBonus[1]}.`);\r\n                        } else {\r\n                            console.log(`            Arcane damage rolls: ${createRollOutcomeString(resistanceSortArr[8])}`);\r\n                        }\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    },\r\n    hit: function (caster, target, damage) {\r\n        console.log(`            - ${caster.name} --> HITS --> ${target.name} -\r\n            ▼             - ROLLS -            ▼`);\r\n        this.displayDamageRollsByResist(damage);\r\n        console.log(`            ▼         - DAMAGE TOTALS -        ▼`)\r\n    },\r\n    damageResist: function (typeNumber, damage, resist, damageSum, caster, target, guardState) {\r\n        const resistTypeName = getResistTypeNameFromIndexNumber(typeNumber); // * Converts the index-style number of a resist ex. 0 = flat, into its name for console display.\r\n        if(guardState === `guarded`) {\r\n            let targetDamage = Math.ceil(damage / 2);\r\n            let targetGuardDamage = Math.floor(damage / 2);\r\n            console.log(`            ${caster.name}'s' ${damage} ${resistTypeName} is split in half to guard : ${targetGuardDamage} --> ${target.buffs.guarded.caster.name},\r\n        so the remaining ${targetDamage} --> ${target.name}'s ${resist} Resist = ${target.name} takes ${damageSum} ${resistTypeName} damage.`);\r\n        \r\n        } else if(guardState === `guarding`){\r\n            let targetGuardDamage = Math.floor(damage / 2);\r\n            console.log(`            ${target.name} takes half of the damage intended for ${target.buffs.guarding.target.name}, \r\n        so ${caster.name}'s ${targetGuardDamage} ${resistTypeName} --> ${target.name}'s ${resist} Resist = ${target.name} takes ${damageSum} ${resistTypeName} damage.`);\r\n\r\n        } else {\r\n            console.log(`            ${caster.name}'s ${damage} ${resistTypeName} --> ${target.name}'s ${resist} Resist = ${damageSum} ${resistTypeName} Damage`);\r\n        }\r\n    },\r\n    totalDamage: function (caster, target, totalDamage) {\r\n        console.log(`->          ${caster.name} deals a total of ${totalDamage} damage to ${target.name}`);\r\n    },\r\n    hitBackupCopy: function (caster, target, damage) {\r\n        let damageDisplayArray = this.damageDisplay(damage); // * damageDisplayArray is an array with the index[0]\r\n        let targetDamageSplit = Math.floor((damageDisplayArray[1]) / 2);\r\n        let guardDamageSplit = Math.ceil((damageDisplayArray[1]) / 2);\r\n        if (target.buffs.guarded) {\r\n            console.log(`${caster.name} hits ${target.name} and rolls a ${damageDisplayArray[0]} for a total of ${damageDisplayArray[1]} damage, but because ${target.name} is guarded, the damage is split between him and his guard ${target.buffs.guarded.caster.name}, ${target.name} takes ${targetDamageSplit} and ${target.buffs.guarded.caster.name} will take ${guardDamageSplit} but has a chance to defend it.`);\r\n        } else {\r\n            console.log(`${caster.name} hits ${target.name} and rolls a ${damageDisplayArray[0]} for a total of ${damageDisplayArray[1]} damage.`);\r\n        }\r\n\r\n    },\r\n    defend: function (caster, target) {\r\n        console.log(`${target.name} defends ${caster.name}'s attack!`);\r\n    },\r\n    guardDefend: function (caster, target, guard) {\r\n        console.log(`${guard.name} defends the incoming damage from ${caster.name} redirected to him from his guard target ${target}!`)\r\n    },\r\n    guardFailsDefend: function (caster, target, guard) {\r\n        console.log(`            ${caster.name}'s SPLIT HITS --> ${guard.name} from guarding --> ${target.name}`);\r\n    },\r\n    critHeal: function (caster, target, healAmountRoll, healBonus, healAmount) {\r\n        console.log(`${caster.name} CRITICALLY HEALS ${target.name} and rolls a ${healAmountRoll} with a ${healBonus} bonus times 2 for a total of ${healAmount} healing!`)\r\n    },\r\n    healAttempt: function (caster, target, healRoll, healBonus) {\r\n        console.log(`${caster.name} attempts to heal ${target.name} with a roll of: ${healRoll}.`)\r\n    },\r\n    heal: function (caster, target, healAmountRoll, healBonus, healAmount) {\r\n        console.log(`${caster.name} heals ${target.name} with a heal roll of ${healAmountRoll} and a ${healBonus} bonus for a total of ${healAmount} healing!`)\r\n    },\r\n    healFail: function (caster, target) {\r\n        console.log(`${caster.name} fails to heal ${target.name}!`)\r\n    },\r\n    noAP: function (abilityName, abilityAPCost) {\r\n        console.log(`Not enough AP to cast ${abilityName}. Total AP: ${turn.AP} - Ability Cost: ${abilityAPCost} `)\r\n    },\r\n    charIsDead: function (char, ability) {\r\n        console.log(`${char.name} cannot cast ${ability.name} while he is dead!`);\r\n    },\r\n    guard: function (caster, target) {\r\n        console.log(`${caster.name} casts his Guard onto ${target.name}.`);\r\n    },\r\n    guardSwitch: function (caster, target) {\r\n        console.log(`${caster.name} switches his Guard from ${caster.buffs.guarding.target.name} to ${target.name}.`);\r\n    },\r\n    riposte: function (caster, target) {\r\n        console.log(`${caster.name} defends well enough to attempt a riposte on ${target.name}.`)\r\n    },\r\n    startNPCTurn: function () {\r\n        console.log(`\r\n            Start NPC Turn:\r\n            `);\r\n    },\r\n    startPCTurn: function () {\r\n        console.log(`\r\n            Start PC Turn:\r\n            `);\r\n    },\r\n    casterOnlyBuff: function (caster, buff) {\r\n        console.log(`${caster.name} casts ${buff.name} on himself.`);\r\n    },\r\n    debuff: function (caster, target, targetDebuff) {\r\n        console.log(`${caster.name} casts ${targetDebuff.name} onto ${target.name}.`)\r\n    },\r\n    targetNotInRange: function (target, abilityName) {\r\n        console.log(`${target.name} is not in range for ${abilityName} to hit them!`);\r\n    },\r\n    \r\n}\r\n\r\n/* #endregion Combat Log*/\r\n\r\n/* #region  Ability Effects & Logic */ \r\n\r\nconst turn = {\r\n    AP: 100,\r\n    end: function () {\r\n        combatLog.startNPCTurn();\r\n        this.AP = 100;\r\n        while (this.AP > 0) { \r\n            let attackablePCs = [];\r\n            for(let i = 0; i < PCs.charList.length; i++) { // * Checks if a PC is alive, if so, add them to the list of attackable PCs.\r\n                if(PCs.charList[i].hp > 1) {\r\n                    attackablePCs.push(PCs.charList[i]);\r\n                }\r\n            }\r\n            if(!attackablePCs[0]) {\r\n                break;\r\n            }\r\n            const attackingNPC = NPCs.charList[diceMinus1(NPCs.charList.length)];\r\n            attackingNPC.useAbility(1, attackablePCs[diceMinus1(attackablePCs.length)]);\r\n        };\r\n        this.AP = 100;\r\n        DOM.update();\r\n        DOM.updateTopBar();\r\n        combatLog.startPCTurn();\r\n    },\r\n}\r\n\r\nconst effect = {\r\n    meleeAttack: function (caster, target, mods) {\r\n        const ability = allAbilities[mods.abilityIndex];\r\n        let riposte = false;\r\n        let damageSum;\r\n\r\n        /* #region  CASTER ATTACK */\r\n        let attackRollAdvantages = calcTargetAttackAdvatages(caster);\r\n        let attackRoll = rollWithAdvantageCount(100, attackRollAdvantages);\r\n        const attack = attackRoll + mods.attackBonus;\r\n        /* #endregion */\r\n\r\n        /* #region  TARGET DEFEND */\r\n        let defendRollAdvantages = calcTargetDefendAdvatages(target);\r\n        let defendRoll = rollWithAdvantageCount(20, defendRollAdvantages);\r\n        const defend = defendRoll + mods.getDefendBonus();\r\n        /* #endregion */\r\n\r\n        combatLog.attackAttempt(caster, target, attackRoll, defendRoll, mods.attackBonus, mods.getDefendBonus(), ability);\r\n\r\n        /* #region  CHECK & SET RIPOSTE */\r\n        if (!mods.isRiposte) {\r\n            if ((Math.ceil(attack / 2)) <= defend) {\r\n                riposte = true\r\n            }\r\n        }\r\n        /* #endregion */\r\n\r\n        /* #region  IF TARGET DEFENDS ATTACK */\r\n        if (attack <= defend) {\r\n            combatLog.defend(caster, target);\r\n            if (riposte) {\r\n                combatLog.riposte(target, caster);\r\n                target.useAbility(9, caster);\r\n            }\r\n            return;\r\n        }\r\n        /* #endregion */\r\n\r\n        const damageRollArr = concatRollDice(mods.damageRollDice.mainHandWeapon, mods.damageRollDice.offHandWeapon, mods.damageRollDice.ability);\r\n        damageRollArr.push(mods.damageBonus);\r\n        // sum of damage array will return something like this: if input is equal to [[0,3][0,4][4,8]] then output is [7,0,0,0,8,0,0,0,0]\r\n        let totalDamagePerResist = sumOfDamageArray(damageRollArr);\r\n\r\n        if (attackRoll >= mods.critThreshold) { // * ON CRIT\r\n            combatLog.critHit(caster, target, damageRollArr);\r\n            totalDamagePerResist = resistArrayMultiply(totalDamagePerResist, 2); // ! Crit multiplier, currently just locked at 2. Can make dynamic later.\r\n        } else { // * ON HIT\r\n            combatLog.hit(caster, target, damageRollArr)\r\n        } \r\n\r\n        if (target.buffs.guarded) {\r\n            const guardDefense = getGuardDefense(`melee`, target.buffs.guarded.caster);\r\n            const targetDamage = calcTotalDamageAfterResists(totalDamagePerResist, target.resistsArray, caster, target, `guarded`);\r\n            combatLog.totalDamage(caster, target, sumOfArray(targetDamage));\r\n            target.hp -= sumOfArray(targetDamage);\r\n            if (attack > guardDefense) {\r\n                combatLog.guardFailsDefend(caster, target, target.buffs.guarded.caster);\r\n                const guardDamage = calcTotalDamageAfterResists(totalDamagePerResist, target.buffs.guarded.caster.resistsArray, caster, target.buffs.guarded.caster, `guarding`);\r\n                combatLog.totalDamage(caster, target.buffs.guarded.caster, sumOfArray(guardDamage));\r\n                target.buffs.guarded.caster.hp -= sumOfArray(guardDamage);\r\n            } else {\r\n                combatLog.guardDefend(caster, target, target.buffs.guarded.caster);\r\n            }\r\n        } else {\r\n            damageSum = calcTotalDamageAfterResists(totalDamagePerResist, target.resistsArray, caster, target, false); // * also calls combatLog()\r\n            combatLog.totalDamage(caster, target, sumOfArray(damageSum));\r\n            target.hp -= sumOfArray(damageSum); \r\n        }\r\n\r\n        if (riposte) {\r\n            combatLog.riposte(target, caster);\r\n            target.useAbility(9, caster);\r\n        }\r\n        \r\n        return;\r\n    },\r\n\r\n    // rangedAttack: function (caster, target) {\r\n    //     const mods = {\r\n    //         attackRollDice: 100,\r\n    //         attackBonus: caster.stats.dexterity,\r\n    //         defendRollDice: 20,\r\n    //         defendBonus\r\n\r\n    //     }\r\n    //     const attackRoll = dice(100);\r\n    //     const defendRoll = dice(20);\r\n    //     const attackBonus = caster.stats.dexterity;\r\n    //     const defendBonus = this.determineDefendBonus(caster, target);\r\n    //     const damage = this.determineDamage(caster);\r\n    //     const attack = attackRoll + attackBonus;\r\n    //     const defend = defendRoll + defendBonus;\r\n    //     if (attackRoll === 100) {\r\n    //         combatLog.critHit(caster, target, damage);\r\n    //         if (sumOfArray(damage) < 1) {\r\n    //             target.hp -= 2;\r\n    //         } else {\r\n    //             target.hp -= sumOfArray(damage) * 2;\r\n    //         }\r\n    //     } else {\r\n    //         combatLog.attackAttempt(caster, target, attackRoll, defendRoll, attackBonus, defendBonus);\r\n    //         if (attack >= defend) {\r\n    //             combatLog.hit(caster, target, damage);\r\n    //             if (sumOfArray(damage) < 1) {\r\n    //                 target.hp -= 1;\r\n    //             } else {\r\n    //                 target.hp -= sumOfArray(damage);\r\n    //             }\r\n    //         } else {\r\n    //             combatLog.defend(caster, target);\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    // magicalAttack: function (caster, target) {\r\n    //     const mods = {\r\n    //         attackRollDice: 100,\r\n    //         attackBonus: caster.stats.dexterity,\r\n    //         defendRollDice: 20,\r\n    //         defendBonus\r\n\r\n    //     }\r\n    //     const attackRoll = dice(100);\r\n    //     const defendRoll = dice(20);\r\n    //     const attackBonus = caster.stats.dexterity;\r\n    //     const defendBonus = this.determineDefendBonus(caster, target);\r\n    //     const damage = this.determineDamage(caster);\r\n    //     const attack = attackRoll + attackBonus;\r\n    //     const defend = defendRoll + defendBonus;\r\n    //     if (attackRoll === 100) {\r\n    //         combatLog.critHit(caster, target, damage);\r\n    //         if (sumOfArray(damage) < 1) {\r\n    //             target.hp -= 2;\r\n    //         } else {\r\n    //             target.hp -= sumOfArray(damage) * 2;\r\n    //         }\r\n    //     } else {\r\n    //         combatLog.attackAttempt(caster, target, attackRoll, defendRoll, attackBonus, defendBonus);\r\n    //         if (attack >= defend) {\r\n    //             combatLog.hit(caster, target, damage);\r\n    //             if (sumOfArray(damage) < 1) {\r\n    //                 target.hp -= 1;\r\n    //             } else {\r\n    //                 target.hp -= sumOfArray(damage);\r\n    //             }\r\n    //         } else {\r\n    //             combatLog.defend(caster, target);\r\n    //         }\r\n    //     }\r\n    // },\r\n\r\n    heal: function (caster, target) {\r\n        const healRoll = dice(100);\r\n        const healAmountRoll = dice(4);\r\n        const healBonus = caster.stats.willpower;\r\n        const healAmount = healAmountRoll + healBonus;\r\n        if (healRoll === 100) {\r\n            combatLog.critHeal(caster, target, healAmountRoll, healBonus, healAmount);\r\n            if (healAmount < 1) {\r\n                target.hp += 2;\r\n            } else {\r\n                target.hp += healAmount * 2;\r\n            }\r\n        } else {\r\n            combatLog.healAttempt(caster, target, healRoll, healBonus);\r\n            if (healRoll > 1) {\r\n                combatLog.heal(caster, target, healAmountRoll, healBonus, healAmount);\r\n                if (healAmount < 1) {\r\n                    target.hp += 1;\r\n                } else {\r\n                    target.hp += healAmount;\r\n                }\r\n            } else {\r\n                combatLog.healFail(caster, target);\r\n            }\r\n        }\r\n    },\r\n    guard: function (caster, target, mods) { // * For every attack made on the target, the caster takes half of that damage.\r\n        const targetBuff = {\r\n            name: mods.buffNameForTarget,\r\n            desc: mods.buffDescForTarget,\r\n            caster: caster,\r\n        }\r\n        const casterBuff = {\r\n            name: mods.buffNameForCaster,\r\n            desc: mods.buffDescForCaster,\r\n            target: target,\r\n        }\r\n        target.buffs.guarded = targetBuff;\r\n        if (caster.buffs.guarding) {\r\n            combatLog.guardSwitch(caster, target);\r\n            delete caster.buffs.guarding.target.buffs.guarded;\r\n            delete caster.buffs.guarding;\r\n            caster.buffs.guarding = casterBuff;\r\n        } else {\r\n            combatLog.guard(caster, target);\r\n            caster.buffs.guarding = casterBuff;\r\n        }\r\n    },\r\n    casterOnlyBuff: function (caster, mods) { // * Buff\r\n        const buff = mods;\r\n        caster.buffs[mods.buffNameForBuffObj] = buff;\r\n        combatLog.casterOnlyBuff(caster, buff);\r\n    },\r\n    debuff: function (caster, target, mods) { // * Buff\r\n        const targetDebuff = mods;\r\n        target.debuffs[mods.debuffNameForBuffObj] = targetDebuff;\r\n        combatLog.debuff(caster, target, targetDebuff);\r\n    },\r\n};\r\n\r\n/* #region  LOGIC */\r\n\r\nfunction getFirstEmptyInventorySlot(char) { // * returns a number representing the first empty inventory index.\r\n    for(let i = 0; i < char.inventory.length; i++) {\r\n        if(char.inventory[i].isDefaultItem) {\r\n            return i;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction putDefaultItemInPlaceOfDrag(char, dragTargetCharData, dragTarget) {\r\n    switch(dragTargetCharData.itemType) {\r\n        case `weapon`:\r\n            if(dragTarget.classList.contains(`mainHand`)) {\r\n                char.equipment[dragTarget.dataset.equipmentSlotName] = allWeapons[0];\r\n            } else {\r\n                char.equipment[dragTarget.dataset.equipmentSlotName] = allWeapons[1];\r\n            }\r\n        break;\r\n        case `armor`:\r\n            switch(dragTarget.classList[1]) {\r\n                case `head`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[0];\r\n                break;\r\n                case `torso`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[1];\r\n                break;\r\n                case `arms`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[2];\r\n                break;\r\n                case `legs`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[3];\r\n                break;\r\n                case `amulet1`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[4];\r\n                break;\r\n                case `amulet2`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[5];\r\n                break;\r\n                case `quickAccess1`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[6];\r\n                break;\r\n                case `quickAccess2`:\r\n                    char.equipment[dragTarget.dataset.equipmentSlotName] = allArmors[7];\r\n                break;\r\n            }\r\n        break;\r\n    }\r\n}\r\nfunction updateCharStats(char, addOrRemove, item) { // TODO: this is only adding resist, but not taking it away when item is removed. Must Fix.\r\n    if(addOrRemove === `add`) {\r\n        if(item.resists) {\r\n            for(let i = 0; i < 9; i++) {\r\n                char.resistsArray[i] += item.resists[i];\r\n            }\r\n        }\r\n        if(item.parry) {\r\n            char.parry += item.parry;\r\n        }\r\n        if(item.dodge) {\r\n            char.dodge += item.dodge;\r\n        }\r\n        if(item.disrupt) {\r\n            char.disrupt += item.disrupt;\r\n        }\r\n        if(item.block) {\r\n            char.block += item.block;\r\n        }\r\n    } else if (addOrRemove === `remove`) {\r\n        if(item.resists) {\r\n            for(let i = 0; i < 9; i++) {\r\n                char.resistsArray[i] -= item.resists[i];\r\n            }\r\n        }\r\n        if(item.parry) {\r\n            char.parry -= item.parry;\r\n        }\r\n        if(item.dodge) {\r\n            char.dodge -= item.dodge;\r\n        }\r\n        if(item.disrupt) {\r\n            char.disrupt -= item.disrupt;\r\n        }\r\n        if(item.block) {\r\n            char.block -= item.block;\r\n        }\r\n    }\r\n}\r\nfunction formatResistArrayToText (resistArray) { // * input will look like the following:       resists: [0,0,-5,-5,-5,-5,-5,-5,-5], output will exclude resists that are 0.\r\n    let resistNames = [`Flat`, `Piercing`, `Ice`,`Fire`,`Corrosive`,`Poison`,`Spiritual`,`Lightning`,`Arcane`];\r\n    let outputText = ``;\r\n    for(let i = 0; i < 9; i++) {\r\n        if(resistArray[i] !== 0) {\r\n            resistNames[i] += ` : ${resistArray[i]}`;\r\n            outputText += `${resistNames[i]}<br>`\r\n        }    \r\n    }\r\n    return outputText;\r\n}\r\nfunction formatDamageDiceToText (damageDice) { // * Input will look like:   [[0, 1, 4],[1, 2, 6]]   : this would mean 1d4 Flat & 2d6 Piercing.\r\n    let outputText = ``;\r\n    for(let i = 0; i < damageDice.length; i++) {\r\n        outputText += `${damageDice[i][1]}d${damageDice[i][2]} ${getResistTypeNameFromIndexNumber(damageDice[i][0])}`;\r\n        if(i < damageDice.length - 1) {\r\n            outputText += ` & `;\r\n        }\r\n    }\r\n    return outputText; \r\n}\r\nfunction getResistTypeNameFromIndexNumber(typeNumber) {\r\n    let resistName;\r\n        switch(typeNumber) {\r\n            case 0:\r\n                resistName = `Flat`;\r\n            break;\r\n            case 1:\r\n                resistName = `Piercing`;\r\n            break;\r\n            case 2:\r\n                resistName = `Ice`;\r\n            break;\r\n            case 3:\r\n                resistName = `Fire`;\r\n            break;\r\n            case 4:\r\n                resistName = `Corrosive`;\r\n            break;\r\n            case 5:\r\n                resistName = `Poison`;\r\n            break;\r\n            case 6:\r\n                resistName = `Spiritual`;\r\n            break;\r\n            case 7:\r\n                resistName = `Lightning`;\r\n            break;\r\n            case 8:\r\n                resistName = `Arcane`;\r\n            break;\r\n        }\r\n        return resistName;\r\n}\r\nfunction resistArrayMultiply(inputResistArray, multiplier) { // * Takes input like so: [7,0,0,0,8,0,0,0,0] and outputs all of those numbers multiplied by the amount specified.\r\n    let outputResistArray = [0,0,0,0,0,0,0,0,0];\r\n    for(let i = 0; i < 9; i++) {\r\n        if (inputResistArray[i] > 0) {\r\n            outputResistArray[i] = inputResistArray[i] * multiplier;\r\n        }\r\n    }\r\n    return outputResistArray;\r\n\r\n}\r\nfunction createRollOutcomeString(rollOutcomeString) {\r\n    // before the string is implied something along the lines of \"rolls :\"\r\n    let output = ``;\r\n    for(let i = 0; i < rollOutcomeString.length; i++) {\r\n        output += rollOutcomeString[i];\r\n        if(i + 1 !== rollOutcomeString.length)\r\n        output += ` + `;\r\n    }\r\n    return output;\r\n}\r\nfunction calcTotalDamageAfterResists(damage, resists, caster, target, guardState) { // * Takes two 9 index long resist arrays, outputs the aftermath of damage. \r\n    // ! NOTE ! : guardState should only take `guarded` `guarding` or false as is args. \r\n    let damageSum = [0,0,0,0,0,0,0,0,0];\r\n    for(let i = 0; i < 9; i++) { // * cycles 9 times for each resist\r\n        if(damage[i] > 0) { // * If the damage is more than 0\r\n            if(resists[i] >=  damage[i]) {  // * If the resist is more than or equal to the damage, then 1 damage is taken.\r\n                damageSum[i] += 1;\r\n            } else if(resists[i] < 0){  // * If the resist is negative\r\n                if((resists[i] * -1) > damage[i]) { // * If the resist is more negative than the damage is positive, we just multiply the damage by 2, because a vulnerability cant do more than the original damage.\r\n                    damageSum[i] += damage[i] * 2;\r\n                } else { // * If the resist is negative, and all of it will be taken as damage, because the damage is higher than it.\r\n                    damageSum[i] += damage[i] + (resists[i] * -1);\r\n                }\r\n            } else { // * If the resist is positive, but is less than the total damage.\r\n                damageSum[i] += (damage[i] - resists[i])\r\n            }\r\n            divideGuardDamage(damageSum, i, guardState);\r\n            combatLog.damageResist(i, damage[i], resists[i], damageSum[i], caster, target, guardState);\r\n        } else if (damageSum[i] < 0){ // * if the damage is negative, then 1 damage is taken, because you cannot deal negative damage on an attack.\r\n            divideGuardDamage(damageSum, i, guardState);\r\n            combatLog.damageResist(i, damage[i], resists[i], damageSum[i], caster, target, guardState);\r\n            damageSum[i] += 1;\r\n        } else {\r\n            damageSum[i] = 0;\r\n        }\r\n    }\r\n    return damageSum;\r\n}\r\nfunction divideGuardDamage(damageSum, i, guardState) { // * checks for any kinds of guard states and divides accordingly. NOTE!: Alters the actual objects via reference.\r\n    if (guardState === `guarded`) { \r\n        damageSum[i] = Math.ceil(damageSum[i] / 2);\r\n    } else if(guardState === `guarding`) {\r\n        damageSum[i] = Math.floor(damageSum[i] / 2);\r\n    } else {\r\n        return;\r\n    }\r\n    return;\r\n}\r\nfunction calcTargetAttackAdvatages(caster) { // * Takes target as input, returns the total advantage count for their defend roll, counting buffs and debuffs.\r\n    let attackRollAdvantages = [];\r\n    Object.keys(caster.buffs).forEach((buffKey) => {\r\n        if (caster.buffs[buffKey].attackRollAdvantage) {\r\n            attackRollAdvantages.push(caster.buffs[buffKey].attackRollAdvantage);\r\n        }\r\n    });\r\n    Object.keys(caster.debuffs).forEach((buffKey) => {\r\n        if (caster.buffs[buffKey].attackRollAdvantage) {\r\n            attackRollAdvantages.push(caster.buffs[buffKey].attackRollAdvantage);\r\n        }\r\n    });\r\n    return sumOfArray(attackRollAdvantages);\r\n}\r\nfunction calcTargetDefendAdvatages(target) { // * Takes target as input, returns the total advantage count for their defend roll, counting buffs and debuffs.\r\n    let defendRollAdvantages = [];\r\n    Object.keys(target.buffs).forEach((buffKey) => {\r\n        if (target.buffs[buffKey].defendRollAdvantage) {\r\n            defendRollAdvantages.push(target.buffs[buffKey].defendRollAdvantage);\r\n        }\r\n    });\r\n    Object.keys(target.debuffs).forEach((buffKey) => {\r\n        if (target.buffs[buffKey].defendRollAdvantage) {\r\n            defendRollAdvantages.push(target.buffs[buffKey].defendRollAdvantage);\r\n        }\r\n    });\r\n    return sumOfArray(defendRollAdvantages);\r\n}\r\nfunction rollWithAdvantageCount(diceSize, advantageCount) { // * Takes a dice size input, and a advantage or disadvantage count input (pos 1 will be a regular roll, lower will be disadvantage and higher will be advantage) returns the highest or lowest number respectiveley.\r\n    let arrOfRolls = [];\r\n    let isAdvantageCountPos;\r\n    if (advantageCount < 0) {\r\n        advantageCount *= -1;\r\n        isAdvantageCountPos = false;\r\n    } else {\r\n        isAdvantageCountPos = true;\r\n    }\r\n    advantageCount += 1;\r\n    for (let i = 0; i < advantageCount; i++) {\r\n        arrOfRolls.push(dice(diceSize))\r\n    };\r\n    if (isAdvantageCountPos) {\r\n        return Math.max(...arrOfRolls);\r\n    } else {\r\n        return Math.min(...arrOfRolls);\r\n    }\r\n}\r\nfunction getGuardDefense(attackType, guarder) {\r\n    const guarderBlock = Math.floor((guarder.stats.initiative / 2) + guarder.block);\r\n    let returnValue;\r\n    switch (attackType) {\r\n        case `melee`:\r\n            const guarderParry = Math.floor((guarder.stats.initiative / 2) + (guarder.stats.dexterity / 4) + guarder.parry);\r\n            returnValue = Math.max(guarderParry, guarderBlock);\r\n            break;\r\n        case `ranged`:\r\n            const guarderDodge = Math.floor((guarder.stats.initiative / 2) + (guarder.stats.agility / 4) + guarder.dodge);\r\n            returnValue = Math.max(guarderDodge, guarderBlock);\r\n            break;\r\n        case `magic`:\r\n            const guarderDisrupt = Math.floor((guarder.stats.initiative / 2) + (guarder.stats.willpower / 4) + guarder.disrupt);\r\n            returnValue = Math.max(guarderDisrupt, guarderBlock);\r\n            break;\r\n    }\r\n    return returnValue;\r\n}\r\nfunction doesArrayOfObjectsIncludeIndexOf(array, propertyName, value) {\r\n    array.forEach((ele) => {\r\n        if (ele[propertyName] === value) {\r\n            let index = array.indexOf(ele);\r\n            return index;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nfunction doesArrayOfObjectsInclude(array, propertyName, value) {\r\n    array.forEach((ele) => {\r\n        if (ele[propertyName] === value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n}\r\nfunction concatRollDice(...args) { // * Takes multiple 2D dice array input like rollDice does, but outputs will ignore null inputs.\r\n    let outputArr = [];\r\n    args.forEach((el) => {\r\n        if (el) {\r\n            let i = rollDice(el);\r\n            outputArr = outputArr.concat(i);\r\n        }\r\n    });\r\n    return outputArr;\r\n}\r\nfunction rollDice(diceArr) { // * Takes a 2D dice array input like so: [ [2,4] , [3,6] ] - equivilent to 2d4 + 3d6. Outputs array of each individual roll result, now with resistances.\r\n    if (diceArr === null) {\r\n        return null;\r\n    }\r\n    let rollArr = [];\r\n    for (let i = 0; i < diceArr.length; i++) {\r\n        for (let x = 0; x < diceArr[i][1]; x++) {\r\n\r\n            rollArr.push([diceArr[i][0],dice(diceArr[i][2])]);\r\n        }\r\n    }\r\n    return rollArr;\r\n}\r\nfunction dice(dMax) { // * Takes an integer number X as input and outputs a random number between 1 and X like a single dice roll.\r\n    return Math.floor(Math.random() * dMax + 1);\r\n}\r\nfunction diceMinus1(dMax) { // * Takes an integer number X as input and outputs a random number between 0 and X.\r\n    return Math.floor(Math.random() * dMax + 1) - 1;\r\n}\r\nfunction sumOfDamageArray(arrayOfNumbers) { // * Takes a 2D array of numbers and adds the index [1's] up, then returns an array 9 indexes long representing each damage resist type, and how much of that type was summed.\r\n    if (arrayOfNumbers === null) {\r\n        return null;\r\n    }\r\n    let sum = [0,0,0,0,0,0,0,0,0];\r\n    for (let i = 0; i < arrayOfNumbers.length; i++) {\r\n        sum[arrayOfNumbers[i][0]] += arrayOfNumbers[i][1];\r\n    }\r\n    return sum;\r\n}\r\nfunction sumOfArray(arrayOfNumbers) { // * Takes a 1D array of numbers and adds them up, then returns the sum.\r\n    let sum = 0;\r\n    arrayOfNumbers.forEach((el) => { if (el === null) { el = 0 } sum += el });\r\n    return sum;\r\n}\r\nfunction popArrayPopValue(array) {\r\n    let arrayCopy = Object.assign([], array);\r\n    return arrayCopy.pop();\r\n}\r\nfunction popArrayArrayValue(array) {\r\n    let arrayCopy = Object.assign([], array);\r\n    arrayCopy.pop();\r\n    return arrayCopy;\r\n}\r\nfunction isTargetDead(target) {\r\n    if (target.hp < 1) {\r\n        console.log(`Target is dead.`)\r\n        return true\r\n    }\r\n}\r\nfunction isAttackingAllies(caster, target) {\r\n    if (caster.groupName === `PC` && target.groupName === `PC`) {\r\n        console.log(`Don't attack your allies!`);\r\n        return true\r\n    }\r\n    if (caster.groupName === `NPC` && target.groupName === `NPC`) {\r\n        return true\r\n    }\r\n    return false;\r\n};\r\nfunction isHealingEnemies(caster, target) {\r\n    if (caster.groupName === `PC` && target.groupName === `NPC`) {\r\n        console.log(`Don't heal the enemy!`);\r\n        return true\r\n    }\r\n    if (caster.groupName === `NPC` && target.groupName === `PC`) {\r\n        return true\r\n    }\r\n    return false;\r\n};\r\nfunction isBuffingEnemies(caster, target) {\r\n    if (caster.groupName === `PC` && target.groupName === `NPC`) {\r\n        console.log(`Don't buff the enemy!`);\r\n        return true\r\n    }\r\n    if (caster.groupName === `NPC` && target.groupName === `PC`) {\r\n        return true\r\n    }\r\n    return false;\r\n};\r\nfunction isHealingDeadTarget(target, abilityName) {\r\n    if (target.hp < 1) {\r\n        console.log(`${abilityName} is not powerful enough to ressurect ${target.name}.`)\r\n        return true\r\n    }\r\n};\r\nfunction forceHPtoZero(char) {\r\n    if (char.hp < 0) {\r\n        char.hp = 0;\r\n    }\r\n};\r\nfunction isTargetInRangeOfCaster(caster, target, abilityRange) {\r\n    let casterRowConverted;\r\n    let targetRowConverted;\r\n    if (caster.groupName !== target.groupName) {\r\n        if(caster.groupName === `PC`) {\r\n            switch (caster.row) {\r\n                case 3:\r\n                    casterRowConverted = 6;\r\n                break;\r\n                case 2:\r\n                    casterRowConverted = 5;\r\n                break;\r\n                case 1:\r\n                    casterRowConverted = 4;\r\n                break;\r\n            }\r\n            switch (target.row) {\r\n                case 3:\r\n                    targetRowConverted = 1;\r\n                break;\r\n                case 2:\r\n                    targetRowConverted = 2;\r\n                break;\r\n                case 1:\r\n                    targetRowConverted = 3;\r\n                break;\r\n            }\r\n            if(Math.abs(casterRowConverted - targetRowConverted) <= abilityRange) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        if(caster.groupName === `NPC`) {\r\n            switch (caster.row) {\r\n                case 3:\r\n                    casterRowConverted = 1;\r\n                break;\r\n                case 2:\r\n                    casterRowConverted = 2;\r\n                break;\r\n                case 1:\r\n                    casterRowConverted = 3;\r\n                break;\r\n            }\r\n            switch (target.row) {\r\n                case 3:\r\n                    targetRowConverted = 6;\r\n                break;\r\n                case 2:\r\n                    targetRowConverted = 5;\r\n                break;\r\n                case 1:\r\n                    targetRowConverted = 4;\r\n                break;\r\n            }\r\n            if(Math.abs(casterRowConverted - targetRowConverted) <= abilityRange) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    } else {\r\n        if(caster.groupName === `PC`) {\r\n            switch (caster.row) {\r\n                case 3:\r\n                    casterRowConverted = 6;\r\n                break;\r\n                case 2:\r\n                    casterRowConverted = 5;\r\n                break;\r\n                case 1:\r\n                    casterRowConverted = 4;\r\n                break;\r\n            }\r\n            switch (target.row) {\r\n                case 3:\r\n                    targetRowConverted = 6;\r\n                break;\r\n                case 2:\r\n                    targetRowConverted = 5;\r\n                break;\r\n                case 1:\r\n                    targetRowConverted = 4;\r\n                break;\r\n            }\r\n            if((Math.abs(casterRowConverted - targetRowConverted) <= abilityRange)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        if(caster.groupName === `NPC`) {\r\n            switch (caster.row) {\r\n                case 3:\r\n                    casterRowConverted = 1;\r\n                break;\r\n                case 2:\r\n                    casterRowConverted = 2;\r\n                break;\r\n                case 1:\r\n                    casterRowConverted = 3;\r\n                break;\r\n            }\r\n            switch (target.row) {\r\n                case 3:\r\n                    targetRowConverted = 1;\r\n                break;\r\n                case 2:\r\n                    targetRowConverted = 2;\r\n                break;\r\n                case 1:\r\n                    targetRowConverted = 3;\r\n                break;\r\n            }\r\n            if((Math.abs(casterRowConverted - targetRowConverted) <= abilityRange)) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    \r\n};\r\n\r\n/* #endregion END LOGIC*/\r\n\r\n/* #endregion Ability Effects & Logic*/\r\n\r\n/* #region All Lists */\r\n\r\nconst allAbilities = [];\r\nfunction defineAllAbilities() {\r\n    allAbilities[0] = {\r\n        name: `empty`,\r\n        effect: function (caster, target) {\r\n            return;\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 0,\r\n                            abilityRange: caster.equipment.mainHand.range,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.dexterity,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: [0, caster.stats.strength],\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 0,\r\n        icon: `url(\"./images/quickAccess.png\")`,\r\n    }\r\n    allAbilities[1] = {\r\n        name: `Attack`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 0,\r\n                            abilityRange: caster.equipment.mainHand.range,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.dexterity,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: [0, caster.stats.strength],\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 20,\r\n        icon: `url(\"./images/attack.png\")`,\r\n    }\r\n    allAbilities[2] = {\r\n        name: `Powerful Strike`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 1,\r\n                            abilityRange: 1,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.strength,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: Math.floor(caster.stats.strength * 1.5),\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 25,\r\n        icon: `url(\"./images/powerfulStrike.png\")`,\r\n    }\r\n    allAbilities[3] = {\r\n        name: `Precision Strike`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 1,\r\n                            abilityRange: caster.equipment.mainHand.range,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.dexterity * 2,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: [0, Math.floor(caster.stats.dexterity * 1.5)],\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 25,\r\n        icon: `url(\"./images/precisionStrike.png\")`,\r\n    }\r\n    allAbilities[4] = {\r\n        name: `Healing Word`,\r\n        effect: function (caster, target) {\r\n            if (!isHealingEnemies(caster, target)) {\r\n                if (!isHealingDeadTarget(target, this.name)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 1,\r\n                            abilityRange: 1,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.dexterity * 2,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: Math.floor(caster.stats.dexterity * 1.5),\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.heal(caster, target); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 10,\r\n        icon: `url(\"./images/healingWord.png\")`,\r\n    }\r\n    allAbilities[5] = {\r\n        name: `Guard`,\r\n        effect: function (caster, target) {\r\n            if (!isBuffingEnemies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (!target.buffs.guarded) {\r\n                        if (turn.AP >= this.APCost) {\r\n                            const mods = {\r\n                                abilityIndex: 1,\r\n                                abilityRange: 1,\r\n                                buffNameForTarget: `Guarded`,\r\n                                buffNameForCaster: `Guarding`,\r\n                                buffDescForTarget: `Guarded by ${caster.name}`,\r\n                                buffDescForCaster: `Guarding ${target.name}`,\r\n                            };\r\n                            if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                                effect.guard(caster, target, mods); turn.AP -= this.APCost\r\n                            } else {\r\n                                combatLog.targetNotInRange(target, this.name);\r\n                            }\r\n                        } else {\r\n                            combatLog.noAP(this.name, this.APCost);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 50,\r\n        icon: `url(\"./images/guard.png\")`,\r\n    }\r\n    allAbilities[6] = {\r\n        name: `Leaping Strike`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            abilityIndex: 0,\r\n                            abilityRange: 2,\r\n                            attackRollDice: 100,\r\n                            attackBonus: caster.stats.dexterity,\r\n                            damageRollDice: {\r\n                                mainHandWeapon: caster.equipment.mainHand.damage,\r\n                                offHandWeapon: caster.equipment.offHand.damage,\r\n                                ability: null,\r\n                            },\r\n                            damageBonus: [0, caster.stats.strength],\r\n                            critThreshold: 100,\r\n                            critMultiplier: 2,\r\n                            defendRollDice: 20,\r\n                            targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                            targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                            targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                            targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                            getDefendBonus: function () {\r\n                                return Math.max(this.targetParry, this.targetBlock)\r\n                            },\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 20,\r\n        icon: `url(\"./images/leapingStrike.png\")`,\r\n    }\r\n    allAbilities[7] = {\r\n        name: `Reflexive Focus`, // TODO: Make this ability drain 5 ap every turn that it is active, also need a way to see that it is active and a way to disable it.\r\n        effect: function (caster, target) {\r\n            if (!caster.buffs.reflexiveFocus) {\r\n                if (turn.AP >= this.APCost) {\r\n                    const mods = {\r\n                        name: `Reflexive Focus`,\r\n                        desc: `${caster.name} is focused on his defenses, giving advantage on defense rolls. `,\r\n                        buffNameForBuffObj: `reflexiveFocus`,\r\n                        defendRollAdvantage: 1,\r\n                    };\r\n                    effect.casterOnlyBuff(caster, mods); turn.AP -= this.APCost\r\n                } else {\r\n                    combatLog.noAP(this.name, this.APCost);\r\n                }\r\n            } else {\r\n                // TODO: Need a combat log for the target\r\n            }\r\n        },\r\n        APCost: 5,\r\n        icon: `url(\"./images/reflexiveFocus.png\")`,\r\n    }\r\n    allAbilities[8] = {\r\n        name: `Reveal Weakness`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    if (turn.AP >= this.APCost) {\r\n                        const mods = {\r\n                            name: `Reveal Weakness`,\r\n                            desc: `${caster.name} has revealed ${target.name}'s weakness, giving him disadvantage on defense, and he takes 1 extra damage from all attacks. `,\r\n                            debuffNameForBuffObj: `revealWeakness`,\r\n                            defendRollAdvantage: -1,\r\n                            abilityRange: 5,\r\n                        };\r\n                        if(isTargetInRangeOfCaster(caster, target, mods.abilityRange)) {\r\n                            effect.debuff(caster, target, mods); turn.AP -= this.APCost\r\n                        } else {\r\n                            combatLog.targetNotInRange(target, this.name);\r\n                        }\r\n                    } else {\r\n                        combatLog.noAP(this.name, this.APCost);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        APCost: 75,\r\n        icon: `url(\"./images/revealWeakness.png\")`,\r\n    }\r\n    allAbilities[9] = {\r\n        name: `Flesh Eating`,\r\n        effect: function (caster, target) {\r\n            return;\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (turn.AP >= this.APCost) {\r\n                    effect.attack(caster, target); turn.AP -= this.APCost\r\n                } else {\r\n                    combatLog.noAP(this.name, this.APCost);\r\n                }\r\n            }\r\n        },\r\n        APCost: 0,\r\n        icon: `url(\"./images/fleshEating.png\")`,\r\n    }\r\n    allAbilities[10] = {\r\n        name: `Riposte`,\r\n        effect: function (caster, target) {\r\n            if (!isAttackingAllies(caster, target)) {\r\n                if (!isTargetDead(target)) {\r\n                    const mods = {\r\n                        isRiposte: true,\r\n                        abilityIndex: 9,\r\n                        attackRollDice: 100,\r\n                        attackBonus: caster.stats.dexterity,\r\n                        damageRollDice: {\r\n                            mainHandWeapon: caster.equipment.mainHand.damage,\r\n                            offHandWeapon: caster.equipment.offHand.damage,\r\n                            ability: null,\r\n                        },\r\n                        damageBonus: [0, caster.stats.strength],\r\n                        critThreshold: 100,\r\n                        critMultiplier: 2,\r\n                        defendRollDice: 20,\r\n                        targetParry: Math.floor((target.stats.initiative / 2) + (target.stats.dexterity / 4) + target.parry),\r\n                        targetDodge: Math.floor((target.stats.initiative / 2) + (target.stats.agility / 4) + target.dodge),\r\n                        targetDisrupt: Math.floor((target.stats.initiative / 2) + (target.stats.willpower / 4) + target.disrupt),\r\n                        targetBlock: Math.floor((target.stats.initiative / 2) + target.block),\r\n                        getDefendBonus: function () {\r\n                            return Math.max(this.targetParry, this.targetBlock)\r\n                        },\r\n                    };\r\n                    effect.meleeAttack(caster, target, mods); turn.AP -= this.APCost\r\n                }\r\n            }\r\n        },\r\n        APCost: 0,\r\n        icon: `url(\"./images/riposte.png\")`,\r\n    }\r\n}\r\nconst allWeapons = []; // TODO: Weapons are the most up to date items, will need to fix this\r\nfunction defineAllWeapons() {\r\n    allWeapons[0] = {\r\n        isDefaultItem: true,\r\n        itemType: `weapon`,\r\n        itemEquipType: [`mainHand`, `offHand`],\r\n        index: 0,\r\n        icon: `url(\"./images/mainHand.png\")`,\r\n        name: `Main Hand Unarmed`,\r\n        type: `melee`,\r\n        damage: [[0, 1, 4]],\r\n        range: 1,\r\n        parry: 0,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n    allWeapons[1] = {\r\n        isDefaultItem: true,\r\n        itemType: `weapon`,\r\n        itemEquipType: [`mainHand`, `offHand`],\r\n        index: 1,\r\n        icon: `url(\"./images/offHand.png\")`,\r\n        name: `Off-Hand Unarmed`,\r\n        type: `melee`,\r\n        damage: [[0, 1, 4]],\r\n        range: 1,\r\n        parry: 0,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n    allWeapons[2] = {\r\n        isDefaultItem: false,\r\n        itemType: `weapon`,\r\n        itemEquipType: [`mainHand`, `offHand`],\r\n        index: 2,\r\n        icon: `url(\"./images/dagger.png\")`,\r\n        name: `Dagger`,\r\n        type: `melee`,\r\n        damage: [[0, 2, 4]],\r\n        range: 1,\r\n        parry: 1,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n}\r\nconst allArmors = []; // TODO: Need to fix all equipment icons. \r\nfunction defineAllArmors() {\r\n    allArmors[0] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`head`],\r\n        index: 0,\r\n        icon: `url(\"./images/head.png\")`,\r\n        name: `Head`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[1] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`torso`],\r\n        index: 1,\r\n        icon: `url(\"./images/torso.png\")`,\r\n        name: `Torso`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[2] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`arms`],\r\n        index: 2,\r\n        icon: `url(\"./images/arms.png\")`,\r\n        name: `Arms`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[3] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`legs`],\r\n        index: 3,\r\n        icon: `url(\"./images/legs.png\")`,\r\n        name: `Legs`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[4] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`amulet1`],\r\n        index: 4,\r\n        icon: `url(\"./images/amulet.png\")`,\r\n        name: `Amulet 1`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[5] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`amulet2`],\r\n        index: 5,\r\n        icon: `url(\"./images/amulet.png\")`,\r\n        name: `Amulet 2`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[6] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`quickAccess1`],\r\n        index: 6,\r\n        icon: `url(\"./images/quickAccess.png\")`,\r\n        name: `Quick Access 1`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[7] = {\r\n        isDefaultItem: true,\r\n        itemType: `armor`,\r\n        itemEquipType: [`quickAccess2`],\r\n        index: 7,\r\n        icon: `url(\"./images/quickAccess.png\")`,\r\n        name: `Quick Access 2`,\r\n        // type: `melee`,\r\n        resists: [0,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[8] = {\r\n        isDefaultItem: false,\r\n        itemType: `armor`,\r\n        itemEquipType: [`torso`],\r\n        index: 8,\r\n        icon: `url(\"./images/oldShirt.png\")`,\r\n        name: `Old Shirt`,\r\n        // type: `melee`,\r\n        resists: [1,0,0,0,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    allArmors[9] = {\r\n        isDefaultItem: false,\r\n        itemType: `armor`,\r\n        itemEquipType: [`legs`],\r\n        index: 9,\r\n        icon: `url(\"./images/trustyBelt.png\")`,\r\n        name: `Trusty Belt`,\r\n        // type: `melee`,\r\n        resists: [0,0,1,1,0,0,0,0,0],\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: 2,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n}\r\nconst allItems = [];\r\nfunction defineAllItems() {\r\n    allItems[0] = {\r\n        isDefaultItem: true,\r\n        itemType: `item`,\r\n        index: 0,\r\n        icon: `url(\"./images/inventory.png\")`,\r\n        name: `emptySlot`,\r\n        type: null,\r\n        damage: null,\r\n        range: null,\r\n        parry: null,\r\n        dodge: null,\r\n        disrupt: null,\r\n        block: null,\r\n    }\r\n    // allItems[1] = {\r\n    //     itemType: `item`,\r\n    //     index: 1,\r\n    //     icon: ``,\r\n    //     name: `Dagger`,\r\n    //     type: `melee`,\r\n    //     damage: [[0, 2, 4]],\r\n    //     range: 1,\r\n    //     parry: 1,\r\n    //     dodge: 0,\r\n    //     disrupt: 0,\r\n    //     block: 0,\r\n    // }\r\n}\r\nconst allRaces = [];\r\nfunction defineAllRaces() {\r\n    allRaces[0] = {\r\n        name: `Man`,\r\n        stats: {\r\n            strength: 0,\r\n            dexterity: 0,\r\n            willpower: 0,\r\n            vitality: 0,\r\n            agility: 0,\r\n            initiative: 0,\r\n            intelligence: 4,\r\n            charisma: 0,\r\n        },\r\n        resistsArray: [0,0,-5,-5,-5,-5,-5,-5,-5],   \r\n    };\r\n    allRaces[1] = {\r\n        name: `Elf`,\r\n        stats: {\r\n            strength: -2,\r\n            dexterity: 2,\r\n            willpower: 0,\r\n            vitality: -4,\r\n            agility: 0,\r\n            initiative: 0,\r\n            intelligence: 8,\r\n            charisma: 0,\r\n        },\r\n        resistsArray: [0,0,-5,-5,-5,-5,-5,-5,-5],   \r\n    };\r\n    allRaces[2] = {\r\n        name: `Dwarf`,\r\n        stats: {\r\n            strength: 2,\r\n            dexterity: 0,\r\n            willpower: 2,\r\n            vitality: 4,\r\n            agility: -8,\r\n            initiative: 0,\r\n            intelligence: 4,\r\n            charisma: 0,\r\n        },\r\n        resistsArray: [0,0,-3,-3,-3,-3,-3,-3,-3],   \r\n\r\n    };\r\n    allRaces[3] = {\r\n        name: `Saurus`,\r\n        stats: {\r\n            strength: 14,\r\n            dexterity: -2,\r\n            willpower: 4,\r\n            vitality: 14,\r\n            agility: 2,\r\n            initiative: 4,\r\n            intelligence: -14,\r\n            charisma: -18,\r\n        },\r\n        resistsArray: [5,5,0,0,0,0,-5,0,-5],   \r\n    };\r\n}\r\nconst allTalents = [];\r\nfunction defineAllTalents() {\r\n    allTalents[0] = {\r\n        name: `Strong`,\r\n        statBonusName: `strength`,\r\n        statBonusAmount: 4,\r\n        ability: 2,\r\n    };\r\n    allTalents[1] = {\r\n        name: `Dexterous`,\r\n        statBonusName: `dexterity`,\r\n        statBonusAmount: 4,\r\n        ability: 3,\r\n    };\r\n    allTalents[2] = {\r\n        name: `Soulful`,\r\n        statBonusName: `willpower`,\r\n        statBonusAmount: 4,\r\n        ability: 4,\r\n    };\r\n    allTalents[3] = {\r\n        name: `Resilient`,\r\n        statBonusName: `vitality`,\r\n        statBonusAmount: 4,\r\n        ability: 5,\r\n    };\r\n    allTalents[4] = {\r\n        name: `Agile`,\r\n        statBonusName: `agility`,\r\n        statBonusAmount: 4,\r\n        ability: 6,\r\n    };\r\n    allTalents[5] = {\r\n        name: `Responsive`,\r\n        statBonusName: `initiative`,\r\n        statBonusAmount: 4,\r\n        ability: 7,\r\n    };\r\n    allTalents[6] = {\r\n        name: `Genius`,\r\n        statBonusName: `intelligence`,\r\n        statBonusAmount: 4,\r\n        ability: 8,\r\n    };\r\n    allTalents[7] = {\r\n        name: `Charismatic`,\r\n        statBonusName: `charisma`,\r\n        statBonusAmount: 4,\r\n        ability: 9,\r\n    };\r\n    allTalents[8] = {\r\n        name: `Sorcerous`,\r\n    };\r\n}\r\nconst allFeats = [];\r\nfunction defineAllFeats() {\r\n    allFeats[0] = {\r\n        name: `Brute Force`,\r\n        parry: 0,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n    allFeats[1] = {\r\n        name: `Heavy Strikes`,\r\n        parry: 1,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n}\r\nconst allBackgrounds = [];\r\nfunction defineAllBackgrounds() {\r\n    allBackgrounds[0] = {\r\n        name: `Peasant`,\r\n        parry: 0,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n    allBackgrounds[1] = {\r\n        name: `Mercenary`,\r\n        parry: 1,\r\n        dodge: 0,\r\n        disrupt: 0,\r\n        block: 0,\r\n    }\r\n}\r\n\r\n/* #endregion All Lists*/\r\n\r\n/* #region  Groups */\r\n\r\n// Index 0 is always the main/player character\r\n\r\nconst PCs = {\r\n    name: `PC`,\r\n    charList: [],\r\n}\r\n\r\nconst NPCs = {\r\n    name: `NPC`,\r\n    charList: [],\r\n}\r\n\r\nconst unassignedGroup = {\r\n    name: `Unassigned`,\r\n    charList: [],\r\n}\r\n\r\n/* #endregion Groups */\r\n\r\n/* #region  Char Creation */\r\n\r\nfunction Char(name, race) {\r\n    this.name = `${name}`;\r\n    this.groupName = ``;\r\n    this.raceName = `${race.name}`;\r\n    this.talent1Name = ``;\r\n    this.talent2Name = ``;\r\n    this.hp = 100;\r\n    this.abilities = [1];\r\n    this.hotBar = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n    this.stats = race.stats;\r\n    this.resistsArray = race.resistsArray; \r\n    this.buffs = {};\r\n    this.debuffs = {};\r\n    this.row = 1;\r\n    this.equipment = {\r\n        mainHand: allWeapons[0],\r\n        offHand: allWeapons[1],\r\n        head: allArmors[0],\r\n        torso: allArmors[1],\r\n        arms: allArmors[2],\r\n        legs: allArmors[3],\r\n        amulet1: allArmors[4],\r\n        amulet2: allArmors[5],\r\n        quickAccess1: allArmors[6],\r\n        quickAccess2: allArmors[7],\r\n    };\r\n    this.inventory = [allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0], allItems[0]];\r\n    this.addEquipment = function (slotName, equipment) {\r\n        this.equipment[slotName] = equipment;\r\n        this.parry = sumOfArray([this.equipment.mainHand.parry, this.equipment.offHand.parry, this.equipment.armor.parry]);\r\n        this.dodge = sumOfArray([this.equipment.mainHand.dodge, this.equipment.offHand.dodge, this.equipment.armor.dodge]);\r\n        this.disrupt = sumOfArray([this.equipment.mainHand.disrupt, this.equipment.offHand.disrupt, this.equipment.armor.disrupt]);\r\n        this.block = sumOfArray([this.equipment.mainHand.block, this.equipment.offHand.block, this.equipment.armor.block]);\r\n    };\r\n    this.addStatBonus = function (statName, amount) {\r\n        switch (statName) {\r\n            case `strength`:\r\n                this.stats.strength += amount;\r\n                break;\r\n            case `dexterity`:\r\n                this.stats.dexterity += amount;\r\n                break;\r\n            case `willpower`:\r\n                this.stats.willpower += amount;\r\n                break;\r\n            case `vitality`:\r\n                this.stats.vitality += amount;\r\n                break;\r\n            case `agility`:\r\n                this.stats.agility += amount;\r\n                break;\r\n            case `initiative`:\r\n                this.stats.initiative += amount;\r\n                break;\r\n            case `intelligence`:\r\n                this.stats.intelligence += amount;\r\n                break;\r\n            case `charisma`:\r\n                this.stats.charisma += amount;\r\n                break;\r\n        }\r\n    };\r\n    this.useAbility = function (abilityIndex, target) {\r\n        if (this.hp > 0) {\r\n            if (this.abilities.includes(+abilityIndex) || +abilityIndex === 9) {\r\n                allAbilities[abilityIndex].effect(this, target);\r\n            } else {\r\n                console.log(`Err: Char does not have this ability`);\r\n            }\r\n        } else {\r\n            combatLog.charIsDead(this, allAbilities[abilityIndex]);\r\n        }\r\n    };\r\n    this.getTalentNames = function () {\r\n        return this.talent1Name + this.talent2Name;\r\n    };\r\n    this.initCharReferenceForChildObjects = function (childObject) {\r\n        this[childObject].char = this;\r\n        delete this.initCharReferenceForChildObjects;\r\n        return this;\r\n    };\r\n    /*     \r\n        this.inventory = {\r\n            hands: [null,null,null,null],\r\n            backpack: false,\r\n            saddlebag: false,\r\n            properties: false,\r\n        };\r\n    */\r\n\r\n};\r\n\r\nfunction characterCreator(name, race, talent1, talent2, group) {\r\n    function createChar(name, race) {\r\n        unassignedGroup.charList.push(new Char(name, race));\r\n    }\r\n    function addTalents(talent1, talent2) {\r\n        // targetChar is always equal to the latest created character in the unnassignedGroup.charList array.\r\n        const targetChar = unassignedGroup.charList[unassignedGroup.charList.length - 1];\r\n        const talent1StatBonusName = talent1.statBonusName;\r\n        const talent1StatBonusAmount = talent1.statBonusAmount;\r\n        const talent2StatBonusName = talent2.statBonusName;\r\n        const talent2StatBonusAmount = talent2.statBonusAmount;\r\n        const talent1Ability = talent1.ability;\r\n        const talent2Ability = talent2.ability;\r\n        targetChar.talent1Name = talent1.name;\r\n        targetChar.talent2Name = talent2.name;\r\n        targetChar.addStatBonus(talent1StatBonusName, talent1StatBonusAmount);\r\n        targetChar.addStatBonus(talent2StatBonusName, talent2StatBonusAmount);\r\n        targetChar.abilities.push(talent1Ability);\r\n        targetChar.abilities.push(talent2Ability);\r\n    }\r\n    function addEquipment() {\r\n        const targetChar = unassignedGroup.charList[unassignedGroup.charList.length - 1];\r\n        targetChar.addEquipment(`armor`, allArmors[0]);\r\n    }\r\n    function assignGroup(group) {\r\n        const targetChar = unassignedGroup.charList[unassignedGroup.charList.length - 1];\r\n        targetChar.groupName = group.name;\r\n        group.charList.push(targetChar);\r\n        unassignedGroup.charList.pop();\r\n    }\r\n    createChar(name, race);\r\n    addTalents(talent1, talent2);\r\n    addEquipment();\r\n    assignGroup(group);\r\n};\r\n\r\n/* #endregion Char Creation*/\r\n\r\n/* #region  DOM */\r\n\r\nconst DOM = {\r\n    body: document.querySelector(`body`),\r\n    inventoryTab: document.querySelector(`.inventory`),\r\n    utilDivisionTabs: document.querySelector(`.utilDivisionTabs`),\r\n    moveRowButtons: document.querySelector(`.moveRowButtons`),\r\n    utilDivisionDisplay: document.querySelector(`.utilDivisionDisplay`),\r\n    endTurnButton: document.querySelector(`.endTurnButton`),\r\n    APCount: document.querySelector(`.APCount`),\r\n    casterSelectionDisplay: document.querySelector(`.casterSelectionDisplay`),\r\n    targetSelectionDisplay: document.querySelector(`.targetSelectionDisplay`),\r\n    PCBar: document.querySelector(`.PCBar`),\r\n    PCBarRow1: document.querySelector(`.PCBarRow1`),\r\n    PCBarRow2: document.querySelector(`.PCBarRow2`),\r\n    PCBarRow3: document.querySelector(`.PCBarRow3`),\r\n    NPCBarRow1: document.querySelector(`.NPCBarRow1`),\r\n    NPCBarRow2: document.querySelector(`.NPCBarRow2`),\r\n    NPCBarRow3: document.querySelector(`.NPCBarRow3`),\r\n    NPCBar: document.querySelector(`.NPCBar`),\r\n    abilityListContainer: document.querySelector(`.abilityListContainer`),\r\n    botBar: document.querySelector(`.botBar`),\r\n    midBar: document.querySelector(`.midBar`),\r\n    casterSelection: null,\r\n    targetSelection: null,\r\n    casterSelectionState: null,\r\n    targetSelectionState: null,\r\n    selectedUtilDivisionTab: null,\r\n    selectedUtilDivisionTabState: `inventory`,\r\n    dragTarget: null,\r\n    timeout: null,\r\n\r\n    listenForEndTurnButton: function () {\r\n        this.endTurnButton.addEventListener(`click`, (e) => {\r\n            turn.end();\r\n        })\r\n    },\r\n    listenForMoveRowButtons: function () {\r\n        this.moveRowButtons.addEventListener(`click`, (e) => {\r\n            if(e.target.className === `up` && this.casterSelectionState !== null) {\r\n                if(this.casterSelectionState.row > 1) {\r\n                    this.casterSelectionState.row -= 1;\r\n                }\r\n            }\r\n            if(e.target.className === `down` && this.casterSelectionState !== null) {\r\n                if(this.casterSelectionState.row < 3) {\r\n                    this.casterSelectionState.row += 1;\r\n                }\r\n            }\r\n            this.update();\r\n        })\r\n    },\r\n    clearTooltips: function () {\r\n        clearTimeout(this.timeout);\r\n        let tooltips = document.getElementsByClassName(`tooltip`);\r\n        while(tooltips.length > 0) {\r\n        tooltips[0].parentNode.removeChild(tooltips[0]);\r\n        }\r\n        return;\r\n    },\r\n    listenForMouseOver: function () { // * Listens for mouseover on the whole page body.\r\n        this.body.addEventListener(`mouseover`, (e) => { // TODO: Need to fix tooltip to not disappear when clicking on it, maybe.. look at ROR.\r\n            // console.log(e.target.className)\r\n            if( (e.target.classList.contains(`inventoryItem`) || e.target.classList.contains(`equipmentItem`)) && !(e.target.dataset.itemType === `item` && e.target.dataset.itemIndex === `0`) ) {\r\n                this.clearTooltips();\r\n                this.timeout = setTimeout( function() {DOM.displayItemTooltip(e.target)} , 600);\r\n            } else if (e.target.className !== `tooltip` && e.target.className !== `tooltipContent` ) {\r\n                this.clearTooltips();\r\n            }\r\n        });\r\n    },\r\n    displayItemTooltip: function (target) {\r\n        let tooltips = document.getElementsByClassName(`tooltip`);\r\n        if(tooltips.length > 0) {\r\n            return;\r\n        }\r\n        const x = document.createElement(`div`);\r\n        let item;\r\n        let damageDiceDisplay;\r\n        let resistsDisplay;\r\n        if(target.dataset) {\r\n            switch(target.dataset.itemType) {\r\n                case `weapon`:\r\n                    item = allWeapons[target.dataset.itemIndex];\r\n                    damageDiceDisplay = formatDamageDiceToText(item.damage); \r\n                    x.className = `tooltip`;\r\n                    x.innerHTML = `\r\n                                <div class=\"tooltipContent\">${item.name}:</div>\r\n                                <div class=\"tooltipContent\">-</div>\r\n                                <div class=\"tooltipContent\">Damage: ${damageDiceDisplay}</div>`;\r\n                break;\r\n                case `armor`:\r\n                    item = allArmors[target.dataset.itemIndex];\r\n                    resistsDisplay = formatResistArrayToText(item.resists); \r\n                    if(!resistsDisplay) {\r\n                        resistsDisplay = `None`;\r\n                    }\r\n                    x.className = `tooltip`;\r\n                    x.innerHTML = `\r\n                                <div class=\"tooltipContent\">${item.name}:</div>\r\n                                <div class=\"tooltipContent\">-</div>\r\n                                <div class=\"tooltipContent\">Resists:<br>${resistsDisplay}</div>`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        target.append(x);\r\n        this.timeout = null;\r\n    },\r\n    attemptAbilityCast: function (target) {\r\n        const abilityDatasetIndex = target.dataset.abilityIndex;\r\n        if ((this.casterSelectionState && this.targetSelectionState) !== null) {\r\n            this.casterSelectionState.useAbility(abilityDatasetIndex, this.targetSelectionState)\r\n        } else {\r\n            console.log(`invalid targets`);\r\n        }\r\n        this.update();\r\n        this.updateTopBar();\r\n    },\r\n    listenForBotBar: function () {\r\n        this.botBar.addEventListener(`click`, (e) => {\r\n            switch (e.target.className) {\r\n                case `ability`:\r\n                    this.attemptAbilityCast(e.target);\r\n                    break;\r\n                case `slideLeft`:\r\n\r\n                    break;\r\n                case `slideRight`:\r\n\r\n                    break;\r\n            }\r\n        })\r\n    },\r\n    updateTopBar: function () {\r\n        if (this.casterSelectionState) {\r\n            this.casterSelectionDisplay.textContent = `Caster: ${this.casterSelectionState.name}`;\r\n        } else {\r\n            this.casterSelectionDisplay.textContent = `Caster: None Selected`;\r\n        }\r\n\r\n        if (this.targetSelectionState) {\r\n            this.targetSelectionDisplay.textContent = `Target: ${this.targetSelectionState.name}`;\r\n        } else {\r\n            this.targetSelectionDisplay.textContent = `Target: None Selected`;\r\n        }\r\n        this.APCount.textContent = `Action Points: ${turn.AP}`;\r\n    },\r\n    updateBotBar: function (selectedPC) {\r\n        if (selectedPC && !this.abilityListContainer.hasChildNodes()) {\r\n            this.createHotBar(this.casterSelectionState);\r\n        } else if (!selectedPC) {\r\n            this.abilityListContainer.innerHTML = ``;\r\n            this.createHotBar(this.casterSelectionState);\r\n        }\r\n    },\r\n    createHotBar: function (char) {\r\n        if(!char) { // * sets hotbar/botbar back to a bunch of blanks.\r\n            for (let i = 0; i < 36; i++) {\r\n                const x = document.createElement(`div`);\r\n                x.className = `ability`;\r\n                x.dataset.hotBarIndex = i;\r\n                x.style.backgroundImage = allAbilities[0].icon;\r\n                x.style.backgroundRepeat = `no-repeat`;\r\n                x.style.backgroundSize = `100%`;\r\n                this.abilityListContainer.append(x); \r\n            }\r\n            return;\r\n        } else { // * Generates the hotbar when a character is selected.\r\n            for (let i = 0; i < char.hotBar.length; i++) {\r\n                const x = document.createElement(`div`);\r\n                x.className = `ability`;\r\n                x.dataset.hotBarIndex = i; \r\n                x.dataset.abilityIndex = char.hotBar[i];\r\n                x.style.backgroundImage = allAbilities[char.hotBar[i]].icon;\r\n                x.style.backgroundRepeat = `no-repeat`;\r\n                x.style.backgroundSize = `100%`;\r\n                this.abilityListContainer.append(x);\r\n            } \r\n        }\r\n    },\r\n    selectCaster: function (target) {\r\n        if (this.casterSelection !== null && target !== this.casterSelection) {\r\n            this.deselectCaster();\r\n        }\r\n        const targetGroupIndex = target.dataset.groupIndex;\r\n        this.casterSelectionState = PCs.charList[targetGroupIndex];\r\n        this.casterSelection = target;\r\n        if (this.casterSelectionState.hp === 0) {\r\n            this.casterSelection.style.borderColor = `rgb(75,75,150)`;\r\n        } else {\r\n            this.casterSelection.style.borderColor = `blue`;\r\n        }\r\n        this.updateBotBar();\r\n        this.updateUtilDivisionDisplay();\r\n    },\r\n    deselectCaster: function () {\r\n        if (this.casterSelection) {\r\n            if (this.casterSelection === this.targetSelection) {\r\n                this.targetSelection.style.borderColor = `yellow`;\r\n                this.casterSelection = null;\r\n                this.casterSelectionState = null;\r\n            } else {\r\n                if (this.casterSelectionState.hp === 0) {\r\n                    this.casterSelection.style.borderColor = `rgb(50,50,50)`;\r\n                } else {\r\n                    this.casterSelection.style.borderColor = `white`;\r\n                }\r\n                this.casterSelection = null;\r\n                this.casterSelectionState = null;\r\n            }\r\n        }\r\n        this.updateBotBar();\r\n        this.updateUtilDivisionDisplay();\r\n    },\r\n    listenForCasterSelection: function () {\r\n        this.PCBar.addEventListener(`click`, (e) => {\r\n            if (e.target.className === `PC`) {\r\n                this.selectCaster(e.target);\r\n            } else {\r\n                this.deselectCaster();\r\n            }\r\n            this.updateTopBar();\r\n            this.updateBotBar(this.casterSelectionState);\r\n        })\r\n    },\r\n    listenForTargetSelection: function () {\r\n        this.midBar.addEventListener(`contextmenu`, (e) => {\r\n            e.preventDefault();\r\n            if (e.target.className === `PC` || e.target.className === `NPC`) {\r\n                this.selectTarget(e.target);\r\n            } else {\r\n                this.deselectTarget();\r\n            }\r\n            this.updateTopBar();\r\n        })\r\n    },\r\n    selectTarget: function (target) {\r\n        if (this.targetSelection !== null && target !== this.targetSelection) {\r\n            this.deselectTarget();\r\n        }\r\n        this.targetSelection = target;\r\n        let targetGroup = target.className;\r\n        const targetGroupIndex = target.dataset.groupIndex;\r\n        if (targetGroup === `NPC`) {\r\n            this.targetSelectionState = NPCs.charList[targetGroupIndex];\r\n            target.style.borderColor = `red`;\r\n        };\r\n        if (targetGroup === `PC`) {\r\n            this.targetSelectionState = PCs.charList[targetGroupIndex];\r\n            target.style.borderColor = `yellow`;\r\n        }\r\n    },\r\n    deselectTarget: function () {\r\n        if (this.targetSelection) {\r\n            if (this.targetSelection === this.casterSelection) {\r\n                if (this.targetSelectionState.hp === 0) {\r\n                    this.targetSelection.style.borderColor = `rgb(75,75,150)`;\r\n                } else {\r\n                    this.targetSelection.style.borderColor = `blue`;\r\n                }\r\n                this.targetSelection = null;\r\n                this.targetSelectionState = null;\r\n            } else {\r\n                if (this.targetSelectionState.hp === 0) {\r\n                    this.targetSelection.style.borderColor = `rgb(50,50,50)`;\r\n                } else {\r\n                    this.targetSelection.style.borderColor = `white`;\r\n                }\r\n                this.targetSelection = null;\r\n                this.targetSelectionState = null;\r\n            }\r\n        }\r\n    },\r\n    update: function () {\r\n        this.NPCBarRow3.innerHTML = ``;\r\n        this.NPCBarRow2.innerHTML = ``;\r\n        this.NPCBarRow1.innerHTML = ``;\r\n        this.PCBarRow1.innerHTML = ``;\r\n        this.PCBarRow2.innerHTML = ``;\r\n        this.PCBarRow3.innerHTML = ``;\r\n        for (let i = (PCs.charList.length - 1); i >= 0; i--) {\r\n            this.createChar(PCs.charList[i], i)\r\n        };\r\n        for (let i = (NPCs.charList.length - 1); i >= 0; i--) {\r\n            this.createChar(NPCs.charList[i], i)\r\n        };\r\n    },\r\n    createChar: function (char, charListIndex) {\r\n        const i = document.createElement(`div`);\r\n        i.className = `${char.groupName}`;\r\n        i.id = `index${charListIndex}`;\r\n        i.dataset.groupIndex = charListIndex;\r\n        forceHPtoZero(char);\r\n        if (char.hp === 0) {\r\n            i.style.borderColor = `rgb(50,50,50)`;\r\n            i.innerHTML = `<div class=\"name\">${char.name}</div>\r\n                           <div class=\"HP\">HP: ${char.hp} (Dead)</div>\r\n                           <div class=\"race\">Race: ${char.raceName}</div>\r\n                           <div class=\"talents\">Talents: ${char.talent1Name} & ${char.talent2Name}</div>`;\r\n        } else {\r\n            i.innerHTML = `<div class=\"name\">${char.name}</div>\r\n                           <div class=\"HP\">HP: ${char.hp}</div>\r\n                           <div class=\"race\">Race: ${char.raceName}</div>\r\n                           <div class=\"talents\">Talents: ${char.talent1Name} & ${char.talent2Name}</div>`;\r\n        }\r\n\r\n        switch (char.groupName) {\r\n            case `PC`:\r\n                if (this.casterSelectionState === char) {\r\n                    if (this.casterSelectionState.hp === 0) {\r\n                        i.style.borderColor = `rgb(75,75,150)`;\r\n                    } else {\r\n                        i.style.borderColor = `blue`;\r\n                    }\r\n                    this.casterSelection = i;\r\n                } else if (this.targetSelectionState === char) {\r\n                    i.style.borderColor = `yellow`;\r\n                    this.targetSelection = i;\r\n                }\r\n                this.appendPCCharToRow(char, i);\r\n                break;\r\n\r\n            case `NPC`:\r\n                if (this.targetSelectionState === char) {\r\n                    i.style.borderColor = `red`;\r\n                    this.targetSelection = i;\r\n                }\r\n                this.appendNPCCharToRow(char, i);\r\n                break;\r\n\r\n            case `Unassigned`:\r\n                console.log(`Error: Tried to put char with unassigned group onto DOM.`);\r\n                break;\r\n\r\n            default:\r\n                console.log(`Error: Something weird happened here.`);\r\n                break;\r\n        }\r\n    },\r\n    listenForTabSelection: function () { // * Listens to the tab buttons at the top-right of the screen.\r\n        this.utilDivisionTabs.addEventListener(`click`, (e) => {\r\n            switch(e.target.className) {\r\n                case `inventory`:\r\n                    this.clearTabSelectionDisplay();\r\n                    this.selectedUtilDivisionTabState = `inventory`;\r\n                    this.selectedUtilDivisionTab = e.target;\r\n                    this.updateUtilDivisionDisplay();\r\n                    this.updateTabSelectionDisplay();\r\n                break;\r\n                case `stats`:\r\n                    this.clearTabSelectionDisplay();\r\n                    this.selectedUtilDivisionTabState = `stats`;\r\n                    this.selectedUtilDivisionTab = e.target;\r\n                    this.updateUtilDivisionDisplay();\r\n                    this.updateTabSelectionDisplay();\r\n                break;\r\n                case `party`:\r\n                    this.clearTabSelectionDisplay();\r\n                    this.selectedUtilDivisionTabState = `party`;\r\n                    this.selectedUtilDivisionTab = e.target;\r\n                    this.updateUtilDivisionDisplay();\r\n                    this.updateTabSelectionDisplay();\r\n                break;\r\n            }\r\n        })\r\n    },\r\n    listenForDrag: function () { // * Using this to make sure things are not draggable if they aren't supposed to be, also sets DOM.dragTarget and clears tooltips.\r\n        this.body.addEventListener(`dragstart`, (e) => {\r\n            if(e.target.draggable === false) {\r\n                e.preventDefault();\r\n            }\r\n            this.dragTarget = e.target;\r\n            this.clearTooltips();\r\n        });\r\n    },\r\n    listenForDragover: function () { // * Only for changing the symbol that indicates dropability when hovering over things.\r\n        this.body.addEventListener(`dragover`, (e) => {\r\n            this.clearTooltips();\r\n            if(e.target.classList.contains(`inventoryItem`) || e.target.classList.contains(`equipmentItem`)) {\r\n                e.preventDefault();\r\n            }\r\n        })\r\n    },\r\n    listenForDrop: function () { // * Where most of the drag & drop item swapping logic is.\r\n        this.body.addEventListener(`drop`, (e) => {\r\n            let dropTarget = e.target; // * dragTarget is the other variable, it represents the item being dragged.\r\n            let dragTargetCharData;\r\n            let dropTargetCharData;\r\n            let tempStorage;\r\n            let char = this.casterSelectionState;\r\n            switch(this.dragTarget.classList[0]) { // * links dom element properties to the char data for DRAGTARGET\r\n                case `equipmentItem` :\r\n                    dragTargetCharData = char.equipment[this.dragTarget.dataset.equipmentSlotName];\r\n                break;\r\n                case `inventoryItem` :\r\n                    dragTargetCharData = char.inventory[this.dragTarget.dataset.inventoryIndex];\r\n                break;\r\n            }\r\n            switch(dropTarget.classList[0]) { // * links dom element properties to the char data for DROPTARGET\r\n                case `equipmentItem` :\r\n                    dropTargetCharData = char.equipment[dropTarget.dataset.equipmentSlotName];\r\n                break;\r\n                case `inventoryItem` :\r\n                    dropTargetCharData = char.inventory[dropTarget.dataset.inventoryIndex];\r\n                break;\r\n            }\r\n            if (dropTarget.classList.contains(`equipmentItem`) && !dragTargetCharData.itemEquipType.includes(dropTargetCharData.itemEquipType[0])) { // * Disallows items with non-matching equip types to be swapped.\r\n                console.log(`! Cannot place an item with equip type: ${dragTargetCharData.itemEquipType} into an equipment slot with item type: ${dropTargetCharData.itemEquipType}.`)\r\n                return;\r\n            } else if (this.dragTarget.classList[0] === `equipmentItem` && dropTarget.classList[0] === `inventoryItem` && !dropTargetCharData.isDefaultItem) {\r\n                console.log(`! Cannot place an item with equip type: ${dragTargetCharData.itemEquipType} into an equipment slot with item type: ${dropTargetCharData.itemEquipType}.`)\r\n                return;\r\n            }\r\n\r\n            tempStorage = dragTargetCharData;\r\n\r\n            switch(this.dragTarget.classList[0]) {\r\n                case `inventoryItem` : // ***** If drag is from inventory\r\n                    switch(dropTarget.classList[0]) {\r\n                        case `inventoryItem`: // *** If drop is to inventory\r\n                            if(dropTargetCharData.isDefaultItem) { // ! If drop is empty\r\n                                char.inventory[this.dragTarget.dataset.inventoryIndex] = allItems[0];\r\n                                char.inventory[dropTarget.dataset.inventoryIndex] = tempStorage;\r\n                                // do the swap\r\n                            } else { // ! If drop contains item\r\n                                char.inventory[this.dragTarget.dataset.inventoryIndex] = dropTargetCharData;\r\n                                char.inventory[dropTarget.dataset.inventoryIndex] = tempStorage;\r\n                                // do the swap\r\n                            }\r\n\r\n                        break;\r\n                        case `equipmentItem`: // *** If drop is to equipment\r\n                            if(dropTargetCharData.isDefaultItem) { // ! If drop is empty\r\n                                char.inventory[this.dragTarget.dataset.inventoryIndex] = allItems[0];\r\n                                char.equipment[dropTarget.dataset.equipmentSlotName] = tempStorage;\r\n                                updateCharStats(char, `add`, dragTargetCharData);\r\n                                // do the swap and add stats\r\n                            } else { // ! If drop contains item\r\n                                char.inventory[this.dragTarget.dataset.inventoryIndex] = dropTargetCharData;\r\n                                char.equipment[dropTarget.dataset.equipmentSlotName] = tempStorage;\r\n                                updateCharStats(char, `add`, dragTargetCharData);\r\n                                updateCharStats(char, `remove`, dropTargetCharData);\r\n                                // do the swap and add drag stats, subtract drop stats\r\n                            }\r\n\r\n                        break;\r\n                    }\r\n                break;\r\n                case `equipmentItem` : // ***** If drag is from equipment\r\n                    switch(dropTarget.classList[0]) {\r\n                        case `inventoryItem`: // *** If drop is to inventory\r\n\r\n                            if(dropTargetCharData.isDefaultItem) { // ! If drop is empty\r\n                                putDefaultItemInPlaceOfDrag(char, dragTargetCharData, this.dragTarget)\r\n                                char.inventory[dropTarget.dataset.inventoryIndex] = tempStorage;\r\n                                updateCharStats(char, `remove`, dragTargetCharData);\r\n                                // do the swap and remove drag stats\r\n                            } else { // ! If drop contains item\r\n                                char.equipment[this.dragTarget.dataset.equipmentSlotName] = dropTargetCharData;\r\n                                char.inventory[dropTarget.dataset.inventoryIndex] = tempStorage;\r\n                                updateCharStats(char, `remove`, dragTargetCharData);\r\n                                updateCharStats(char, `add`, dropTargetCharData);\r\n                                // do the swap and remove drag stats, add drop stats\r\n                            }\r\n\r\n                        break; \r\n                        case `equipmentItem`: // *** If drop is to equipment\r\n\r\n                            if(dropTargetCharData.isDefaultItem) { // ! If drop is empty\r\n                                putDefaultItemInPlaceOfDrag(char, dragTargetCharData, this.dragTarget)\r\n                                char.equipment[this.dragTarget.dataset.equipmentSlotName] = tempStorage;\r\n                                // do the swap\r\n                            } else { // ! If drop contains item\r\n                                char.equipment[this.dragTarget.dataset.equipmentSlotName] = dropTargetCharData;\r\n                                char.inventory[dropTarget.dataset.inventoryIndex] = tempStorage;\r\n                                // do the swap\r\n                            }\r\n\r\n                        break;\r\n                    }\r\n                break;\r\n            }\r\n            this.updateUtilDivisionDisplay();\r\n            this.dragTarget = null;\r\n        }) \r\n    },\r\n    listenForRightClickEquip: function () { // * Where the right click swapping logic is.\r\n        this.utilDivisionDisplay.addEventListener(`contextmenu`, (e) => {\r\n            e.preventDefault();\r\n            if ( ( e.target.classList.contains(`inventoryItem`) || e.target.classList.contains(`equipmentItem`) )  &&  e.target.draggable === true) {\r\n                let dragTarget = e.target; // * dragTarget is the other variable, it represents the item being dragged.\r\n                let dragTargetCharData;\r\n                let dropTargetCharData;\r\n                let tempStorage;\r\n                let char = this.casterSelectionState;\r\n                switch(dragTarget.classList[0]) { // * links dom element properties to the char data for DRAGTARGET\r\n                    case `equipmentItem` :\r\n                        dragTargetCharData = char.equipment[dragTarget.dataset.equipmentSlotName];\r\n                        dropTargetCharData = char.inventory[getFirstEmptyInventorySlot(char)];\r\n                    break;\r\n                    case `inventoryItem` :\r\n                        dragTargetCharData = char.inventory[dragTarget.dataset.inventoryIndex];\r\n                        dropTargetCharData = char.equipment[dragTargetCharData.itemEquipType[0]];\r\n                    break;\r\n                }\r\n                \r\n                tempStorage = dragTargetCharData;\r\n\r\n                switch(dragTarget.classList[0]) {\r\n                    case `inventoryItem` : // ***** If drag is from inventory\r\n                        if(dropTargetCharData.isDefaultItem) { // ! If drop is empty\r\n                            char.inventory[dragTarget.dataset.inventoryIndex] = allItems[0];\r\n                            char.equipment[dragTargetCharData.itemEquipType[0]] = tempStorage;\r\n                            updateCharStats(char, `add`, dragTargetCharData);\r\n                            // do the swap and add stats\r\n                        } else { // ! If drop contains item\r\n                            char.inventory[dragTarget.dataset.inventoryIndex] = dropTargetCharData;\r\n                            char.equipment[dragTargetCharData.itemEquipType[0]] = tempStorage;\r\n                            updateCharStats(char, `add`, dragTargetCharData);\r\n                            updateCharStats(char, `remove`, dropTargetCharData);\r\n                            // do the swap and add drag stats, subtract drop stats\r\n                        }\r\n                    break;\r\n                    case `equipmentItem` : // ***** If drag is from equipment\r\n                        putDefaultItemInPlaceOfDrag(char, dragTargetCharData, dragTarget)\r\n                        char.inventory[getFirstEmptyInventorySlot(char)] = dragTargetCharData;\r\n                        updateCharStats(char, `remove`, dragTargetCharData);\r\n                        // do the swap and remove drag stats\r\n                    break;\r\n                }\r\n            }\r\n            this.updateUtilDivisionDisplay();\r\n        })\r\n    },\r\n    updateUtilDivisionDisplay: function () { // * is called when you select a different char or tab.\r\n        switch(this.selectedUtilDivisionTabState) {\r\n            case `inventory`:\r\n                this.utilDivisionDisplay.innerHTML = `Equipment:`;\r\n                if (this.casterSelectionState) {\r\n                    this.createUtilDivisionDisplay(this.casterSelectionState);\r\n                }\r\n            break;\r\n            case `stats`:\r\n                this.utilDivisionDisplay.innerHTML = `Stats:`;\r\n                if (this.casterSelectionState) {\r\n                    this.createUtilDivisionDisplay(this.casterSelectionState);\r\n                }\r\n            break;\r\n            case `party`:\r\n                this.utilDivisionDisplay.innerHTML = `Party:`;\r\n                if (this.casterSelectionState) {\r\n                    this.createUtilDivisionDisplay(this.casterSelectionState);\r\n                }\r\n            break;\r\n        }\r\n    },\r\n    generateInventory: function (inventoryContainer, char) { \r\n        for (let i = 0; i < char.inventory.length; i++) {\r\n            const x = document.createElement(`div`);\r\n            if(char.inventory[i]) {\r\n                x.className = `inventoryItem`;\r\n                x.dataset.itemType = char.inventory[i].itemType;\r\n                x.dataset.itemIndex = char.inventory[i].index;\r\n                x.dataset.inventoryIndex = i;\r\n                x.style.backgroundImage = char.inventory[i].icon;\r\n                x.style.backgroundRepeat = `no-repeat`;\r\n                x.style.backgroundSize = `100%`;\r\n                if(!char.inventory[i].isDefaultItem) {\r\n                    x.draggable = true;\r\n                } else {\r\n                    x.draggable = false;\r\n                }\r\n            }\r\n            inventoryContainer.append(x);\r\n        }\r\n    },\r\n    createEquipmentSlot: function (ele, char, slotName) {\r\n        ele.className = `equipmentItem ${slotName}`;\r\n        const item = char.equipment[slotName];\r\n        ele.dataset.itemType = item.itemType;\r\n        ele.dataset.itemIndex = item.index;\r\n        ele.dataset.equipmentSlotName = slotName;\r\n        ele.style.backgroundImage = char.equipment[slotName].icon;\r\n        ele.style.backgroundRepeat = `no-repeat`;\r\n        ele.style.backgroundSize = `100%`;\r\n        if(!item.isDefaultItem) {\r\n            ele.draggable = true;\r\n        } else {\r\n            ele.draggable = false;\r\n        }\r\n    },\r\n    createUtilDivisionDisplay: function (char) { // * Holds most of the logic for the DOM structure of the UtilDivisionDisplay\r\n        switch(this.selectedUtilDivisionTabState) {\r\n            case `inventory`:\r\n                const equipDisplay = document.createElement(`div`);\r\n                equipDisplay.className = `equipDisplay`;\r\n                // * Main Container\r\n                this.utilDivisionDisplay.append(equipDisplay);\r\n\r\n                // * Subcontainers\r\n                const equipLeft = document.createElement(`div`);\r\n                equipLeft.className = `equipLeft`;\r\n                const equipCenter = document.createElement(`div`);\r\n                equipCenter.className = `equipCenter`;\r\n                const equipRight = document.createElement(`div`);\r\n                equipRight.className = `equipRight`;\r\n                equipDisplay.append(equipLeft, equipCenter, equipRight);\r\n\r\n                // * Main Armor Slots on the left\r\n                const headSlot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(headSlot, char, `head`);\r\n                const torsoSlot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(torsoSlot, char, `torso`);\r\n                const armsSlot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(armsSlot, char, `arms`);\r\n                const legsSlot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(legsSlot, char, `legs`);\r\n                equipLeft.append(headSlot, torsoSlot, armsSlot, legsSlot);\r\n\r\n                // * Middle Subcontainers\r\n                const statsDisplay = document.createElement(`div`);\r\n                statsDisplay.className = `statsDisplay`;\r\n\r\n                    const statsDisplayLeft = document.createElement(`div`);\r\n                    statsDisplayLeft.className = `statsDisplayLeft`;\r\n\r\n                        const strengthDisplay = document.createElement(`div`);\r\n                        strengthDisplay.textContent = `STR: ${char.stats.strength}`;\r\n\r\n                        const dexterityDisplay = document.createElement(`div`);\r\n                        dexterityDisplay.textContent = `DEX: ${char.stats.dexterity}`;\r\n\r\n                        const willpowerDisplay = document.createElement(`div`);\r\n                        willpowerDisplay.textContent = `WIL: ${char.stats.willpower}`;\r\n\r\n                        const vitalityDisplay = document.createElement(`div`);\r\n                        vitalityDisplay.textContent = `VIT: ${char.stats.vitality}`;\r\n\r\n                        const divider1 = document.createElement(`div`);\r\n                        divider1.textContent = `-`;\r\n\r\n                        const parryDisplay = document.createElement(`div`);\r\n                        parryDisplay.textContent = `PARRY: ${char.parry}`;\r\n\r\n                        const dodgeDisplay = document.createElement(`div`);\r\n                        dodgeDisplay.textContent = `DODGE: ${char.dodge}`;\r\n\r\n                        const divider3 = document.createElement(`div`);\r\n                        divider3.textContent = `-`;\r\n\r\n                        const flatResistDisplay = document.createElement(`div`);\r\n                        flatResistDisplay.textContent = `FLAT R: ${char.resistsArray[0]}`;\r\n\r\n                        const iceResistDisplay = document.createElement(`div`);\r\n                        iceResistDisplay.textContent = `ICE R: ${char.resistsArray[2]}`;\r\n\r\n                        const corrosiveResistDisplay = document.createElement(`div`);\r\n                        corrosiveResistDisplay.textContent = `CORRO. R: ${char.resistsArray[4]}`;\r\n\r\n                        const spiritualResistDisplay = document.createElement(`div`);\r\n                        spiritualResistDisplay.textContent = `SPIRIT R: ${char.resistsArray[6]}`;\r\n\r\n                        const arcaneResistDisplay = document.createElement(`div`);\r\n                        arcaneResistDisplay.textContent = `ARCANE R: ${char.resistsArray[8]}`;\r\n                        \r\n                        statsDisplayLeft.append(strengthDisplay, dexterityDisplay, willpowerDisplay, vitalityDisplay, divider1, parryDisplay, dodgeDisplay, divider3, flatResistDisplay, iceResistDisplay, corrosiveResistDisplay, spiritualResistDisplay, arcaneResistDisplay);\r\n\r\n                    const statsDisplayRight = document.createElement(`div`);\r\n                    statsDisplayRight.className = `statsDisplayRight`;\r\n\r\n                        const agilityDisplay = document.createElement(`div`);\r\n                        agilityDisplay.textContent = `AGI: ${char.stats.agility}`;\r\n\r\n                        const initiativeDisplay = document.createElement(`div`);\r\n                        initiativeDisplay.textContent = `INI: ${char.stats.initiative}`;\r\n\r\n                        const intelligenceDisplay = document.createElement(`div`);\r\n                        intelligenceDisplay.textContent = `INT: ${char.stats.intelligence}`;\r\n\r\n                        const charismaDisplay = document.createElement(`div`);\r\n                        charismaDisplay.textContent = `CHA: ${char.stats.charisma}`;\r\n\r\n                        const divider2 = document.createElement(`div`);\r\n                        divider2.textContent = `-`;\r\n\r\n                        const disruptDisplay = document.createElement(`div`);\r\n                        disruptDisplay.textContent = `DISRUPT: ${char.disrupt}`;\r\n\r\n                        const blockDisplay = document.createElement(`div`);\r\n                        blockDisplay.textContent = `BLOCK: ${char.block}`;\r\n\r\n                        const divider4 = document.createElement(`div`);\r\n                        divider4.textContent = `-`;\r\n\r\n                        const piercingResistDisplay = document.createElement(`div`);\r\n                        piercingResistDisplay.textContent = `PIERCE R: ${char.resistsArray[1]}`;\r\n\r\n                        const fireResistDisplay = document.createElement(`div`);\r\n                        fireResistDisplay.textContent = `FIRE R: ${char.resistsArray[3]}`;\r\n\r\n                        const poisonResistDisplay = document.createElement(`div`);\r\n                        poisonResistDisplay.textContent = `POISON R: ${char.resistsArray[5]}`;\r\n\r\n                        const lightningResistDisplay = document.createElement(`div`);\r\n                        lightningResistDisplay.textContent = `LIGHTN. R: ${char.resistsArray[7]}`;\r\n                        \r\n                        statsDisplayRight.append( agilityDisplay, initiativeDisplay, intelligenceDisplay, charismaDisplay, divider2, disruptDisplay, blockDisplay, divider4, piercingResistDisplay, fireResistDisplay, poisonResistDisplay, lightningResistDisplay);\r\n\r\n                statsDisplay.append(statsDisplayLeft, statsDisplayRight);\r\n\r\n                const weaponsDisplay = document.createElement(`div`);\r\n                weaponsDisplay.className = `weaponsDisplay`;\r\n\r\n                    const mainHandWeaponSlot = document.createElement(`div`);\r\n                        this.createEquipmentSlot(mainHandWeaponSlot, char, `mainHand`);\r\n                    const offHandWeaponSlot = document.createElement(`div`);\r\n                        this.createEquipmentSlot(offHandWeaponSlot, char, `offHand`);\r\n                    weaponsDisplay.append(mainHandWeaponSlot, offHandWeaponSlot);\r\n\r\n                equipCenter.append(statsDisplay, weaponsDisplay);\r\n\r\n                // * Amulet & Quick Access Slots on the right.\r\n                const amulet1Slot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(amulet1Slot, char, `amulet1`);\r\n                const amulet2Slot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(amulet2Slot, char, `amulet2`);\r\n                const quickAccess1Slot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(quickAccess1Slot, char, `quickAccess1`);\r\n                const quickAccess2Slot = document.createElement(`div`);\r\n                    this.createEquipmentSlot(quickAccess2Slot, char, `quickAccess2`);\r\n                equipRight.append(amulet1Slot, amulet2Slot, quickAccess1Slot, quickAccess2Slot);\r\n\r\n\r\n                // const x = document.createElement(`div`);\r\n                // const z = document.createElement(`div`);\r\n                // const arrayOfAllKeysInEquipment = Object.keys(char.equipment);\r\n                // const itemKeyName = arrayOfAllKeysInEquipment[i];\r\n                // const item = char.equipment[itemKeyName];\r\n                // x.innerHTML = `<div>-</div>\r\n                //             <div class=\"slotName\">${itemKeyName}:</div>`;\r\n                // x.className = `equipmentContainer`;\r\n\r\n                // z.className = `equipmentItem`;\r\n                // z.dataset.itemType = char.equipment[itemKeyName].itemType;\r\n                // z.dataset.itemIndex = char.equipment[itemKeyName].index;\r\n                // z.dataset.equipmentSlotName = itemKeyName;\r\n                // z.style.backgroundImage = char.equipment[itemKeyName].icon;\r\n                // z.style.backgroundRepeat = `no-repeat`;\r\n                // z.style.backgroundSize = `100%`;\r\n                // if(!item.isDefaultItem) {\r\n                //     z.draggable = true;\r\n                // } else {\r\n                //     z.draggable = false;\r\n                // }\r\n                // this.utilDivisionDisplay.append(x);\r\n                // x.append(z);\r\n            \r\n                const inventoryContainer = document.createElement(`div`);\r\n                inventoryContainer.className = `inventoryContainer`;\r\n                this.utilDivisionDisplay.appendChild(inventoryContainer);\r\n                this.generateInventory(inventoryContainer, char); // ! Here I will eventually want to replace the first param with something like -   char.invSpace   -.\r\n            break;\r\n            case `stats`:\r\n                for (let i = 0; i < (Object.keys(this.casterSelectionState.stats).length); i++) {\r\n                    const x = document.createElement(`div`);\r\n                    const arrayOfAllKeysInStats = Object.keys(char.stats);\r\n                    const statKeyName = arrayOfAllKeysInStats[i];\r\n                    const stat = char.stats[statKeyName];\r\n                    x.innerHTML = `<div>-</div>\r\n                                <div class=\"statName\">${statKeyName}:</div>\r\n                                <div>${stat}</div>`\r\n                    this.utilDivisionDisplay.append(x);\r\n                }\r\n            break;\r\n            case `party`:\r\n                for (let i = 0; i < (Object.keys(this.casterSelectionState.stats).length); i++) {\r\n                    const x = document.createElement(`div`);\r\n                    const arrayOfAllKeysInStats1 = Object.keys(char.stats);\r\n                    const statKeyName1 = arrayOfAllKeysInStats1[i];\r\n                    const stat1 = char.stats[statKeyName1];\r\n                    x.innerHTML = `<div>-</div>\r\n                                <div class=\"statName\">${statKeyName1}:</div>\r\n                                <div>${stat1}</div>`\r\n                    this.utilDivisionDisplay.append(x);\r\n                }\r\n            break;\r\n        }\r\n    },\r\n    updateTabSelectionDisplay: function () {\r\n        switch(this.selectedUtilDivisionTabState) {\r\n            case `inventory`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(100,100,200)`;  \r\n            break;\r\n            case `stats`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(100,100,200)`;  \r\n            break;\r\n            case `party`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(100,100,200)`;  \r\n            break;\r\n            default:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(255,255,255)`;  \r\n        }\r\n    },\r\n    clearTabSelectionDisplay: function () {\r\n        switch(this.selectedUtilDivisionTabState) {\r\n            case `inventory`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(255,255,255)`;  \r\n            break;\r\n            case `stats`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(255,255,255)`;  \r\n            break;\r\n            case `party`:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(255,255,255)`;  \r\n            break;\r\n            default:\r\n                this.selectedUtilDivisionTab.style.borderColor = `rgb(255,255,255)`;  \r\n        }\r\n    },\r\n    appendPCCharToRow: function (char, i) {\r\n        switch (char.row) {\r\n            case 1: \r\n                this.PCBarRow1.append(i);\r\n            break;\r\n            case 2: \r\n                this.PCBarRow2.append(i);\r\n            break;\r\n            case 3: \r\n                this.PCBarRow3.append(i);\r\n            break;\r\n        }\r\n    },\r\n    appendNPCCharToRow: function (char, i) {\r\n        switch (char.row) {\r\n            case 1: \r\n                this.NPCBarRow1.append(i);\r\n            break;\r\n            case 2: \r\n                this.NPCBarRow2.append(i);\r\n            break;\r\n            case 3: \r\n                this.NPCBarRow3.append(i);\r\n            break;\r\n        }\r\n    },\r\n};\r\n\r\n/* #endregion DOM*/\r\n\r\ndefineAllAbilities();\r\ndefineAllWeapons();\r\ndefineAllRaces();\r\ndefineAllTalents();\r\ndefineAllArmors();\r\ndefineAllFeats();\r\ndefineAllBackgrounds();\r\ndefineAllItems();\r\n\r\ncharacterCreator(`Stroick`, allRaces[0], allTalents[3], allTalents[5], PCs);\r\ncharacterCreator(`Kliftin`, allRaces[1], allTalents[2], allTalents[6], PCs);\r\ncharacterCreator(`Dahmer Hobo`, allRaces[3], allTalents[6], allTalents[7], NPCs);\r\ncharacterCreator(`Evil`, allRaces[2], allTalents[4], allTalents[5], NPCs);\r\n\r\nconst stroick = PCs.charList[0];\r\nconst evil = NPCs.charList[1];\r\nconst kliftin = PCs.charList[1];\r\nconst hobo = NPCs.charList[0];\r\n\r\nstroick.inventory[0] = allWeapons[2];\r\nstroick.inventory[1] = allArmors[8];\r\nstroick.inventory[2] = allArmors[9];\r\nstroick.hotBar[30] = 1;\r\n\r\nDOM.update();\r\nDOM.listenForCasterSelection();\r\nDOM.listenForBotBar();\r\nDOM.listenForEndTurnButton();\r\nDOM.listenForTargetSelection();\r\nDOM.listenForMoveRowButtons();\r\nDOM.listenForTabSelection();\r\nDOM.listenForMouseOver();\r\nDOM.listenForDrag();\r\nDOM.listenForDragover();\r\nDOM.listenForDrop();\r\nDOM.listenForRightClickEquip();\r\n\r\nDOM.selectedUtilDivisionTab = DOM.inventoryTab;\r\nDOM.updateUtilDivisionDisplay();\r\nDOM.updateTabSelectionDisplay();\r\nDOM.updateBotBar();\r\n\r\nconsole.log(stroick);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/print.js":
/*!**********************!*\
  !*** ./src/print.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ printMe)\n/* harmony export */ });\nfunction printMe() {\r\n    console.log('I get called from print.js!');\r\n  }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcHJpbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9wcmludC5qcz83NTIzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByaW50TWUoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnSSBnZXQgY2FsbGVkIGZyb20gcHJpbnQuanMhJyk7XHJcbiAgfSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/print.js\n");

/***/ }),

/***/ "./src/images/amulet.png":
/*!*******************************!*\
  !*** ./src/images/amulet.png ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/amulet.png";

/***/ }),

/***/ "./src/images/arms.png":
/*!*****************************!*\
  !*** ./src/images/arms.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/arms.png";

/***/ }),

/***/ "./src/images/attack.png":
/*!*******************************!*\
  !*** ./src/images/attack.png ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/attack.png";

/***/ }),

/***/ "./src/images/dagger.png":
/*!*******************************!*\
  !*** ./src/images/dagger.png ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/dagger.png";

/***/ }),

/***/ "./src/images/fleshEating.png":
/*!************************************!*\
  !*** ./src/images/fleshEating.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/fleshEating.png";

/***/ }),

/***/ "./src/images/guard.png":
/*!******************************!*\
  !*** ./src/images/guard.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/guard.png";

/***/ }),

/***/ "./src/images/head.png":
/*!*****************************!*\
  !*** ./src/images/head.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/head.png";

/***/ }),

/***/ "./src/images/healingWord.png":
/*!************************************!*\
  !*** ./src/images/healingWord.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/healingWord.png";

/***/ }),

/***/ "./src/images/inventory.png":
/*!**********************************!*\
  !*** ./src/images/inventory.png ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/inventory.png";

/***/ }),

/***/ "./src/images/leapingStrike.png":
/*!**************************************!*\
  !*** ./src/images/leapingStrike.png ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/leapingStrike.png";

/***/ }),

/***/ "./src/images/legs.png":
/*!*****************************!*\
  !*** ./src/images/legs.png ***!
  \*****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/legs.png";

/***/ }),

/***/ "./src/images/mainHand.png":
/*!*********************************!*\
  !*** ./src/images/mainHand.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/mainHand.png";

/***/ }),

/***/ "./src/images/offHand.png":
/*!********************************!*\
  !*** ./src/images/offHand.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/offHand.png";

/***/ }),

/***/ "./src/images/oldShirt.png":
/*!*********************************!*\
  !*** ./src/images/oldShirt.png ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/oldShirt.png";

/***/ }),

/***/ "./src/images/powerfulStrike.png":
/*!***************************************!*\
  !*** ./src/images/powerfulStrike.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/powerfulStrike.png";

/***/ }),

/***/ "./src/images/precisionStrike.png":
/*!****************************************!*\
  !*** ./src/images/precisionStrike.png ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/precisionStrike.png";

/***/ }),

/***/ "./src/images/quickAccess.png":
/*!************************************!*\
  !*** ./src/images/quickAccess.png ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/quickAccess.png";

/***/ }),

/***/ "./src/images/reflexiveFocus.png":
/*!***************************************!*\
  !*** ./src/images/reflexiveFocus.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/reflexiveFocus.png";

/***/ }),

/***/ "./src/images/revealWeakness.png":
/*!***************************************!*\
  !*** ./src/images/revealWeakness.png ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/revealWeakness.png";

/***/ }),

/***/ "./src/images/riposte.png":
/*!********************************!*\
  !*** ./src/images/riposte.png ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/riposte.png";

/***/ }),

/***/ "./src/images/torso.png":
/*!******************************!*\
  !*** ./src/images/torso.png ***!
  \******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/torso.png";

/***/ }),

/***/ "./src/images/trustyBelt.png":
/*!***********************************!*\
  !*** ./src/images/trustyBelt.png ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "images/trustyBelt.png";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;